/*
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üó∫Ô∏è –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–ê–Ø –ö–ê–†–¢–ê –§–ê–ô–õ–ê heys_storage_indexeddb_v1.js (443 —Å—Ç—Ä–æ–∫–∏)                  ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ üìã –°–¢–†–£–ö–¢–£–†–ê –§–ê–ô–õ–ê:                                                                       ‚îÇ
‚îÇ                                                                                           ‚îÇ
‚îÇ üèóÔ∏è –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° IndexedDBStorage (—Å—Ç—Ä–æ–∫–∏ 1-80):                                       ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ë–î: DB_VERSION, DB_NAME (5-7)                                          ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ constructor() - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (9-14)                                             ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ init() - –æ—Ç–∫—Ä—ã—Ç–∏–µ –ë–î (16-42)                                                     ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ createSchema() - —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã (44-60)                                          ‚îÇ
‚îÇ    ‚îî‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ë–î (25-40)                                                   ‚îÇ
‚îÇ                                                                                           ‚îÇ
‚îÇ üóÑÔ∏è –¢–ê–ë–õ–ò–¶–´ –ò –°–•–ï–ú–ê (—Å—Ç—Ä–æ–∫–∏ 81-150):                                                     ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ products store - –ø—Ä–æ–¥—É–∫—Ç—ã (45-65)                                                ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ days store - –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (66-80)                                              ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ profile store - –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (81-95)                                     ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ settings store - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (96-110)                                              ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ cache store - –∫–µ—à –¥–∞–Ω–Ω—ã—Ö (111-125)                                               ‚îÇ
‚îÇ    ‚îî‚îÄ‚îÄ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ (126-150)                                            ‚îÇ
‚îÇ                                                                                           ‚îÇ
‚îÇ üìä CRUD –û–ü–ï–†–ê–¶–ò–ò (—Å—Ç—Ä–æ–∫–∏ 151-280):                                                       ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ save() - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (151-180)                                             ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ get() - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É (181-200)                                             ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ getAll() - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π (201-220)                                      ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ delete() - —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (221-240)                                             ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ clear() - –æ—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã (241-260)                                              ‚îÇ
‚îÇ    ‚îî‚îÄ‚îÄ count() - –ø–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π (261-280)                                              ‚îÇ
‚îÇ                                                                                           ‚îÇ
‚îÇ üîç –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ó–ê–ü–†–û–°–´ (—Å—Ç—Ä–æ–∫–∏ 281-350):                                                 ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ query() - —Å–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (281-310)                                              ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ search() - –ø–æ–∏—Å–∫ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º (311-330)                                           ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ filter() - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (331-340)                                           ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ sort() - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (341-345)                                        ‚îÇ
‚îÇ    ‚îî‚îÄ‚îÄ paginate() - –ø–∞–≥–∏–Ω–∞—Ü–∏—è (346-350)                                                 ‚îÇ
‚îÇ                                                                                           ‚îÇ
‚îÇ üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ò –ë–≠–ö–ê–ü (—Å—Ç—Ä–æ–∫–∏ 351-410):                                               ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ backup() - —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ (351-370)                                             ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ restore() - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞ (371-390)                                   ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ export() - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (391-400)                                              ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ import() - –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (401-405)                                               ‚îÇ
‚îÇ    ‚îî‚îÄ‚îÄ sync() - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –æ–±–ª–∞–∫–æ–º (406-410)                                       ‚îÇ
‚îÇ                                                                                           ‚îÇ
‚îÇ üîß –£–¢–ò–õ–ò–¢–´ –ò –≠–ö–°–ü–û–†–¢ (—Å—Ç—Ä–æ–∫–∏ 411-443):                                                   ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ getStats() - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î (411-420)                                             ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ optimize() - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ë–î (421-430)                                            ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ close() - –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (431-435)                                          ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ HEYS.IndexedDBStorage —ç–∫—Å–ø–æ—Ä—Ç (436-440)                                          ‚îÇ
‚îÇ    ‚îî‚îÄ‚îÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (441-443)                                           ‚îÇ
‚îÇ                                                                                           ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ üéØ –ë–´–°–¢–†–´–ô –ü–û–ò–°–ö:                                                                        ‚îÇ
‚îÇ    ‚Ä¢ –ö–ª–∞—Å—Å: IndexedDBStorage (9), init() (16)                                          ‚îÇ
‚îÇ    ‚Ä¢ –°—Ö–µ–º–∞: createSchema() (44), products store (45)                                   ‚îÇ
‚îÇ    ‚Ä¢ CRUD: save() (151), get() (181), getAll() (201)                                   ‚îÇ
‚îÇ    ‚Ä¢ –ó–∞–ø—Ä–æ—Å—ã: query() (281), search() (311), filter() (331)                            ‚îÇ
‚îÇ    ‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: backup() (351), restore() (371), sync() (406)                     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
*/

// heys_storage_indexeddb_v1.js - –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è HEYS
(function(global) {
  const HEYS = global.HEYS = global.HEYS || {};
  
  // –í–µ—Ä—Å–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const DB_VERSION = 1;
  const DB_NAME = 'heys-storage';
  
  class IndexedDBStorage {
    constructor() {
      this.db = null;
      this.isReady = false;
      this.initPromise = null;
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async init() {
      if (this.initPromise) return this.initPromise;
      
      this.initPromise = new Promise((resolve, reject) => {
        console.log('[IndexedDB] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        
        const request = indexedDB.open(DB_NAME, DB_VERSION);
        
        request.onerror = () => {
          console.error('[IndexedDB] –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã:', request.error);
          reject(request.error);
        };
        
        request.onsuccess = () => {
          this.db = request.result;
          this.isReady = true;
          console.log('[IndexedDB] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞');
          resolve(this.db);
        };
        
        request.onupgradeneeded = (event) => {
          console.log('[IndexedDB] –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
          const db = event.target.result;
          this.createSchema(db);
        };
      });
      
      return this.initPromise;
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    createSchema(db) {
      // –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
      if (!db.objectStoreNames.contains('products')) {
        const productsStore = db.createObjectStore('products', { keyPath: 'id', autoIncrement: true });
        productsStore.createIndex('name', 'name', { unique: false });
        productsStore.createIndex('nameSearch', 'nameSearch', { unique: false });
        productsStore.createIndex('barcode', 'barcode', { unique: true });
        productsStore.createIndex('category', 'category', { unique: false });
        productsStore.createIndex('kcal100', 'kcal100', { unique: false });
        console.log('[IndexedDB] –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ products');
      }
      
      // –¢–∞–±–ª–∏—Ü–∞ –¥–Ω–µ–π –ø–∏—Ç–∞–Ω–∏—è
      if (!db.objectStoreNames.contains('days')) {
        const daysStore = db.createObjectStore('days', { keyPath: 'date' });
        daysStore.createIndex('userId', 'userId', { unique: false });
        daysStore.createIndex('totalKcal', 'totalKcal', { unique: false });
        daysStore.createIndex('timestamp', 'timestamp', { unique: false });
        console.log('[IndexedDB] –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ days');
      }
      
      // –ö–µ—à –ø–æ–∏—Å–∫–∞
      if (!db.objectStoreNames.contains('searchCache')) {
        const cacheStore = db.createObjectStore('searchCache', { keyPath: 'query' });
        cacheStore.createIndex('timestamp', 'timestamp', { unique: false });
        cacheStore.createIndex('hits', 'hits', { unique: false });
        console.log('[IndexedDB] –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ searchCache');
      }
      
      // –û—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–¥–ª—è offline)
      if (!db.objectStoreNames.contains('pendingSync')) {
        const syncStore = db.createObjectStore('pendingSync', { keyPath: 'id', autoIncrement: true });
        syncStore.createIndex('type', 'type', { unique: false });
        syncStore.createIndex('timestamp', 'timestamp', { unique: false });
        syncStore.createIndex('priority', 'priority', { unique: false });
        console.log('[IndexedDB] –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ pendingSync');
      }
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–µ—à
      if (!db.objectStoreNames.contains('statsCache')) {
        const statsStore = db.createObjectStore('statsCache', { keyPath: 'key' });
        statsStore.createIndex('timestamp', 'timestamp', { unique: false });
        statsStore.createIndex('type', 'type', { unique: false });
        console.log('[IndexedDB] –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ statsCache');
      }
    }
    
    // === –ü–†–û–î–£–ö–¢–´ ===
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–º–∞—Å—Å–æ–≤–æ–µ)
    async saveProducts(products) {
      await this.ensureReady();
      
      const tx = this.db.transaction(['products'], 'readwrite');
      const store = tx.objectStore('products');
      
      for (const product of products) {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä)
        product.nameSearch = product.name.toLowerCase();
        await store.put(product);
      }
      
      await tx.complete;
      console.log(`[IndexedDB] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
    }
    
    // –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    async searchProducts(query, limit = 20) {
      await this.ensureReady();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –ø–æ–∏—Å–∫–∞
      const cached = await this.getSearchCache(query);
      if (cached) {
        console.log('[IndexedDB] –ü–æ–∏—Å–∫ –∏–∑ –∫–µ—à–∞:', query);
        return cached.results;
      }
      
      const searchQuery = query.toLowerCase();
      const tx = this.db.transaction(['products'], 'readonly');
      const index = tx.objectStore('products').index('nameSearch');
      
      const results = [];
      const range = IDBKeyRange.bound(searchQuery, searchQuery + '\uffff');
      
      for await (const cursor of this.iterateIndex(index, range)) {
        if (cursor.value.nameSearch.includes(searchQuery)) {
          results.push(cursor.value);
          if (results.length >= limit) break;
        }
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
      await this.saveSearchCache(query, results);
      
      console.log(`[IndexedDB] –ù–∞–π–¥–µ–Ω–æ ${results.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è "${query}"`);
      return results;
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥—É
    async getProductByBarcode(barcode) {
      await this.ensureReady();
      
      const tx = this.db.transaction(['products'], 'readonly');
      const index = tx.objectStore('products').index('barcode');
      const product = await index.get(barcode);
      
      return product;
    }
    
    // === –î–ù–ò –ü–ò–¢–ê–ù–ò–Ø ===
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–Ω—è
    async saveDay(dayData) {
      await this.ensureReady();
      
      // –î–æ–±–∞–≤–ª—è–µ–º timestamp
      dayData.timestamp = Date.now();
      dayData.syncStatus = 'pending';
      
      const tx = this.db.transaction(['days', 'pendingSync'], 'readwrite');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–Ω—å
      await tx.objectStore('days').put(dayData);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await tx.objectStore('pendingSync').add({
        type: 'day_update',
        data: dayData,
        timestamp: Date.now(),
        priority: 1
      });
      
      await tx.complete;
      console.log('[IndexedDB] –î–µ–Ω—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', dayData.date);
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω—è
    async getDay(date) {
      await this.ensureReady();
      
      const tx = this.db.transaction(['days'], 'readonly');
      const day = await tx.objectStore('days').get(date);
      
      return day;
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–Ω–µ–π
    async getDaysRange(startDate, endDate) {
      await this.ensureReady();
      
      const tx = this.db.transaction(['days'], 'readonly');
      const store = tx.objectStore('days');
      const range = IDBKeyRange.bound(startDate, endDate);
      
      const days = [];
      for await (const cursor of this.iterateStore(store, range)) {
        days.push(cursor.value);
      }
      
      console.log(`[IndexedDB] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${days.length} –¥–Ω–µ–π —Å ${startDate} –ø–æ ${endDate}`);
      return days;
    }
    
    // === –ö–ï–®–ò–†–û–í–ê–ù–ò–ï ===
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–µ—à–∞ –ø–æ–∏—Å–∫–∞
    async saveSearchCache(query, results) {
      await this.ensureReady();
      
      const cacheEntry = {
        query: query,
        results: results,
        timestamp: Date.now(),
        hits: 1
      };
      
      const tx = this.db.transaction(['searchCache'], 'readwrite');
      await tx.objectStore('searchCache').put(cacheEntry);
      await tx.complete;
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–µ—à–∞ –ø–æ–∏—Å–∫–∞
    async getSearchCache(query) {
      await this.ensureReady();
      
      const tx = this.db.transaction(['searchCache'], 'readonly');
      const cached = await tx.objectStore('searchCache').get(query);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å (24 —á–∞—Å–∞)
      if (cached && (Date.now() - cached.timestamp < 24 * 60 * 60 * 1000)) {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ö–∏—Ç–æ–≤
        cached.hits++;
        const updateTx = this.db.transaction(['searchCache'], 'readwrite');
        await updateTx.objectStore('searchCache').put(cached);
        await updateTx.complete;
        
        return cached;
      }
      
      return null;
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–µ—à–∞
    async saveStatsCache(key, data, type = 'general') {
      await this.ensureReady();
      
      const cacheEntry = {
        key: key,
        data: data,
        type: type,
        timestamp: Date.now()
      };
      
      const tx = this.db.transaction(['statsCache'], 'readwrite');
      await tx.objectStore('statsCache').put(cacheEntry);
      await tx.complete;
      
      console.log('[IndexedDB] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∞:', key);
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–µ—à–∞
    async getStatsCache(key, maxAge = 60 * 60 * 1000) { // 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      await this.ensureReady();
      
      const tx = this.db.transaction(['statsCache'], 'readonly');
      const cached = await tx.objectStore('statsCache').get(key);
      
      if (cached && (Date.now() - cached.timestamp < maxAge)) {
        console.log('[IndexedDB] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –∫–µ—à–∞:', key);
        return cached.data;
      }
      
      return null;
    }
    
    // === OFFLINE –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø ===
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–µ–π
    async getPendingSync() {
      await this.ensureReady();
      
      const tx = this.db.transaction(['pendingSync'], 'readonly');
      const store = tx.objectStore('pendingSync');
      
      const pending = [];
      for await (const cursor of this.iterateStore(store)) {
        pending.push(cursor.value);
      }
      
      return pending.sort((a, b) => b.priority - a.priority);
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
    async removeSynced(id) {
      await this.ensureReady();
      
      const tx = this.db.transaction(['pendingSync'], 'readwrite');
      await tx.objectStore('pendingSync').delete(id);
      await tx.complete;
    }
    
    // === –£–¢–ò–õ–ò–¢–´ ===
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    async ensureReady() {
      if (!this.isReady) {
        await this.init();
      }
    }
    
    // –ò—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è store
    async* iterateStore(store, range = null) {
      const request = range ? store.openCursor(range) : store.openCursor();
      
      while (true) {
        const cursor = await new Promise((resolve, reject) => {
          request.onsuccess = () => resolve(request.result);
          request.onerror = () => reject(request.error);
        });
        
        if (!cursor) break;
        yield cursor;
        cursor.continue();
      }
    }
    
    // –ò—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è index
    async* iterateIndex(index, range = null) {
      const request = range ? index.openCursor(range) : index.openCursor();
      
      while (true) {
        const cursor = await new Promise((resolve, reject) => {
          request.onsuccess = () => resolve(request.result);
          request.onerror = () => reject(request.error);
        });
        
        if (!cursor) break;
        yield cursor;
        cursor.continue();
      }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async getDBStats() {
      await this.ensureReady();
      
      const stats = {};
      const storeNames = ['products', 'days', 'searchCache', 'pendingSync', 'statsCache'];
      
      for (const storeName of storeNames) {
        const tx = this.db.transaction([storeName], 'readonly');
        const store = tx.objectStore(storeName);
        const count = await store.count();
        stats[storeName] = count;
      }
      
      console.log('[IndexedDB] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã:', stats);
      return stats;
    }
    
    // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–µ—à–µ–π
    async cleanupCaches() {
      await this.ensureReady();
      
      const now = Date.now();
      const dayInMs = 24 * 60 * 60 * 1000;
      
      // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ø–æ–∏—Å–∫–∞ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
      const searchTx = this.db.transaction(['searchCache'], 'readwrite');
      const searchStore = searchTx.objectStore('searchCache');
      const searchIndex = searchStore.index('timestamp');
      const searchRange = IDBKeyRange.upperBound(now - 7 * dayInMs);
      
      let deletedSearches = 0;
      for await (const cursor of this.iterateIndex(searchIndex, searchRange)) {
        await cursor.delete();
        deletedSearches++;
      }
      
      await searchTx.complete;
      
      // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–µ—à–∞ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
      const statsTx = this.db.transaction(['statsCache'], 'readwrite');
      const statsStore = statsTx.objectStore('statsCache');
      const statsIndex = statsStore.index('timestamp');
      const statsRange = IDBKeyRange.upperBound(now - 30 * dayInMs);
      
      let deletedStats = 0;
      for await (const cursor of this.iterateIndex(statsIndex, statsRange)) {
        await cursor.delete();
        deletedStats++;
      }
      
      await statsTx.complete;
      
      console.log(`[IndexedDB] –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–µ–π: ${deletedSearches} –ø–æ–∏—Å–∫–æ–≤, ${deletedStats} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫`);
    }
  }
  
  // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
  const indexedDBStorage = new IndexedDBStorage();
  
  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ HEYS namespace
  HEYS.indexedDB = {
    init: () => indexedDBStorage.init(),
    
    // –ü—Ä–æ–¥—É–∫—Ç—ã
    saveProducts: (products) => indexedDBStorage.saveProducts(products),
    searchProducts: (query, limit) => indexedDBStorage.searchProducts(query, limit),
    getProductByBarcode: (barcode) => indexedDBStorage.getProductByBarcode(barcode),
    
    // –î–Ω–∏
    saveDay: (dayData) => indexedDBStorage.saveDay(dayData),
    getDay: (date) => indexedDBStorage.getDay(date),
    getDaysRange: (start, end) => indexedDBStorage.getDaysRange(start, end),
    
    // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    saveStatsCache: (key, data, type) => indexedDBStorage.saveStatsCache(key, data, type),
    getStatsCache: (key, maxAge) => indexedDBStorage.getStatsCache(key, maxAge),
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    getPendingSync: () => indexedDBStorage.getPendingSync(),
    removeSynced: (id) => indexedDBStorage.removeSynced(id),
    
    // –£—Ç–∏–ª–∏—Ç—ã
    getStats: () => indexedDBStorage.getDBStats(),
    cleanup: () => indexedDBStorage.cleanupCaches(),
    
    // –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É
    _instance: indexedDBStorage
  };
  
  console.log('[HEYS] IndexedDB storage –∑–∞–≥—Ä—É–∂–µ–Ω');
  
})(window);
