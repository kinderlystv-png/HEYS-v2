/*
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üó∫Ô∏è –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–ê–Ø –ö–ê–†–¢–ê –§–ê–ô–õ–ê heys_worker_manager_v1.js (338 —Å—Ç—Ä–æ–∫)                      ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ üìã –°–¢–†–£–ö–¢–£–†–ê –§–ê–ô–õ–ê:                                                                       ‚îÇ
‚îÇ                                                                                           ‚îÇ
‚îÇ üèóÔ∏è –ö–õ–ê–°–° WORKERMANAGER (—Å—Ç—Ä–æ–∫–∏ 1-50):                                                   ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: workers Map, taskQueue, maxWorkers (6-13)                           ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ getBasePath() - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø—É—Ç–∏ (16-25)                                ‚îÇ
‚îÇ    ‚îî‚îÄ‚îÄ getWorkerScripts() - –∫–∞—Ä—Ç–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤ (26-50)                                      ‚îÇ
‚îÇ                                                                                           ‚îÇ
‚îÇ ‚ö° –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–û–†–ö–ï–†–ê–ú–ò (—Å—Ç—Ä–æ–∫–∏ 51-150):                                                  ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ createWorker() - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞ (51-80)                                 ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ destroyWorker() - —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–∞ (81-100)                                   ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ getAvailableWorker() - –ø–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ (101-120)                                ‚îÇ
‚îÇ    ‚îî‚îÄ‚îÄ handleWorkerMessage() - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (121-150)                            ‚îÇ
‚îÇ                                                                                           ‚îÇ
‚îÇ üìã –û–ß–ï–†–ï–î–¨ –ó–ê–î–ê–ß (—Å—Ç—Ä–æ–∫–∏ 151-230):                                                       ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ addTask() - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å (151-180)                                ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ processTaskQueue() - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ (181-210)                                 ‚îÇ
‚îÇ    ‚îî‚îÄ‚îÄ executeTask() - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (211-230)                                      ‚îÇ
‚îÇ                                                                                           ‚îÇ
‚îÇ üîß –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ú–ï–¢–û–î–´ (—Å—Ç—Ä–æ–∫–∏ 231-300):                                           ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ runCalculation() - –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è (231-250)                           ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ runSearch() - –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ (251-270)                                         ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ runAnalytics() - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (271-290)                               ‚îÇ
‚îÇ    ‚îî‚îÄ‚îÄ runSync() - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (291-300)                                       ‚îÇ
‚îÇ                                                                                           ‚îÇ
‚îÇ üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì (—Å—Ç—Ä–æ–∫–∏ 301-338):                                                          ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ getStats() - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤ (301-320)                                       ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ cleanup() - –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ (321-330)                                           ‚îÇ
‚îÇ    ‚îî‚îÄ‚îÄ –≠–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å (331-338)                                           ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
*/

// heys_worker_manager_v1.js - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Web Workers –¥–ª—è HEYS
(function(global) {
  const HEYS = global.HEYS = global.HEYS || {};
  
  class WorkerManager {
    constructor() {
      this.workers = new Map();
      this.taskQueue = [];
      this.maxWorkers = navigator.hardwareConcurrency || 4;
      this.currentTaskId = 0;
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
      this.workerScripts = this.getWorkerScripts();
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø—É—Ç–∏ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤
    getBasePath() {
      const currentPath = window.location.pathname;
      if (currentPath.includes('/TESTS/')) {
        return '../';
      }
      return './';
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤
    getWorkerScripts() {
      const basePath = this.getBasePath();
      const currentPath = window.location.pathname;
      
      // –î–ª—è —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π search worker
      if (currentPath.includes('/TESTS/')) {
        return {
          search: './search_worker.js', // –õ–æ–∫–∞–ª—å–Ω—ã–π —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π worker –¥–ª—è —Ç–µ—Å—Ç–æ–≤
          analytics: `${basePath}workers/analytics_worker.js`,
          sync: `${basePath}workers/sync_worker.js`,
          calculation: `${basePath}workers/calculation_worker.js`
        };
      }
      
      return {
        search: `${basePath}workers/search_worker.js`,
        analytics: `${basePath}workers/analytics_worker.js`,
        sync: `${basePath}workers/sync_worker.js`,
        calculation: `${basePath}workers/calculation_worker.js`
      };
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–æ–≤
    async init() {
      console.log(`[WorkerManager] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ${this.maxWorkers} –≤–æ—Ä–∫–µ—Ä–æ–≤...`);
      
      // –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞—á
      for (const [type, script] of Object.entries(this.workerScripts)) {
        try {
          await this.createWorker(type, script);
          console.log(`[WorkerManager] –í–æ—Ä–∫–µ—Ä ${type} —Å–æ–∑–¥–∞–Ω`);
        } catch (error) {
          console.warn(`[WorkerManager] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–æ—Ä–∫–µ—Ä ${type}:`, error);
        }
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏
      this.startQueueProcessor();
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–∞
    async createWorker(type, scriptPath) {
      return new Promise((resolve, reject) => {
        const worker = new Worker(scriptPath);
        
        worker.onmessage = (e) => this.handleWorkerMessage(type, e);
        worker.onerror = (error) => {
          console.error(`[WorkerManager] –û—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ ${type}:`, error);
          this.workers.delete(type);
          reject(error);
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–æ—Ä–∫–µ—Ä–∞
        worker.postMessage({ type: 'ping' });
        
        const timeout = setTimeout(() => {
          reject(new Error(`–í–æ—Ä–∫–µ—Ä ${type} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç`));
        }, 5000);
        
        const pingHandler = (e) => {
          if (e.data.type === 'pong') {
            clearTimeout(timeout);
            worker.removeEventListener('message', pingHandler);
            
            this.workers.set(type, {
              worker: worker,
              busy: false,
              tasks: new Map()
            });
            
            resolve(worker);
          }
        };
        
        worker.addEventListener('message', pingHandler);
      });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–æ—Ä–∫–µ—Ä–æ–≤
    handleWorkerMessage(workerType, event) {
      const { type, taskId, data, error } = event.data;
      
      if (type === 'task_complete') {
        const workerInfo = this.workers.get(workerType);
        if (workerInfo && workerInfo.tasks.has(taskId)) {
          const task = workerInfo.tasks.get(taskId);
          
          if (error) {
            task.reject(new Error(error));
          } else {
            task.resolve(data);
          }
          
          workerInfo.tasks.delete(taskId);
          workerInfo.busy = workerInfo.tasks.size > 0;
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥–∏
          this.processNextTask();
        }
      } else if (type === 'progress') {
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        HEYS.events?.emit('worker_progress', {
          workerType,
          taskId,
          progress: data
        });
      }
    }
    
    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    async executeTask(workerType, taskData, priority = 1) {
      return new Promise((resolve, reject) => {
        const taskId = ++this.currentTaskId;
        const task = {
          id: taskId,
          workerType,
          data: taskData,
          priority,
          resolve,
          reject,
          timestamp: Date.now()
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        this.taskQueue.push(task);
        this.taskQueue.sort((a, b) => b.priority - a.priority);
        
        console.log(`[WorkerManager] –ó–∞–¥–∞—á–∞ ${taskId} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å (${workerType})`);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        this.processNextTask();
      });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á
    processNextTask() {
      if (this.taskQueue.length === 0) return;
      
      // –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤–æ—Ä–∫–µ—Ä
      for (const task of this.taskQueue) {
        const workerInfo = this.workers.get(task.workerType);
        
        if (workerInfo && !workerInfo.busy) {
          // –í–æ—Ä–∫–µ—Ä —Å–≤–æ–±–æ–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
          this.taskQueue.splice(this.taskQueue.indexOf(task), 1);
          this.assignTaskToWorker(task, workerInfo);
          break;
        }
      }
    }
    
    // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤–æ—Ä–∫–µ—Ä—É
    assignTaskToWorker(task, workerInfo) {
      workerInfo.busy = true;
      workerInfo.tasks.set(task.id, task);
      
      workerInfo.worker.postMessage({
        type: 'execute_task',
        taskId: task.id,
        data: task.data
      });
      
      console.log(`[WorkerManager] –ó–∞–¥–∞—á–∞ ${task.id} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤–æ—Ä–∫–µ—Ä—É ${task.workerType}`);
    }
    
    // –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏
    startQueueProcessor() {
      setInterval(() => {
        this.processNextTask();
      }, 100);
    }
    
    // === –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    // –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ñ–æ–Ω–µ
    async searchProductsInBackground(query, options = {}) {
      const taskData = {
        type: 'product_search',
        query: query,
        limit: options.limit || 20,
        useCache: options.useCache !== false
      };
      
      return await this.executeTask('search', taskData, 2);
    }
    
    // –†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π –≤ —Ñ–æ–Ω–µ
    async calculateNutritionInBackground(products, portions) {
      const taskData = {
        type: 'nutrition_calculation',
        products: products,
        portions: portions
      };
      
      return await this.executeTask('calculation', taskData, 3);
    }
    
    // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤ —Ñ–æ–Ω–µ
    async generateAnalyticsInBackground(dateRange, options = {}) {
      const taskData = {
        type: 'analytics_generation',
        startDate: dateRange.start,
        endDate: dateRange.end,
        includeCharts: options.includeCharts || false,
        includeTrends: options.includeTrends || false
      };
      
      return await this.executeTask('analytics', taskData, 1);
    }
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ —Ñ–æ–Ω–µ
    async syncDataInBackground() {
      const taskData = {
        type: 'data_sync',
        timestamp: Date.now()
      };
      
      return await this.executeTask('sync', taskData, 1);
    }
    
    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ–Ω–µ
    async exportDataInBackground(format, dateRange) {
      const taskData = {
        type: 'data_export',
        format: format, // 'csv', 'json', 'pdf'
        startDate: dateRange.start,
        endDate: dateRange.end
      };
      
      return await this.executeTask('calculation', taskData, 1);
    }
    
    // === –£–¢–ò–õ–ò–¢–´ ===
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Ä–∫–µ—Ä–æ–≤
    getWorkerStats() {
      const stats = {
        totalWorkers: this.workers.size,
        busyWorkers: 0,
        queueLength: this.taskQueue.length,
        workers: {}
      };
      
      for (const [type, info] of this.workers) {
        stats.workers[type] = {
          busy: info.busy,
          activeTasks: info.tasks.size
        };
        
        if (info.busy) stats.busyWorkers++;
      }
      
      return stats;
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤
    terminate() {
      console.log('[WorkerManager] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤–æ—Ä–∫–µ—Ä–æ–≤...');
      
      for (const [type, info] of this.workers) {
        info.worker.terminate();
        console.log(`[WorkerManager] –í–æ—Ä–∫–µ—Ä ${type} –∑–∞–≤–µ—Ä—à–µ–Ω`);
      }
      
      this.workers.clear();
      this.taskQueue = [];
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Web Workers
    static isSupported() {
      return typeof Worker !== 'undefined';
    }
  }
  
  // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
  const workerManager = new WorkerManager();
  
  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ HEYS namespace
  HEYS.workers = {
    init: () => workerManager.init(),
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    execute: (type, data, priority) => workerManager.executeTask(type, data, priority),
    
    // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    searchProducts: (query, options) => workerManager.searchProductsInBackground(query, options),
    calculateNutrition: (products, portions) => workerManager.calculateNutritionInBackground(products, portions),
    generateAnalytics: (dateRange, options) => workerManager.generateAnalyticsInBackground(dateRange, options),
    syncData: () => workerManager.syncDataInBackground(),
    exportData: (format, dateRange) => workerManager.exportDataInBackground(format, dateRange),
    
    // –£—Ç–∏–ª–∏—Ç—ã
    getStats: () => workerManager.getWorkerStats(),
    terminate: () => workerManager.terminate(),
    isSupported: WorkerManager.isSupported,
    
    // –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É
    _instance: workerManager
  };
  
  // –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ—Å—Ç–∞–º–∏
  HEYS.WorkerManager = {
    createWorker: (name, script, options) => workerManager.createWorker(name, script, options),
    postMessage: (name, message, transferable) => workerManager.postMessage(name, message, transferable),
    setMessageHandler: (name, handler) => workerManager.setMessageHandler(name, handler),
    terminateWorker: (name) => workerManager.terminateWorker(name),
    getStats: () => workerManager.getWorkerStats(),
    _instance: workerManager
  };
  
  console.log('[HEYS] Worker Manager –∑–∞–≥—Ä—É–∂–µ–Ω');
  
})(window);
