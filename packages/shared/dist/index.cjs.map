{"version":3,"sources":["../src/monitoring/performance.ts","../src/monitoring/realtime.ts","../src/monitoring/index.ts","../src/security/validation.ts","../src/security/headers.ts","../src/security/pentest.ts","../src/index.ts"],"names":["PerformanceMonitor","config","name","value","unit","tags","metric","error","severity","context","errorReport","fn","start","result","duration","payload","sessionId","monitor","recordMetric","recordError","measureAsync","measure","RealtimeMonitor","websocketUrl","event","data","callback","rule","alertRule","id","index","previous","current","alert","a","metricName","applicableRules","subscribers","realtimeMonitor","addAlert","removeAlert","updateLiveMetric","getLiveMetrics","getActiveAlerts","createMonitoringConfig","setupMonitoring","monitoringConfig","list","entry","z","DOMPurify","ValidationSchemas","InputSanitizer","input","dangerous","sanitized","pattern","SecurityRules","SecurityValidator","schema","options","processedData","parseResult","securityErrors","defaultRules","strictErrors","type","obj","item","key","ruleNames","errors","ruleName","SecurityBoundary","rules","_target","_propertyName","descriptor","method","validator","args","i","validation","SecurityError","message","defaultValidator","validate","sanitize","CSPBuilder","_CSPBuilder","initialDirectives","directive","values","existing","policies","SecurityHeadersManager","_SecurityHeadersManager","isDevelopment","headers","csp","defaultCSP","hsts","hstsValue","feature","allowlist","res","securityHeaders","warnings","env","customConfig","CORSManager","_CORSManager","origin","allowedOrigins","defaultSecurityHeaders","defaultCORS","XSSScanner","target","vulnerabilities","testValue","SQLInjectionScanner","InputValidationScanner","_value","testCases","testCase","AuthBypassScanner","authFields","bypassAttempts","field","attempt","PenetrationTestFramework","scanner","targetName","startTime","allVulnerabilities","scannersToRun","s","endTime","summary","v","recommendations","vuln","report","severityColors","rec","defaultPentestFramework","formatDate","date","generateId"],"mappings":"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","sourcesContent":["/**\r\n * Modern Performance Monitoring System\r\n * \r\n * Comprehensive performance tracking with metrics collection,\r\n * error reporting, and real-time monitoring capabilities.\r\n */\r\n\r\nexport interface PerformanceMetric {\r\n  name: string;\r\n  value: number;\r\n  unit: string;\r\n  timestamp: number;\r\n  tags?: Record<string, string>;\r\n}\r\n\r\nexport interface ErrorReport {\r\n  id: string;\r\n  message: string;\r\n  stack?: string;\r\n  timestamp: number;\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n  context?: Record<string, unknown>;\r\n  userId?: string;\r\n  sessionId?: string;\r\n}\r\n\r\nexport interface MonitoringConfig {\r\n  enabled: boolean;\r\n  endpoint?: string;\r\n  apiKey?: string;\r\n  batchSize?: number;\r\n  flushInterval?: number;\r\n  enableRealtime?: boolean;\r\n}\r\n\r\nexport class PerformanceMonitor {\r\n  private metrics: PerformanceMetric[] = [];\r\n  private errors: ErrorReport[] = [];\r\n  private config: MonitoringConfig;\r\n  private batchTimer?: NodeJS.Timeout | undefined;\r\n\r\n  constructor(config: MonitoringConfig) {\r\n    this.config = config;\r\n    if (config.enabled && config.flushInterval) {\r\n      this.startBatchReporting();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Record a performance metric\r\n   */\r\n  recordMetric(name: string, value: number, unit: string = 'ms', tags?: Record<string, string>): void {\r\n    if (!this.config.enabled) return;\r\n\r\n    const metric: PerformanceMetric = {\r\n      name,\r\n      value,\r\n      unit,\r\n      timestamp: Date.now(),\r\n      ...(tags && { tags })\r\n    };\r\n\r\n    this.metrics.push(metric);\r\n    \r\n    if (this.config.batchSize && this.metrics.length >= this.config.batchSize) {\r\n      this.flush();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Record an error\r\n   */\r\n  recordError(error: Error | string, severity: ErrorReport['severity'] = 'medium', context?: Record<string, unknown>): void {\r\n    if (!this.config.enabled) return;\r\n\r\n    const errorReport: ErrorReport = {\r\n      id: this.generateId(),\r\n      message: typeof error === 'string' ? error : error.message,\r\n      timestamp: Date.now(),\r\n      severity,\r\n      sessionId: this.getSessionId(),\r\n      ...(typeof error === 'object' && error.stack && { stack: error.stack }),\r\n      ...(context && { context })\r\n    };\r\n\r\n    this.errors.push(errorReport);\r\n    \r\n    if (severity === 'critical' || (this.config.batchSize && this.errors.length >= this.config.batchSize)) {\r\n      this.flush();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Measure execution time of a function\r\n   */\r\n  async measureAsync<T>(name: string, fn: () => Promise<T>, tags?: Record<string, string>): Promise<T> {\r\n    const start = performance.now();\r\n    try {\r\n      const result = await fn();\r\n      const duration = performance.now() - start;\r\n      this.recordMetric(name, duration, 'ms', tags);\r\n      return result;\r\n    } catch (error) {\r\n      const duration = performance.now() - start;\r\n      this.recordMetric(`${name}_error`, duration, 'ms', tags);\r\n      this.recordError(error as Error, 'high', { operation: name, ...tags });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Measure execution time of a synchronous function\r\n   */\r\n  measure<T>(name: string, fn: () => T, tags?: Record<string, string>): T {\r\n    const start = performance.now();\r\n    try {\r\n      const result = fn();\r\n      const duration = performance.now() - start;\r\n      this.recordMetric(name, duration, 'ms', tags);\r\n      return result;\r\n    } catch (error) {\r\n      const duration = performance.now() - start;\r\n      this.recordMetric(`${name}_error`, duration, 'ms', tags);\r\n      this.recordError(error as Error, 'high', { operation: name, ...tags });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current metrics\r\n   */\r\n  getMetrics(): PerformanceMetric[] {\r\n    return [...this.metrics];\r\n  }\r\n\r\n  /**\r\n   * Get current errors\r\n   */\r\n  getErrors(): ErrorReport[] {\r\n    return [...this.errors];\r\n  }\r\n\r\n  /**\r\n   * Flush metrics and errors to endpoint\r\n   */\r\n  async flush(): Promise<void> {\r\n    if (!this.config.endpoint || (!this.metrics.length && !this.errors.length)) {\r\n      return;\r\n    }\r\n\r\n    const payload = {\r\n      metrics: this.metrics,\r\n      errors: this.errors,\r\n      timestamp: Date.now()\r\n    };\r\n\r\n    try {\r\n      await fetch(this.config.endpoint, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...(this.config.apiKey && { 'Authorization': `Bearer ${this.config.apiKey}` })\r\n        },\r\n        body: JSON.stringify(payload)\r\n      });\r\n\r\n      // Clear sent data\r\n      this.metrics = [];\r\n      this.errors = [];\r\n    } catch (error) {\r\n      console.warn('Failed to send monitoring data:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start automatic batch reporting\r\n   */\r\n  private startBatchReporting(): void {\r\n    if (this.batchTimer) {\r\n      clearInterval(this.batchTimer);\r\n    }\r\n\r\n    this.batchTimer = setInterval(() => {\r\n      this.flush();\r\n    }, this.config.flushInterval);\r\n  }\r\n\r\n  /**\r\n   * Stop monitoring and cleanup\r\n   */\r\n  stop(): void {\r\n    if (this.batchTimer) {\r\n      clearInterval(this.batchTimer);\r\n      this.batchTimer = undefined;\r\n    }\r\n    \r\n    // Final flush\r\n    this.flush();\r\n  }\r\n\r\n  private generateId(): string {\r\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  private getSessionId(): string {\r\n    // Simple session ID generation - can be enhanced\r\n    if (typeof window !== 'undefined' && window.sessionStorage) {\r\n      let sessionId = window.sessionStorage.getItem('monitoring_session_id');\r\n      if (!sessionId) {\r\n        sessionId = this.generateId();\r\n        window.sessionStorage.setItem('monitoring_session_id', sessionId);\r\n      }\r\n      return sessionId;\r\n    }\r\n    return 'server-session';\r\n  }\r\n}\r\n\r\n// Default instance\r\nexport const monitor = new PerformanceMonitor({\r\n  enabled: process.env.NODE_ENV === 'production',\r\n  batchSize: 100,\r\n  flushInterval: 30000, // 30 seconds\r\n  enableRealtime: false\r\n});\r\n\r\n// Convenient wrapper functions\r\nexport const recordMetric = (name: string, value: number, unit?: string, tags?: Record<string, string>) => \r\n  monitor.recordMetric(name, value, unit, tags);\r\n\r\nexport const recordError = (error: Error | string, severity?: ErrorReport['severity'], context?: Record<string, unknown>) =>\r\n  monitor.recordError(error, severity, context);\r\n\r\nexport const measureAsync = <T>(name: string, fn: () => Promise<T>, tags?: Record<string, string>) =>\r\n  monitor.measureAsync(name, fn, tags);\r\n\r\nexport const measure = <T>(name: string, fn: () => T, tags?: Record<string, string>) =>\r\n  monitor.measure(name, fn, tags);\r\n","/**\r\n * Real-time Monitoring Dashboard\r\n * \r\n * Provides real-time monitoring capabilities with WebSocket support,\r\n * live metrics visualization, and alert management.\r\n */\r\n\r\nexport interface AlertRule {\r\n  id: string;\r\n  name: string;\r\n  metric: string;\r\n  operator: 'gt' | 'lt' | 'eq' | 'gte' | 'lte';\r\n  threshold: number;\r\n  duration?: number; // seconds\r\n  enabled: boolean;\r\n}\r\n\r\nexport interface Alert {\r\n  id: string;\r\n  ruleId: string;\r\n  message: string;\r\n  severity: 'info' | 'warning' | 'error' | 'critical';\r\n  timestamp: number;\r\n  acknowledged: boolean;\r\n  resolvedAt?: number;\r\n}\r\n\r\nexport interface LiveMetric {\r\n  name: string;\r\n  current: number;\r\n  previous: number;\r\n  trend: 'up' | 'down' | 'stable';\r\n  unit: string;\r\n  timestamp: number;\r\n}\r\n\r\nexport class RealtimeMonitor {\r\n  private ws?: WebSocket | undefined;\r\n  private alerts: Alert[] = [];\r\n  private alertRules: AlertRule[] = [];\r\n  private liveMetrics: Map<string, LiveMetric> = new Map();\r\n  private subscribers: Map<string, Set<(data: any) => void>> = new Map();\r\n\r\n  constructor(private websocketUrl?: string) {\r\n    if (websocketUrl) {\r\n      this.connect();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Connect to WebSocket for real-time updates\r\n   */\r\n  connect(): void {\r\n    // Skip WebSocket connection in test environment\r\n    if (typeof globalThis !== 'undefined' && globalThis.process?.env?.NODE_ENV === 'test') {\r\n      return;\r\n    }\r\n\r\n    if (!this.websocketUrl || (this.ws && this.ws.readyState === 1)) { // 1 = OPEN\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Check if WebSocket is available\r\n      if (typeof WebSocket === 'undefined') {\r\n        console.warn('WebSocket not available in this environment');\r\n        return;\r\n      }\r\n\r\n      this.ws = new WebSocket(this.websocketUrl);\r\n      \r\n      this.ws.onopen = () => {\r\n        console.log('Real-time monitoring connected');\r\n        this.emit('connection', { status: 'connected' });\r\n      };\r\n\r\n      this.ws.onmessage = (event) => {\r\n        try {\r\n          const data = JSON.parse(event.data);\r\n          this.handleMessage(data);\r\n        } catch (error) {\r\n          console.error('Failed to parse WebSocket message:', error);\r\n        }\r\n      };\r\n\r\n      this.ws.onclose = () => {\r\n        console.log('Real-time monitoring disconnected');\r\n        this.emit('connection', { status: 'disconnected' });\r\n        \r\n        // Attempt to reconnect after 5 seconds\r\n        setTimeout(() => this.connect(), 5000);\r\n      };\r\n\r\n      this.ws.onerror = (error) => {\r\n        console.error('WebSocket error:', error);\r\n        this.emit('error', { error });\r\n      };\r\n    } catch (error) {\r\n      console.error('Failed to connect to WebSocket:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disconnect from WebSocket\r\n   */\r\n  disconnect(): void {\r\n    if (this.ws) {\r\n      this.ws.close();\r\n      this.ws = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Subscribe to events\r\n   */\r\n  subscribe(event: string, callback: (data: any) => void): () => void {\r\n    if (!this.subscribers.has(event)) {\r\n      this.subscribers.set(event, new Set());\r\n    }\r\n    \r\n    this.subscribers.get(event)!.add(callback);\r\n    \r\n    // Return unsubscribe function\r\n    return () => {\r\n      this.subscribers.get(event)?.delete(callback);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Add alert rule\r\n   */\r\n  addAlertRule(rule: Omit<AlertRule, 'id'>): string {\r\n    const alertRule: AlertRule = {\r\n      id: this.generateId(),\r\n      ...rule\r\n    };\r\n    \r\n    this.alertRules.push(alertRule);\r\n    this.emit('alert_rule_added', alertRule);\r\n    \r\n    return alertRule.id;\r\n  }\r\n\r\n  /**\r\n   * Remove alert rule\r\n   */\r\n  removeAlertRule(id: string): boolean {\r\n    const index = this.alertRules.findIndex(rule => rule.id === id);\r\n    if (index >= 0) {\r\n      const rule = this.alertRules.splice(index, 1)[0];\r\n      this.emit('alert_rule_removed', rule);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Update live metric and check alerts\r\n   */\r\n  updateMetric(name: string, value: number, unit: string = 'ms'): void {\r\n    const previous = this.liveMetrics.get(name);\r\n    const current: LiveMetric = {\r\n      name,\r\n      current: value,\r\n      previous: previous?.current ?? value,\r\n      trend: this.calculateTrend(value, previous?.current),\r\n      unit,\r\n      timestamp: Date.now()\r\n    };\r\n\r\n    this.liveMetrics.set(name, current);\r\n    this.emit('metric_updated', current);\r\n    \r\n    // Check alerts\r\n    this.checkAlerts(name, value);\r\n  }\r\n\r\n  /**\r\n   * Get all live metrics\r\n   */\r\n  getLiveMetrics(): LiveMetric[] {\r\n    return Array.from(this.liveMetrics.values());\r\n  }\r\n\r\n  /**\r\n   * Get active alerts\r\n   */\r\n  getActiveAlerts(): Alert[] {\r\n    return this.alerts.filter(alert => !alert.acknowledged && !alert.resolvedAt);\r\n  }\r\n\r\n  /**\r\n   * Acknowledge alert\r\n   */\r\n  acknowledgeAlert(id: string): boolean {\r\n    const alert = this.alerts.find(a => a.id === id);\r\n    if (alert && !alert.acknowledged) {\r\n      alert.acknowledged = true;\r\n      this.emit('alert_acknowledged', alert);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Resolve alert\r\n   */\r\n  resolveAlert(id: string): boolean {\r\n    const alert = this.alerts.find(a => a.id === id);\r\n    if (alert && !alert.resolvedAt) {\r\n      alert.resolvedAt = Date.now();\r\n      this.emit('alert_resolved', alert);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Send data through WebSocket\r\n   */\r\n  send(data: any): void {\r\n    if (this.ws?.readyState === WebSocket.OPEN) {\r\n      this.ws.send(JSON.stringify(data));\r\n    }\r\n  }\r\n\r\n  private handleMessage(data: any): void {\r\n    switch (data.type) {\r\n      case 'metric':\r\n        this.updateMetric(data.name, data.value, data.unit);\r\n        break;\r\n      case 'alert':\r\n        this.handleIncomingAlert(data);\r\n        break;\r\n      case 'system_status':\r\n        this.emit('system_status', data);\r\n        break;\r\n      default:\r\n        this.emit('message', data);\r\n    }\r\n  }\r\n\r\n  private handleIncomingAlert(data: any): void {\r\n    const alert: Alert = {\r\n      id: data.id || this.generateId(),\r\n      ruleId: data.ruleId,\r\n      message: data.message,\r\n      severity: data.severity,\r\n      timestamp: data.timestamp || Date.now(),\r\n      acknowledged: false\r\n    };\r\n\r\n    this.alerts.push(alert);\r\n    this.emit('alert_triggered', alert);\r\n  }\r\n\r\n  private checkAlerts(metricName: string, value: number): void {\r\n    const applicableRules = this.alertRules.filter(\r\n      rule => rule.enabled && rule.metric === metricName\r\n    );\r\n\r\n    for (const rule of applicableRules) {\r\n      if (this.evaluateRule(rule, value)) {\r\n        this.triggerAlert(rule, value);\r\n      }\r\n    }\r\n  }\r\n\r\n  private evaluateRule(rule: AlertRule, value: number): boolean {\r\n    switch (rule.operator) {\r\n      case 'gt': return value > rule.threshold;\r\n      case 'gte': return value >= rule.threshold;\r\n      case 'lt': return value < rule.threshold;\r\n      case 'lte': return value <= rule.threshold;\r\n      case 'eq': return value === rule.threshold;\r\n      default: return false;\r\n    }\r\n  }\r\n\r\n  private triggerAlert(rule: AlertRule, value: number): void {\r\n    // Avoid duplicate alerts for the same rule within a short timeframe\r\n    const recentAlert = this.alerts.find(\r\n      alert => alert.ruleId === rule.id && \r\n               Date.now() - alert.timestamp < (rule.duration || 60) * 1000 &&\r\n               !alert.resolvedAt\r\n    );\r\n\r\n    if (recentAlert) return;\r\n\r\n    const alert: Alert = {\r\n      id: this.generateId(),\r\n      ruleId: rule.id,\r\n      message: `${rule.name}: ${rule.metric} is ${value} (threshold: ${rule.threshold})`,\r\n      severity: value > rule.threshold * 2 ? 'critical' : 'warning',\r\n      timestamp: Date.now(),\r\n      acknowledged: false\r\n    };\r\n\r\n    this.alerts.push(alert);\r\n    this.emit('alert_triggered', alert);\r\n  }\r\n\r\n  private calculateTrend(current: number, previous?: number): 'up' | 'down' | 'stable' {\r\n    if (!previous || previous === current) return 'stable';\r\n    return current > previous ? 'up' : 'down';\r\n  }\r\n\r\n  private emit(event: string, data: any): void {\r\n    const subscribers = this.subscribers.get(event);\r\n    if (subscribers) {\r\n      subscribers.forEach(callback => {\r\n        try {\r\n          callback(data);\r\n        } catch (error) {\r\n          console.error(`Error in subscriber for event ${event}:`, error);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private generateId(): string {\r\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n}\r\n\r\n// Default instance for real-time monitoring\r\nexport const realtimeMonitor = new RealtimeMonitor(\r\n  process.env.MONITORING_WS_URL || (typeof window !== 'undefined' ? 'ws://localhost:8080/monitoring' : undefined)\r\n);\r\n\r\n// Convenient helper functions\r\nexport const addAlert = (rule: Omit<AlertRule, 'id'>) => realtimeMonitor.addAlertRule(rule);\r\nexport const removeAlert = (id: string) => realtimeMonitor.removeAlertRule(id);\r\nexport const updateLiveMetric = (name: string, value: number, unit?: string) => \r\n  realtimeMonitor.updateMetric(name, value, unit);\r\nexport const getLiveMetrics = () => realtimeMonitor.getLiveMetrics();\r\nexport const getActiveAlerts = () => realtimeMonitor.getActiveAlerts();\r\n","/**\r\n * Monitoring Index\r\n * \r\n * Central export point for all monitoring functionality\r\n */\r\n\r\n// Performance monitoring\r\nexport {\r\n  PerformanceMonitor,\r\n  monitor,\r\n  recordMetric,\r\n  recordError,\r\n  measureAsync,\r\n  measure,\r\n  type PerformanceMetric,\r\n  type ErrorReport,\r\n  type MonitoringConfig\r\n} from './performance';\r\n\r\n// Real-time monitoring\r\nexport {\r\n  RealtimeMonitor,\r\n  realtimeMonitor,\r\n  addAlert,\r\n  removeAlert,\r\n  updateLiveMetric,\r\n  getLiveMetrics,\r\n  getActiveAlerts,\r\n  type AlertRule,\r\n  type Alert,\r\n  type LiveMetric\r\n} from './realtime';\r\n\r\n// Import for internal use\r\nimport { \r\n  monitor, \r\n  recordMetric, \r\n  recordError, \r\n  measureAsync, \r\n  measure\r\n} from './performance';\r\nimport type { MonitoringConfig } from './performance';\r\n\r\n// Monitoring utilities\r\nexport const createMonitoringConfig = (config: Partial<MonitoringConfig> = {}): MonitoringConfig => ({\r\n  enabled: process.env.NODE_ENV === 'production',\r\n  batchSize: 100,\r\n  flushInterval: 30000,\r\n  enableRealtime: false,\r\n  ...config\r\n});\r\n\r\n// Global monitoring setup\r\nexport const setupMonitoring = (config?: Partial<MonitoringConfig>) => {\r\n  const monitoringConfig = createMonitoringConfig(config);\r\n  \r\n  // Setup error boundary for unhandled errors\r\n  if (typeof window !== 'undefined') {\r\n    window.addEventListener('error', (event) => {\r\n      monitor.recordError(event.error || event.message, 'high', {\r\n        filename: event.filename,\r\n        lineno: event.lineno,\r\n        colno: event.colno\r\n      });\r\n    });\r\n\r\n    window.addEventListener('unhandledrejection', (event) => {\r\n      monitor.recordError(event.reason, 'high', {\r\n        type: 'unhandled_promise_rejection'\r\n      });\r\n    });\r\n  }\r\n\r\n  // Setup performance observer for Core Web Vitals\r\n  if (typeof window !== 'undefined' && 'PerformanceObserver' in window) {\r\n    try {\r\n      // Largest Contentful Paint\r\n      const lcpObserver = new PerformanceObserver((list) => {\r\n        for (const entry of list.getEntries()) {\r\n          monitor.recordMetric('lcp', entry.startTime, 'ms', { type: 'core_web_vital' });\r\n        }\r\n      });\r\n      lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\r\n\r\n      // First Input Delay\r\n      const fidObserver = new PerformanceObserver((list) => {\r\n        for (const entry of list.getEntries()) {\r\n          monitor.recordMetric('fid', (entry as any).processingStart - entry.startTime, 'ms', { type: 'core_web_vital' });\r\n        }\r\n      });\r\n      fidObserver.observe({ entryTypes: ['first-input'] });\r\n\r\n      // Cumulative Layout Shift\r\n      const clsObserver = new PerformanceObserver((list) => {\r\n        for (const entry of list.getEntries()) {\r\n          if (!(entry as any).hadRecentInput) {\r\n            monitor.recordMetric('cls', (entry as any).value, 'score', { type: 'core_web_vital' });\r\n          }\r\n        }\r\n      });\r\n      clsObserver.observe({ entryTypes: ['layout-shift'] });\r\n    } catch (error) {\r\n      console.warn('Failed to setup Core Web Vitals monitoring:', error);\r\n    }\r\n  }\r\n\r\n  return {\r\n    config: monitoringConfig,\r\n    monitor,\r\n    recordMetric,\r\n    recordError,\r\n    measureAsync,\r\n    measure\r\n  };\r\n};\r\n","/**\r\n * HEYS Security Layer v1.4\r\n * Modern validation and security system\r\n * \r\n * @author HEYS Team\r\n * @version 1.4.0\r\n * @created 2025-01-31\r\n */\r\n\r\nimport { z } from 'zod';\r\nimport DOMPurify from 'dompurify';\r\n\r\n/**\r\n * Base validation schema definitions\r\n */\r\nexport const ValidationSchemas = {\r\n  // User data validation\r\n  user: z.object({\r\n    id: z.string().uuid(),\r\n    email: z.string().email(),\r\n    username: z.string().min(3).max(50).regex(/^[a-zA-Z0-9_-]+$/),\r\n    password: z.string().min(8).max(128),\r\n    role: z.enum(['admin', 'user', 'moderator', 'guest']),\r\n    isActive: z.boolean().default(true),\r\n    createdAt: z.date().optional(),\r\n    updatedAt: z.date().optional(),\r\n  }),\r\n\r\n  // Content validation\r\n  content: z.object({\r\n    id: z.string().uuid(),\r\n    title: z.string().min(1).max(200),\r\n    content: z.string().max(10000),\r\n    authorId: z.string().uuid(),\r\n    tags: z.array(z.string()).max(10).optional(),\r\n    isPublic: z.boolean().default(false),\r\n    metadata: z.record(z.unknown()).optional(),\r\n  }),\r\n\r\n  // File upload validation\r\n  file: z.object({\r\n    name: z.string().min(1).max(255),\r\n    type: z.string().regex(/^[a-zA-Z0-9\\/\\-\\.]+$/),\r\n    size: z.number().min(1).max(10 * 1024 * 1024), // 10MB max\r\n    content: z.string().or(z.instanceof(ArrayBuffer)),\r\n  }),\r\n\r\n  // API request validation\r\n  apiRequest: z.object({\r\n    method: z.enum(['GET', 'POST', 'PUT', 'DELETE', 'PATCH']),\r\n    path: z.string().regex(/^\\/[a-zA-Z0-9\\/_-]*$/),\r\n    headers: z.record(z.string()).optional(),\r\n    body: z.unknown().optional(),\r\n    query: z.record(z.string()).optional(),\r\n  }),\r\n};\r\n\r\n/**\r\n * Advanced input sanitization\r\n */\r\nexport class InputSanitizer {\r\n  private readonly dompurify: typeof DOMPurify;\r\n  private readonly config: DOMPurify.Config;\r\n\r\n  constructor() {\r\n    this.dompurify = DOMPurify;\r\n    this.config = {\r\n      ALLOWED_TAGS: ['b', 'i', 'em', 'strong', 'a', 'p', 'br'],\r\n      ALLOWED_ATTR: ['href', 'title'],\r\n      ALLOW_DATA_ATTR: false,\r\n      ALLOW_UNKNOWN_PROTOCOLS: false,\r\n      SANITIZE_DOM: true,\r\n      KEEP_CONTENT: true,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Sanitize HTML content\r\n   */\r\n  sanitizeHTML(input: string): string {\r\n    if (typeof input !== 'string') {\r\n      throw new Error('Input must be a string');\r\n    }\r\n    return this.dompurify.sanitize(input, this.config);\r\n  }\r\n\r\n  /**\r\n   * Sanitize plain text (remove all HTML)\r\n   */\r\n  sanitizeText(input: string): string {\r\n    if (typeof input !== 'string') {\r\n      throw new Error('Input must be a string');\r\n    }\r\n    return this.dompurify.sanitize(input, { ALLOWED_TAGS: [] });\r\n  }\r\n\r\n  /**\r\n   * Sanitize SQL input (basic protection)\r\n   */\r\n  sanitizeSQL(input: string): string {\r\n    if (typeof input !== 'string') {\r\n      throw new Error('Input must be a string');\r\n    }\r\n    \r\n    // Remove dangerous SQL patterns\r\n    const dangerous = [\r\n      /('|(\\\\'))/gi,\r\n      /(;|--|\\||\\|\\||&&)/gi,\r\n      /(union|select|insert|update|delete|drop|create|alter|exec|execute)/gi,\r\n      /(\\*|%|_)/gi,\r\n    ];\r\n\r\n    let sanitized = input;\r\n    dangerous.forEach(pattern => {\r\n      sanitized = sanitized.replace(pattern, '');\r\n    });\r\n\r\n    return sanitized.trim();\r\n  }\r\n\r\n  /**\r\n   * Sanitize file name\r\n   */\r\n  sanitizeFileName(input: string): string {\r\n    if (typeof input !== 'string') {\r\n      throw new Error('Input must be a string');\r\n    }\r\n\r\n    return input\r\n      .replace(/[^a-zA-Z0-9._-]/g, '')\r\n      .replace(/\\.{2,}/g, '.')\r\n      .substring(0, 255);\r\n  }\r\n}\r\n\r\n/**\r\n * Security rule definitions\r\n */\r\nexport interface SecurityRule {\r\n  name: string;\r\n  validator: (value: unknown, context?: unknown) => boolean;\r\n  message: string;\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n}\r\n\r\nexport const SecurityRules: Record<string, SecurityRule> = {\r\n  noXSS: {\r\n    name: 'XSS Protection',\r\n    validator: (value: unknown) => {\r\n      if (typeof value !== 'string') return true;\r\n      const xssPatterns = [\r\n        /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\r\n        /javascript:/gi,\r\n        /on\\w+\\s*=/gi,\r\n        /<iframe/gi,\r\n        /<object/gi,\r\n        /<embed/gi,\r\n      ];\r\n      return !xssPatterns.some(pattern => pattern.test(value));\r\n    },\r\n    message: 'Potential XSS attack detected',\r\n    severity: 'critical',\r\n  },\r\n\r\n  noSQLInjection: {\r\n    name: 'SQL Injection Protection',\r\n    validator: (value: unknown) => {\r\n      if (typeof value !== 'string') return true;\r\n      const sqlPatterns = [\r\n        /('|(\\\\'))/gi,\r\n        /(;|--|\\||\\|\\||&&)/gi,\r\n        /\\b(union|select|insert|update|delete|drop|create|alter|exec|execute)\\b/gi,\r\n      ];\r\n      return !sqlPatterns.some(pattern => pattern.test(value));\r\n    },\r\n    message: 'Potential SQL injection detected',\r\n    severity: 'critical',\r\n  },\r\n\r\n  validEmail: {\r\n    name: 'Email Validation',\r\n    validator: (value: unknown) => {\r\n      if (typeof value !== 'string') return false;\r\n      return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value);\r\n    },\r\n    message: 'Invalid email format',\r\n    severity: 'medium',\r\n  },\r\n\r\n  strongPassword: {\r\n    name: 'Strong Password',\r\n    validator: (value: unknown) => {\r\n      if (typeof value !== 'string') return false;\r\n      return (\r\n        value.length >= 8 &&\r\n        /[A-Z]/.test(value) &&\r\n        /[a-z]/.test(value) &&\r\n        /[0-9]/.test(value) &&\r\n        /[^A-Za-z0-9]/.test(value)\r\n      );\r\n    },\r\n    message: 'Password must be at least 8 characters with uppercase, lowercase, number, and special character',\r\n    severity: 'high',\r\n  },\r\n\r\n  noPathTraversal: {\r\n    name: 'Path Traversal Protection',\r\n    validator: (value: unknown) => {\r\n      if (typeof value !== 'string') return true;\r\n      return !/(\\.\\.\\/|\\.\\.\\\\)/g.test(value);\r\n    },\r\n    message: 'Path traversal attempt detected',\r\n    severity: 'high',\r\n  },\r\n};\r\n\r\n/**\r\n * Validation result interface\r\n */\r\nexport interface ValidationResult {\r\n  isValid: boolean;\r\n  errors: ValidationError[];\r\n  warnings: ValidationWarning[];\r\n  sanitized?: unknown;\r\n}\r\n\r\nexport interface ValidationError {\r\n  field: string;\r\n  rule: string;\r\n  message: string;\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n  value?: unknown;\r\n}\r\n\r\nexport interface ValidationWarning {\r\n  field: string;\r\n  message: string;\r\n  suggestion?: string;\r\n}\r\n\r\n/**\r\n * Main Security Validator\r\n */\r\nexport class SecurityValidator {\r\n  private readonly sanitizer: InputSanitizer;\r\n  private readonly customRules: Map<string, SecurityRule>;\r\n\r\n  constructor() {\r\n    this.sanitizer = new InputSanitizer();\r\n    this.customRules = new Map();\r\n  }\r\n\r\n  /**\r\n   * Add custom validation rule\r\n   */\r\n  addRule(name: string, rule: SecurityRule): void {\r\n    this.customRules.set(name, rule);\r\n  }\r\n\r\n  /**\r\n   * Remove custom rule\r\n   */\r\n  removeRule(name: string): void {\r\n    this.customRules.delete(name);\r\n  }\r\n\r\n  /**\r\n   * Validate data against schema\r\n   */\r\n  async validateSchema<T>(\r\n    data: unknown,\r\n    schema: z.ZodSchema<T>,\r\n    options: {\r\n      sanitize?: boolean;\r\n      strictMode?: boolean;\r\n      customRules?: string[];\r\n    } = {}\r\n  ): Promise<ValidationResult> {\r\n    const result: ValidationResult = {\r\n      isValid: true,\r\n      errors: [],\r\n      warnings: [],\r\n    };\r\n\r\n    try {\r\n      // Apply sanitization if requested\r\n      let processedData = data;\r\n      if (options.sanitize && typeof data === 'object' && data !== null) {\r\n        processedData = this.sanitizeObject(data);\r\n        result.sanitized = processedData;\r\n      }\r\n\r\n      // Validate against Zod schema\r\n      const parseResult = schema.safeParse(processedData);\r\n      if (!parseResult.success) {\r\n        parseResult.error.errors.forEach((error: any) => {\r\n          result.errors.push({\r\n            field: error.path.join('.'),\r\n            rule: 'schema',\r\n            message: error.message,\r\n            severity: 'medium',\r\n            value: error.code,\r\n          });\r\n        });\r\n        result.isValid = false;\r\n      }\r\n\r\n      // Apply security rules\r\n      if (options.customRules) {\r\n        const securityErrors = this.applySecurityRules(processedData, options.customRules);\r\n        result.errors.push(...securityErrors);\r\n        if (securityErrors.length > 0) {\r\n          result.isValid = false;\r\n        }\r\n      }\r\n\r\n      // Apply default security rules in strict mode\r\n      if (options.strictMode) {\r\n        const defaultRules = Object.keys(SecurityRules);\r\n        const strictErrors = this.applySecurityRules(processedData, defaultRules);\r\n        result.errors.push(...strictErrors);\r\n        if (strictErrors.length > 0) {\r\n          result.isValid = false;\r\n        }\r\n      }\r\n\r\n    } catch (error) {\r\n      result.isValid = false;\r\n      result.errors.push({\r\n        field: 'root',\r\n        rule: 'validation',\r\n        message: error instanceof Error ? error.message : 'Validation failed',\r\n        severity: 'critical',\r\n      });\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Quick validation for common use cases\r\n   */\r\n  validateInput(\r\n    value: unknown,\r\n    type: 'email' | 'password' | 'text' | 'html' | 'filename',\r\n    options: { required?: boolean; sanitize?: boolean } = {}\r\n  ): ValidationResult {\r\n    const result: ValidationResult = {\r\n      isValid: true,\r\n      errors: [],\r\n      warnings: [],\r\n    };\r\n\r\n    // Check required\r\n    if (options.required && (value === null || value === undefined || value === '')) {\r\n      result.isValid = false;\r\n      result.errors.push({\r\n        field: 'value',\r\n        rule: 'required',\r\n        message: 'Value is required',\r\n        severity: 'medium',\r\n      });\r\n      return result;\r\n    }\r\n\r\n    if (value === null || value === undefined) {\r\n      return result;\r\n    }\r\n\r\n    // Type-specific validation\r\n    switch (type) {\r\n      case 'email':\r\n        if (SecurityRules.validEmail && !SecurityRules.validEmail.validator(value)) {\r\n          result.isValid = false;\r\n          result.errors.push({\r\n            field: 'value',\r\n            rule: 'validEmail',\r\n            message: SecurityRules.validEmail.message,\r\n            severity: SecurityRules.validEmail.severity,\r\n          });\r\n        }\r\n        break;\r\n\r\n      case 'password':\r\n        if (SecurityRules.strongPassword && !SecurityRules.strongPassword.validator(value)) {\r\n          result.isValid = false;\r\n          result.errors.push({\r\n            field: 'value',\r\n            rule: 'strongPassword',\r\n            message: SecurityRules.strongPassword.message,\r\n            severity: SecurityRules.strongPassword.severity,\r\n          });\r\n        }\r\n        break;\r\n\r\n      case 'text':\r\n        if (typeof value === 'string') {\r\n          if (options.sanitize) {\r\n            result.sanitized = this.sanitizer.sanitizeText(value);\r\n          }\r\n          // Check for XSS\r\n          if (SecurityRules.noXSS && !SecurityRules.noXSS.validator(value)) {\r\n            result.isValid = false;\r\n            result.errors.push({\r\n              field: 'value',\r\n              rule: 'noXSS',\r\n              message: SecurityRules.noXSS.message,\r\n              severity: SecurityRules.noXSS.severity,\r\n            });\r\n          }\r\n        }\r\n        break;\r\n\r\n      case 'html':\r\n        if (typeof value === 'string') {\r\n          if (options.sanitize) {\r\n            result.sanitized = this.sanitizer.sanitizeHTML(value);\r\n          }\r\n        }\r\n        break;\r\n\r\n      case 'filename':\r\n        if (typeof value === 'string') {\r\n          if (options.sanitize) {\r\n            result.sanitized = this.sanitizer.sanitizeFileName(value);\r\n          }\r\n          // Check for path traversal\r\n          if (SecurityRules.noPathTraversal && !SecurityRules.noPathTraversal.validator(value)) {\r\n            result.isValid = false;\r\n            result.errors.push({\r\n              field: 'value',\r\n              rule: 'noPathTraversal',\r\n              message: SecurityRules.noPathTraversal.message,\r\n              severity: SecurityRules.noPathTraversal.severity,\r\n            });\r\n          }\r\n        }\r\n        break;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Sanitize object recursively\r\n   */\r\n  private sanitizeObject(obj: unknown): unknown {\r\n    if (typeof obj === 'string') {\r\n      return this.sanitizer.sanitizeText(obj);\r\n    }\r\n\r\n    if (Array.isArray(obj)) {\r\n      return obj.map(item => this.sanitizeObject(item));\r\n    }\r\n\r\n    if (obj && typeof obj === 'object') {\r\n      const sanitized: Record<string, unknown> = {};\r\n      for (const [key, value] of Object.entries(obj)) {\r\n        sanitized[key] = this.sanitizeObject(value);\r\n      }\r\n      return sanitized;\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  /**\r\n   * Apply security rules to data\r\n   */\r\n  private applySecurityRules(data: unknown, ruleNames: string[]): ValidationError[] {\r\n    const errors: ValidationError[] = [];\r\n\r\n    ruleNames.forEach(ruleName => {\r\n      const rule = SecurityRules[ruleName] || this.customRules.get(ruleName);\r\n      if (rule && !rule.validator(data)) {\r\n        errors.push({\r\n          field: 'data',\r\n          rule: ruleName,\r\n          message: rule.message,\r\n          severity: rule.severity,\r\n          value: data,\r\n        });\r\n      }\r\n    });\r\n\r\n    return errors;\r\n  }\r\n}\r\n\r\n/**\r\n * Security boundary decorator\r\n */\r\nexport function SecurityBoundary(rules: string[] = []) {\r\n  return function (_target: any, _propertyName: string, descriptor: PropertyDescriptor) {\r\n    const method = descriptor.value;\r\n    const validator = new SecurityValidator();\r\n\r\n    descriptor.value = async function (...args: any[]) {\r\n      // Validate all arguments\r\n      for (let i = 0; i < args.length; i++) {\r\n        const validation = await validator.validateSchema(\r\n          args[i],\r\n          z.unknown(),\r\n          { strictMode: true, customRules: rules }\r\n        );\r\n\r\n        if (!validation.isValid) {\r\n          throw new SecurityError(\r\n            `Security validation failed for argument ${i}`,\r\n            validation.errors\r\n          );\r\n        }\r\n      }\r\n\r\n      return method.apply(this, args);\r\n    };\r\n  };\r\n}\r\n\r\n/**\r\n * Custom security error\r\n */\r\nexport class SecurityError extends Error {\r\n  public readonly errors: ValidationError[];\r\n\r\n  constructor(message: string, errors: ValidationError[] = []) {\r\n    super(message);\r\n    this.name = 'SecurityError';\r\n    this.errors = errors;\r\n  }\r\n}\r\n\r\n/**\r\n * Default security validator instance\r\n */\r\nexport const defaultValidator = new SecurityValidator();\r\n\r\n/**\r\n * Quick validation functions\r\n */\r\nexport const validate = {\r\n  email: (value: unknown) => defaultValidator.validateInput(value, 'email', { required: true }),\r\n  password: (value: unknown) => defaultValidator.validateInput(value, 'password', { required: true }),\r\n  text: (value: unknown, sanitize = true) => defaultValidator.validateInput(value, 'text', { sanitize }),\r\n  html: (value: unknown, sanitize = true) => defaultValidator.validateInput(value, 'html', { sanitize }),\r\n  filename: (value: unknown, sanitize = true) => defaultValidator.validateInput(value, 'filename', { sanitize }),\r\n};\r\n","/**\r\n * HEYS Security Headers Manager v1.4\r\n * Modern security headers and CSP management\r\n * \r\n * @author HEYS Team\r\n * @version 1.4.0\r\n * @created 2025-01-31\r\n */\r\n\r\n/**\r\n * Content Security Policy builder\r\n */\r\nexport interface CSPDirectives {\r\n  'default-src'?: string[];\r\n  'script-src'?: string[];\r\n  'style-src'?: string[];\r\n  'img-src'?: string[];\r\n  'font-src'?: string[];\r\n  'connect-src'?: string[];\r\n  'media-src'?: string[];\r\n  'object-src'?: string[];\r\n  'frame-src'?: string[];\r\n  'worker-src'?: string[];\r\n  'manifest-src'?: string[];\r\n  'base-uri'?: string[];\r\n  'form-action'?: string[];\r\n  'frame-ancestors'?: string[];\r\n  'upgrade-insecure-requests'?: boolean;\r\n  'block-all-mixed-content'?: boolean;\r\n}\r\n\r\nexport class CSPBuilder {\r\n  public directives: CSPDirectives = {};\r\n\r\n  constructor(initialDirectives: CSPDirectives = {}) {\r\n    this.directives = { ...initialDirectives };\r\n  }\r\n\r\n  /**\r\n   * Set directive values\r\n   */\r\n  setDirective(directive: keyof CSPDirectives, values: string[] | boolean): this {\r\n    if (typeof values === 'boolean') {\r\n      (this.directives as any)[directive] = values;\r\n    } else {\r\n      (this.directives as any)[directive] = [...values];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Add values to existing directive\r\n   */\r\n  addToDirective(directive: keyof CSPDirectives, values: string[]): this {\r\n    if (!this.directives[directive] || typeof this.directives[directive] === 'boolean') {\r\n      (this.directives as any)[directive] = [];\r\n    }\r\n    const existing = this.directives[directive] as string[];\r\n    (this.directives as any)[directive] = [...existing, ...values];\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Build CSP header value\r\n   */\r\n  build(): string {\r\n    const policies: string[] = [];\r\n\r\n    Object.entries(this.directives).forEach(([directive, values]) => {\r\n      if (typeof values === 'boolean' && values) {\r\n        policies.push(directive);\r\n      } else if (Array.isArray(values) && values.length > 0) {\r\n        policies.push(`${directive} ${values.join(' ')}`);\r\n      }\r\n    });\r\n\r\n    return policies.join('; ');\r\n  }\r\n\r\n  /**\r\n   * Create strict CSP for production\r\n   */\r\n  static strict(): CSPBuilder {\r\n    return new CSPBuilder({\r\n      'default-src': [\"'none'\"],\r\n      'script-src': [\"'self'\"],\r\n      'style-src': [\"'self'\", \"'unsafe-inline'\"],\r\n      'img-src': [\"'self'\", 'data:', 'https:'],\r\n      'font-src': [\"'self'\"],\r\n      'connect-src': [\"'self'\"],\r\n      'media-src': [\"'self'\"],\r\n      'object-src': [\"'none'\"],\r\n      'frame-src': [\"'none'\"],\r\n      'base-uri': [\"'self'\"],\r\n      'form-action': [\"'self'\"],\r\n      'frame-ancestors': [\"'none'\"],\r\n      'upgrade-insecure-requests': true,\r\n      'block-all-mixed-content': true,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create development-friendly CSP\r\n   */\r\n  static development(): CSPBuilder {\r\n    return new CSPBuilder({\r\n      'default-src': [\"'self'\"],\r\n      'script-src': [\"'self'\", \"'unsafe-eval'\", \"'unsafe-inline'\", 'localhost:*'],\r\n      'style-src': [\"'self'\", \"'unsafe-inline'\", 'localhost:*'],\r\n      'img-src': [\"'self'\", 'data:', 'https:', 'localhost:*'],\r\n      'font-src': [\"'self'\", 'localhost:*'],\r\n      'connect-src': [\"'self'\", 'localhost:*', 'ws:', 'wss:'],\r\n      'media-src': [\"'self'\", 'localhost:*'],\r\n      'object-src': [\"'none'\"],\r\n      'frame-src': [\"'self'\", 'localhost:*'],\r\n      'base-uri': [\"'self'\"],\r\n      'form-action': [\"'self'\"],\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Security headers configuration\r\n */\r\nexport interface SecurityHeadersConfig {\r\n  // Content Security Policy\r\n  csp?: CSPDirectives;\r\n  \r\n  // HTTP Strict Transport Security\r\n  hsts?: {\r\n    maxAge?: number;\r\n    includeSubDomains?: boolean;\r\n    preload?: boolean;\r\n  } | false;\r\n\r\n  // X-Frame-Options\r\n  frameOptions?: 'DENY' | 'SAMEORIGIN' | string;\r\n\r\n  // X-Content-Type-Options\r\n  contentTypeOptions?: boolean;\r\n\r\n  // X-XSS-Protection (legacy)\r\n  xssProtection?: boolean;\r\n\r\n  // Referrer Policy\r\n  referrerPolicy?: 'no-referrer' | 'no-referrer-when-downgrade' | 'origin' | 'origin-when-cross-origin' | 'same-origin' | 'strict-origin' | 'strict-origin-when-cross-origin' | 'unsafe-url';\r\n\r\n  // Permissions Policy\r\n  permissionsPolicy?: Record<string, string[]>;\r\n\r\n  // Cross-Origin policies\r\n  crossOriginEmbedderPolicy?: 'unsafe-none' | 'require-corp';\r\n  crossOriginOpenerPolicy?: 'unsafe-none' | 'same-origin-allow-popups' | 'same-origin';\r\n  crossOriginResourcePolicy?: 'same-site' | 'same-origin' | 'cross-origin';\r\n}\r\n\r\n/**\r\n * Security Headers Manager\r\n */\r\nexport class SecurityHeadersManager {\r\n  private config: SecurityHeadersConfig;\r\n  private isDevelopment: boolean;\r\n\r\n  constructor(config: SecurityHeadersConfig = {}, isDevelopment = false) {\r\n    this.config = config;\r\n    this.isDevelopment = isDevelopment;\r\n  }\r\n\r\n  /**\r\n   * Generate all security headers\r\n   */\r\n  generateHeaders(): Record<string, string> {\r\n    const headers: Record<string, string> = {};\r\n\r\n    // Content Security Policy\r\n    if (this.config.csp) {\r\n      const csp = new CSPBuilder(this.config.csp);\r\n      headers['Content-Security-Policy'] = csp.build();\r\n    } else {\r\n      // Default CSP based on environment\r\n      const defaultCSP = this.isDevelopment \r\n        ? CSPBuilder.development() \r\n        : CSPBuilder.strict();\r\n      headers['Content-Security-Policy'] = defaultCSP.build();\r\n    }\r\n\r\n    // HTTP Strict Transport Security\r\n    if (this.config.hsts !== false && !this.isDevelopment) {\r\n      const hsts = this.config.hsts || {};\r\n      const maxAge = hsts.maxAge || 31536000; // 1 year\r\n      let hstsValue = `max-age=${maxAge}`;\r\n      \r\n      if (hsts.includeSubDomains !== false) {\r\n        hstsValue += '; includeSubDomains';\r\n      }\r\n      \r\n      if (hsts.preload) {\r\n        hstsValue += '; preload';\r\n      }\r\n      \r\n      headers['Strict-Transport-Security'] = hstsValue;\r\n    }\r\n\r\n    // X-Frame-Options\r\n    headers['X-Frame-Options'] = this.config.frameOptions || 'DENY';\r\n\r\n    // X-Content-Type-Options\r\n    if (this.config.contentTypeOptions !== false) {\r\n      headers['X-Content-Type-Options'] = 'nosniff';\r\n    }\r\n\r\n    // X-XSS-Protection (legacy, but still useful for older browsers)\r\n    if (this.config.xssProtection !== false) {\r\n      headers['X-XSS-Protection'] = '1; mode=block';\r\n    }\r\n\r\n    // Referrer Policy\r\n    headers['Referrer-Policy'] = this.config.referrerPolicy || 'strict-origin-when-cross-origin';\r\n\r\n    // Permissions Policy\r\n    if (this.config.permissionsPolicy) {\r\n      const policies = Object.entries(this.config.permissionsPolicy)\r\n        .map(([feature, allowlist]) => `${feature}=(${allowlist.join(' ')})`)\r\n        .join(', ');\r\n      headers['Permissions-Policy'] = policies;\r\n    } else {\r\n      // Default restrictive permissions\r\n      headers['Permissions-Policy'] = [\r\n        'camera=()',\r\n        'microphone=()',\r\n        'geolocation=()',\r\n        'payment=()',\r\n        'usb=()',\r\n        'magnetometer=()',\r\n        'accelerometer=()',\r\n        'gyroscope=()',\r\n      ].join(', ');\r\n    }\r\n\r\n    // Cross-Origin policies\r\n    headers['Cross-Origin-Embedder-Policy'] = this.config.crossOriginEmbedderPolicy || 'unsafe-none';\r\n    headers['Cross-Origin-Opener-Policy'] = this.config.crossOriginOpenerPolicy || 'same-origin-allow-popups';\r\n    headers['Cross-Origin-Resource-Policy'] = this.config.crossOriginResourcePolicy || 'same-origin';\r\n\r\n    return headers;\r\n  }\r\n\r\n  /**\r\n   * Apply headers to Express response\r\n   */\r\n  applyToResponse(res: any): void {\r\n    const headers = this.generateHeaders();\r\n    Object.entries(headers).forEach(([name, value]) => {\r\n      res.setHeader(name, value);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get headers for Fetch API\r\n   */\r\n  getFetchHeaders(): Headers {\r\n    const headers = new Headers();\r\n    const securityHeaders = this.generateHeaders();\r\n    \r\n    Object.entries(securityHeaders).forEach(([name, value]) => {\r\n      headers.set(name, value);\r\n    });\r\n\r\n    return headers;\r\n  }\r\n\r\n  /**\r\n   * Validate CSP against common mistakes\r\n   */\r\n  validateCSP(): { isValid: boolean; warnings: string[]; errors: string[] } {\r\n    const warnings: string[] = [];\r\n    const errors: string[] = [];\r\n    const csp = this.config.csp || {};\r\n\r\n    // Check for unsafe directives\r\n    Object.entries(csp).forEach(([directive, values]) => {\r\n      if (Array.isArray(values)) {\r\n        if (values.includes(\"'unsafe-inline'\")) {\r\n          warnings.push(`${directive} allows 'unsafe-inline' which can enable XSS attacks`);\r\n        }\r\n        \r\n        if (values.includes(\"'unsafe-eval'\")) {\r\n          warnings.push(`${directive} allows 'unsafe-eval' which can enable code injection`);\r\n        }\r\n        \r\n        if (values.includes('*')) {\r\n          warnings.push(`${directive} allows wildcard (*) which is overly permissive`);\r\n        }\r\n      }\r\n    });\r\n\r\n    // Check for missing important directives\r\n    if (!csp['default-src'] && !csp['script-src']) {\r\n      errors.push('Missing script-src directive - scripts can be loaded from anywhere');\r\n    }\r\n\r\n    if (!csp['object-src']) {\r\n      warnings.push('Consider setting object-src to prevent plugin injection');\r\n    }\r\n\r\n    if (!csp['base-uri']) {\r\n      warnings.push('Consider setting base-uri to prevent base tag injection');\r\n    }\r\n\r\n    return {\r\n      isValid: errors.length === 0,\r\n      warnings,\r\n      errors,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create security headers for different environments\r\n   */\r\n  static forEnvironment(env: 'development' | 'staging' | 'production', customConfig: SecurityHeadersConfig = {}): SecurityHeadersManager {\r\n    const baseConfigs: Record<string, SecurityHeadersConfig> = {\r\n      development: {\r\n        csp: CSPBuilder.development().directives,\r\n        hsts: false,\r\n        frameOptions: 'SAMEORIGIN',\r\n      },\r\n      staging: {\r\n        csp: CSPBuilder.strict().addToDirective('script-src', ['staging.example.com']).directives,\r\n        frameOptions: 'DENY',\r\n      },\r\n      production: {\r\n        csp: CSPBuilder.strict().directives,\r\n        hsts: {\r\n          maxAge: 31536000,\r\n          includeSubDomains: true,\r\n          preload: true,\r\n        },\r\n        frameOptions: 'DENY',\r\n      },\r\n    };\r\n\r\n    const config = { ...baseConfigs[env], ...customConfig };\r\n    return new SecurityHeadersManager(config, env === 'development');\r\n  }\r\n}\r\n\r\n/**\r\n * CORS configuration\r\n */\r\nexport interface CORSConfig {\r\n  origin?: string | string[] | boolean | ((origin: string | undefined) => boolean);\r\n  methods?: string[];\r\n  allowedHeaders?: string[];\r\n  exposedHeaders?: string[];\r\n  credentials?: boolean;\r\n  maxAge?: number;\r\n  preflightContinue?: boolean;\r\n  optionsSuccessStatus?: number;\r\n}\r\n\r\n/**\r\n * CORS manager for secure cross-origin requests\r\n */\r\nexport class CORSManager {\r\n  private config: CORSConfig;\r\n\r\n  constructor(config: CORSConfig = {}) {\r\n    this.config = {\r\n      origin: false,\r\n      methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\r\n      allowedHeaders: ['Content-Type', 'Authorization'],\r\n      exposedHeaders: [],\r\n      credentials: false,\r\n      maxAge: 86400, // 24 hours\r\n      optionsSuccessStatus: 204,\r\n      ...config,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Check if origin is allowed\r\n   */\r\n  isOriginAllowed(origin: string | undefined): boolean {\r\n    if (!origin) return true; // Same-origin requests\r\n\r\n    if (typeof this.config.origin === 'boolean') {\r\n      return this.config.origin;\r\n    }\r\n\r\n    if (typeof this.config.origin === 'string') {\r\n      return this.config.origin === origin;\r\n    }\r\n\r\n    if (Array.isArray(this.config.origin)) {\r\n      return this.config.origin.includes(origin);\r\n    }\r\n\r\n    if (typeof this.config.origin === 'function') {\r\n      return this.config.origin(origin);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Generate CORS headers\r\n   */\r\n  generateHeaders(origin?: string): Record<string, string> {\r\n    const headers: Record<string, string> = {};\r\n\r\n    // Access-Control-Allow-Origin\r\n    if (this.isOriginAllowed(origin)) {\r\n      if (this.config.credentials) {\r\n        headers['Access-Control-Allow-Origin'] = origin || '*';\r\n      } else {\r\n        headers['Access-Control-Allow-Origin'] = '*';\r\n      }\r\n    }\r\n\r\n    // Access-Control-Allow-Methods\r\n    if (this.config.methods && this.config.methods.length > 0) {\r\n      headers['Access-Control-Allow-Methods'] = this.config.methods.join(', ');\r\n    }\r\n\r\n    // Access-Control-Allow-Headers\r\n    if (this.config.allowedHeaders && this.config.allowedHeaders.length > 0) {\r\n      headers['Access-Control-Allow-Headers'] = this.config.allowedHeaders.join(', ');\r\n    }\r\n\r\n    // Access-Control-Expose-Headers\r\n    if (this.config.exposedHeaders && this.config.exposedHeaders.length > 0) {\r\n      headers['Access-Control-Expose-Headers'] = this.config.exposedHeaders.join(', ');\r\n    }\r\n\r\n    // Access-Control-Allow-Credentials\r\n    if (this.config.credentials) {\r\n      headers['Access-Control-Allow-Credentials'] = 'true';\r\n    }\r\n\r\n    // Access-Control-Max-Age\r\n    if (this.config.maxAge !== undefined) {\r\n      headers['Access-Control-Max-Age'] = this.config.maxAge.toString();\r\n    }\r\n\r\n    return headers;\r\n  }\r\n\r\n  /**\r\n   * Create secure CORS configuration\r\n   */\r\n  static secure(allowedOrigins: string[]): CORSManager {\r\n    return new CORSManager({\r\n      origin: allowedOrigins,\r\n      methods: ['GET', 'POST', 'PUT', 'DELETE'],\r\n      allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],\r\n      credentials: true,\r\n      maxAge: 86400,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create development CORS configuration\r\n   */\r\n  static development(): CORSManager {\r\n    return new CORSManager({\r\n      origin: true,\r\n      methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'],\r\n      allowedHeaders: ['*'],\r\n      credentials: true,\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Default security headers manager instance\r\n */\r\nexport const defaultSecurityHeaders = SecurityHeadersManager.forEnvironment(\r\n  process.env.NODE_ENV === 'production' ? 'production' : 'development'\r\n);\r\n\r\n/**\r\n * Default CORS manager instance\r\n */\r\nexport const defaultCORS = process.env.NODE_ENV === 'production' \r\n  ? CORSManager.secure([])\r\n  : CORSManager.development();\r\n","/**\r\n * HEYS Penetration Testing Framework\r\n * Automated security testing and vulnerability assessment\r\n * \r\n * @author HEYS Team\r\n * @version 1.4.0\r\n * @created 2025-01-31\r\n */\r\n\r\nimport { defaultValidator } from '../security';\r\n\r\n/**\r\n * Vulnerability scanner interface\r\n */\r\nexport interface VulnerabilityScanner {\r\n  name: string;\r\n  description: string;\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n  scan(target: any): Promise<VulnerabilityResult[]>;\r\n}\r\n\r\n/**\r\n * Vulnerability result\r\n */\r\nexport interface VulnerabilityResult {\r\n  id: string;\r\n  scanner: string;\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n  title: string;\r\n  description: string;\r\n  location?: string;\r\n  evidence?: any;\r\n  remediation?: string;\r\n  cve?: string;\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Penetration test report\r\n */\r\nexport interface PenetrationTestReport {\r\n  id: string;\r\n  targetName: string;\r\n  startTime: Date;\r\n  endTime: Date;\r\n  vulnerabilities: VulnerabilityResult[];\r\n  summary: {\r\n    totalVulnerabilities: number;\r\n    criticalCount: number;\r\n    highCount: number;\r\n    mediumCount: number;\r\n    lowCount: number;\r\n  };\r\n  recommendations: string[];\r\n}\r\n\r\n/**\r\n * XSS vulnerability scanner\r\n */\r\nexport class XSSScanner implements VulnerabilityScanner {\r\n  name = 'XSS Scanner';\r\n  description = 'Cross-Site Scripting vulnerability detection';\r\n  severity = 'high' as const;\r\n\r\n  private readonly xssPayloads = [\r\n    '<script>alert(\"XSS\")</script>',\r\n    '\"><script>alert(\"XSS\")</script>',\r\n    '<img src=x onerror=alert(\"XSS\")>',\r\n    'javascript:alert(\"XSS\")',\r\n    '<svg onload=alert(\"XSS\")>',\r\n    '\\\"><script>alert(\"XSS\")</script>',\r\n    '<script>console.log(\"XSS\")</script>',\r\n    '<iframe src=\"javascript:alert(\\'XSS\\')\"></iframe>',\r\n  ];\r\n\r\n  async scan(target: { [key: string]: any }): Promise<VulnerabilityResult[]> {\r\n    const vulnerabilities: VulnerabilityResult[] = [];\r\n\r\n    for (const [key, value] of Object.entries(target)) {\r\n      if (typeof value === 'string') {\r\n        for (const payload of this.xssPayloads) {\r\n          // Test if the payload would be executed\r\n          const testValue = value + payload;\r\n          const validation = defaultValidator.validateInput(testValue, 'html', { sanitize: true });\r\n          \r\n          // If the payload survives sanitization, it's a vulnerability\r\n          const sanitized = validation.sanitized as string;\r\n          if (sanitized && (sanitized.includes('script') || sanitized.includes('javascript:'))) {\r\n            vulnerabilities.push({\r\n              id: this.generateId(),\r\n              scanner: this.name,\r\n              severity: this.severity,\r\n              title: 'Cross-Site Scripting (XSS) Vulnerability',\r\n              description: `Field \"${key}\" is vulnerable to XSS attacks`,\r\n              location: key,\r\n              evidence: { payload, original: value, sanitized: validation.sanitized },\r\n              remediation: 'Implement proper input validation and output encoding',\r\n              timestamp: new Date(),\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return vulnerabilities;\r\n  }\r\n\r\n  private generateId(): string {\r\n    return `xss-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n}\r\n\r\n/**\r\n * SQL Injection scanner\r\n */\r\nexport class SQLInjectionScanner implements VulnerabilityScanner {\r\n  name = 'SQL Injection Scanner';\r\n  description = 'SQL Injection vulnerability detection';\r\n  severity = 'critical' as const;\r\n\r\n  private readonly sqlPayloads = [\r\n    \"' OR '1'='1\",\r\n    \"'; DROP TABLE users; --\",\r\n    \"1' OR '1'='1\",\r\n    \"admin'--\",\r\n    \"admin'/*\",\r\n    \"' OR 1=1--\",\r\n    \"' UNION SELECT * FROM users--\",\r\n    \"1; UPDATE users SET password='hacked'--\",\r\n  ];\r\n\r\n  async scan(target: { [key: string]: any }): Promise<VulnerabilityResult[]> {\r\n    const vulnerabilities: VulnerabilityResult[] = [];\r\n\r\n    for (const [key, value] of Object.entries(target)) {\r\n      if (typeof value === 'string') {\r\n        for (const payload of this.sqlPayloads) {\r\n          // Check if SQL injection patterns are detected\r\n          if (this.detectSQLInjection(value + payload)) {\r\n            vulnerabilities.push({\r\n              id: this.generateId(),\r\n              scanner: this.name,\r\n              severity: this.severity,\r\n              title: 'SQL Injection Vulnerability',\r\n              description: `Field \"${key}\" may be vulnerable to SQL injection`,\r\n              location: key,\r\n              evidence: { payload, original: value },\r\n              remediation: 'Use parameterized queries and input validation',\r\n              cve: 'CWE-89',\r\n              timestamp: new Date(),\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return vulnerabilities;\r\n  }\r\n\r\n  private detectSQLInjection(input: string): boolean {\r\n    const sqlPatterns = [\r\n      /(\\bOR\\b|\\bAND\\b).*?=.*?(\\b1\\b|\\b'1'\\b)/i,\r\n      /(\\bUNION\\b|\\bSELECT\\b|\\bINSERT\\b|\\bUPDATE\\b|\\bDELETE\\b|\\bDROP\\b)/i,\r\n      /('|\\\").*?(\\bOR\\b|\\bAND\\b).*?('|\\\")/i,\r\n      /--|\\#|\\/\\*/,\r\n    ];\r\n\r\n    return sqlPatterns.some(pattern => pattern.test(input));\r\n  }\r\n\r\n  private generateId(): string {\r\n    return `sqli-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n}\r\n\r\n/**\r\n * Input validation scanner\r\n */\r\nexport class InputValidationScanner implements VulnerabilityScanner {\r\n  name = 'Input Validation Scanner';\r\n  description = 'Input validation and sanitization testing';\r\n  severity = 'medium' as const;\r\n\r\n  async scan(target: { [key: string]: any }): Promise<VulnerabilityResult[]> {\r\n    const vulnerabilities: VulnerabilityResult[] = [];\r\n\r\n    for (const [key, _value] of Object.entries(target)) {\r\n      // Test various validation scenarios\r\n      const testCases = [\r\n        { name: 'Long input', value: 'A'.repeat(10000) },\r\n        { name: 'Special characters', value: '!@#$%^&*()_+{}|:\"<>?[]\\\\;\\',./' },\r\n        { name: 'Unicode characters', value: '🚀🎉💻🔥⚡' },\r\n        { name: 'Null bytes', value: 'test\\x00test' },\r\n        { name: 'HTML entities', value: '&lt;script&gt;alert(&quot;test&quot;)&lt;/script&gt;' },\r\n      ];\r\n\r\n      for (const testCase of testCases) {\r\n        try {\r\n          // Try to validate the test input\r\n          const validation = defaultValidator.validateInput(testCase.value, 'text', { \r\n            sanitize: true, \r\n            required: false \r\n          });\r\n\r\n          // Check if validation is properly handling edge cases\r\n          if (!validation.isValid && !validation.errors?.length) {\r\n            vulnerabilities.push({\r\n              id: this.generateId(),\r\n              scanner: this.name,\r\n              severity: this.severity,\r\n              title: 'Insufficient Input Validation',\r\n              description: `Field \"${key}\" may not properly validate ${testCase.name}`,\r\n              location: key,\r\n              evidence: { testCase: testCase.name, input: testCase.value },\r\n              remediation: 'Implement comprehensive input validation',\r\n              timestamp: new Date(),\r\n            });\r\n          }\r\n        } catch (error) {\r\n          vulnerabilities.push({\r\n            id: this.generateId(),\r\n            scanner: this.name,\r\n            severity: 'high',\r\n            title: 'Input Validation Error',\r\n            description: `Field \"${key}\" causes validation errors with ${testCase.name}`,\r\n            location: key,\r\n            evidence: { testCase: testCase.name, error: (error as Error).message },\r\n            remediation: 'Fix input validation error handling',\r\n            timestamp: new Date(),\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    return vulnerabilities;\r\n  }\r\n\r\n  private generateId(): string {\r\n    return `input-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n}\r\n\r\n/**\r\n * Authentication bypass scanner\r\n */\r\nexport class AuthBypassScanner implements VulnerabilityScanner {\r\n  name = 'Authentication Bypass Scanner';\r\n  description = 'Authentication and authorization vulnerability testing';\r\n  severity = 'critical' as const;\r\n\r\n  async scan(target: { [key: string]: any }): Promise<VulnerabilityResult[]> {\r\n    const vulnerabilities: VulnerabilityResult[] = [];\r\n\r\n    // Check for common authentication bypass patterns\r\n    const authFields = ['password', 'token', 'auth', 'authorization', 'session'];\r\n    const bypassAttempts = [\r\n      '',\r\n      null,\r\n      undefined,\r\n      'admin',\r\n      'password',\r\n      '123456',\r\n      'null',\r\n      'false',\r\n      '0',\r\n      '[]',\r\n      '{}',\r\n    ];\r\n\r\n    for (const field of authFields) {\r\n      if (target.hasOwnProperty(field)) {\r\n        for (const attempt of bypassAttempts) {\r\n          // Simulate bypass attempt (removed unused variable)\r\n          \r\n          vulnerabilities.push({\r\n            id: this.generateId(),\r\n            scanner: this.name,\r\n            severity: this.severity,\r\n            title: 'Potential Authentication Bypass',\r\n            description: `Authentication field \"${field}\" should be tested against bypass attempts`,\r\n            location: field,\r\n            evidence: { field, bypassAttempt: attempt },\r\n            remediation: 'Implement secure authentication validation and proper session management',\r\n            cve: 'CWE-287',\r\n            timestamp: new Date(),\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    return vulnerabilities;\r\n  }\r\n\r\n  private generateId(): string {\r\n    return `auth-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n}\r\n\r\n/**\r\n * Main penetration testing framework\r\n */\r\nexport class PenetrationTestFramework {\r\n  private scanners: VulnerabilityScanner[] = [];\r\n\r\n  constructor() {\r\n    // Register default scanners\r\n    this.registerScanner(new XSSScanner());\r\n    this.registerScanner(new SQLInjectionScanner());\r\n    this.registerScanner(new InputValidationScanner());\r\n    this.registerScanner(new AuthBypassScanner());\r\n  }\r\n\r\n  /**\r\n   * Register a new vulnerability scanner\r\n   */\r\n  registerScanner(scanner: VulnerabilityScanner): void {\r\n    this.scanners.push(scanner);\r\n  }\r\n\r\n  /**\r\n   * Run comprehensive penetration test\r\n   */\r\n  async runPenetrationTest(\r\n    targetName: string,\r\n    target: any,\r\n    options: {\r\n      includeScanners?: string[];\r\n      excludeScanners?: string[];\r\n      severity?: ('low' | 'medium' | 'high' | 'critical')[];\r\n    } = {}\r\n  ): Promise<PenetrationTestReport> {\r\n    const startTime = new Date();\r\n    let allVulnerabilities: VulnerabilityResult[] = [];\r\n\r\n    // Filter scanners based on options\r\n    let scannersToRun = this.scanners;\r\n    \r\n    if (options.includeScanners) {\r\n      scannersToRun = scannersToRun.filter(s => options.includeScanners!.includes(s.name));\r\n    }\r\n    \r\n    if (options.excludeScanners) {\r\n      scannersToRun = scannersToRun.filter(s => !options.excludeScanners!.includes(s.name));\r\n    }\r\n\r\n    if (options.severity) {\r\n      scannersToRun = scannersToRun.filter(s => options.severity!.includes(s.severity));\r\n    }\r\n\r\n    // Run all scanners\r\n    for (const scanner of scannersToRun) {\r\n      try {\r\n        console.log(`Running ${scanner.name}...`);\r\n        const vulnerabilities = await scanner.scan(target);\r\n        allVulnerabilities = allVulnerabilities.concat(vulnerabilities);\r\n      } catch (error) {\r\n        console.error(`Scanner ${scanner.name} failed:`, error);\r\n      }\r\n    }\r\n\r\n    const endTime = new Date();\r\n\r\n    // Generate summary\r\n    const summary = {\r\n      totalVulnerabilities: allVulnerabilities.length,\r\n      criticalCount: allVulnerabilities.filter(v => v.severity === 'critical').length,\r\n      highCount: allVulnerabilities.filter(v => v.severity === 'high').length,\r\n      mediumCount: allVulnerabilities.filter(v => v.severity === 'medium').length,\r\n      lowCount: allVulnerabilities.filter(v => v.severity === 'low').length,\r\n    };\r\n\r\n    // Generate recommendations\r\n    const recommendations = this.generateRecommendations(allVulnerabilities);\r\n\r\n    return {\r\n      id: `pentest-${Date.now()}`,\r\n      targetName,\r\n      startTime,\r\n      endTime,\r\n      vulnerabilities: allVulnerabilities,\r\n      summary,\r\n      recommendations,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate security recommendations based on vulnerabilities\r\n   */\r\n  private generateRecommendations(vulnerabilities: VulnerabilityResult[]): string[] {\r\n    const recommendations = new Set<string>();\r\n\r\n    vulnerabilities.forEach(vuln => {\r\n      if (vuln.remediation) {\r\n        recommendations.add(vuln.remediation);\r\n      }\r\n\r\n      // Add general recommendations based on vulnerability type\r\n      if (vuln.scanner.includes('XSS')) {\r\n        recommendations.add('Implement Content Security Policy (CSP) headers');\r\n        recommendations.add('Use secure templating engines with auto-escaping');\r\n      }\r\n\r\n      if (vuln.scanner.includes('SQL')) {\r\n        recommendations.add('Use parameterized queries or ORM');\r\n        recommendations.add('Implement principle of least privilege for database access');\r\n      }\r\n\r\n      if (vuln.scanner.includes('Auth')) {\r\n        recommendations.add('Implement multi-factor authentication');\r\n        recommendations.add('Use secure session management');\r\n        recommendations.add('Implement account lockout mechanisms');\r\n      }\r\n    });\r\n\r\n    // Add general security recommendations\r\n    if (vulnerabilities.length > 0) {\r\n      recommendations.add('Conduct regular security audits');\r\n      recommendations.add('Implement security monitoring and logging');\r\n      recommendations.add('Keep all dependencies updated');\r\n      recommendations.add('Provide security training for development team');\r\n    }\r\n\r\n    return Array.from(recommendations);\r\n  }\r\n\r\n  /**\r\n   * Export test report to JSON\r\n   */\r\n  exportReport(report: PenetrationTestReport): string {\r\n    return JSON.stringify(report, null, 2);\r\n  }\r\n\r\n  /**\r\n   * Generate HTML report\r\n   */\r\n  generateHtmlReport(report: PenetrationTestReport): string {\r\n    const severityColors = {\r\n      critical: '#dc3545',\r\n      high: '#fd7e14',\r\n      medium: '#ffc107',\r\n      low: '#198754'\r\n    };\r\n\r\n    return `\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Penetration Test Report - ${report.targetName}</title>\r\n    <style>\r\n        body { font-family: Arial, sans-serif; margin: 40px; }\r\n        .header { background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 30px; }\r\n        .summary { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }\r\n        .summary-card { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }\r\n        .vulnerability { background: white; padding: 20px; margin-bottom: 20px; border-left: 4px solid #ddd; border-radius: 4px; }\r\n        .critical { border-left-color: ${severityColors.critical}; }\r\n        .high { border-left-color: ${severityColors.high}; }\r\n        .medium { border-left-color: ${severityColors.medium}; }\r\n        .low { border-left-color: ${severityColors.low}; }\r\n        .recommendations { background: #e7f3ff; padding: 20px; border-radius: 8px; margin-top: 30px; }\r\n        .severity-badge { padding: 4px 8px; color: white; border-radius: 4px; font-size: 12px; }\r\n        code { background: #f1f3f4; padding: 2px 4px; border-radius: 3px; }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"header\">\r\n        <h1>Penetration Test Report</h1>\r\n        <p><strong>Target:</strong> ${report.targetName}</p>\r\n        <p><strong>Test Period:</strong> ${report.startTime.toISOString()} - ${report.endTime.toISOString()}</p>\r\n        <p><strong>Duration:</strong> ${Math.round((report.endTime.getTime() - report.startTime.getTime()) / 1000)} seconds</p>\r\n    </div>\r\n\r\n    <div class=\"summary\">\r\n        <div class=\"summary-card\">\r\n            <h3>Total Vulnerabilities</h3>\r\n            <h2>${report.summary.totalVulnerabilities}</h2>\r\n        </div>\r\n        <div class=\"summary-card\">\r\n            <h3>Critical</h3>\r\n            <h2 style=\"color: ${severityColors.critical}\">${report.summary.criticalCount}</h2>\r\n        </div>\r\n        <div class=\"summary-card\">\r\n            <h3>High</h3>\r\n            <h2 style=\"color: ${severityColors.high}\">${report.summary.highCount}</h2>\r\n        </div>\r\n        <div class=\"summary-card\">\r\n            <h3>Medium</h3>\r\n            <h2 style=\"color: ${severityColors.medium}\">${report.summary.mediumCount}</h2>\r\n        </div>\r\n        <div class=\"summary-card\">\r\n            <h3>Low</h3>\r\n            <h2 style=\"color: ${severityColors.low}\">${report.summary.lowCount}</h2>\r\n        </div>\r\n    </div>\r\n\r\n    <h2>Vulnerabilities</h2>\r\n    ${report.vulnerabilities.map(vuln => `\r\n        <div class=\"vulnerability ${vuln.severity}\">\r\n            <h3>${vuln.title}</h3>\r\n            <span class=\"severity-badge\" style=\"background-color: ${severityColors[vuln.severity]}\">${vuln.severity.toUpperCase()}</span>\r\n            <p><strong>Scanner:</strong> ${vuln.scanner}</p>\r\n            <p><strong>Location:</strong> ${vuln.location || 'N/A'}</p>\r\n            <p><strong>Description:</strong> ${vuln.description}</p>\r\n            ${vuln.remediation ? `<p><strong>Remediation:</strong> ${vuln.remediation}</p>` : ''}\r\n            ${vuln.evidence ? `<p><strong>Evidence:</strong> <code>${JSON.stringify(vuln.evidence, null, 2)}</code></p>` : ''}\r\n            ${vuln.cve ? `<p><strong>CVE:</strong> ${vuln.cve}</p>` : ''}\r\n            <p><strong>Timestamp:</strong> ${vuln.timestamp.toISOString()}</p>\r\n        </div>\r\n    `).join('')}\r\n\r\n    <div class=\"recommendations\">\r\n        <h2>Recommendations</h2>\r\n        <ul>\r\n            ${report.recommendations.map(rec => `<li>${rec}</li>`).join('')}\r\n        </ul>\r\n    </div>\r\n</body>\r\n</html>\r\n    `;\r\n  }\r\n}\r\n\r\n/**\r\n * Default penetration testing framework instance\r\n */\r\nexport const defaultPentestFramework = new PenetrationTestFramework();\r\n","// Export all shared utilities, types, and components\nexport * from './monitoring';\nexport * from './security';\n\n// Shared utilities\nexport const formatDate = (date: Date) => date.toISOString().split('T')[0];\nexport const generateId = () => crypto.randomUUID();\n"]}