// filepath: packages/shared/src/performance/TreeShaker.ts

/**
 * TreeShaker - –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ tree shaking
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–æ–¥ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */

import * as fs from 'fs';
import * as path from 'path';

export interface UnusedExport {
  file: string;
  exportName: string;
  line: number;
  size: number;
  type: 'function' | 'class' | 'variable' | 'constant' | 'type' | 'interface';
}

export interface TreeShakingAnalysis {
  totalFiles: number;
  analyzedFiles: number;
  unusedExports: UnusedExport[];
  potentialSavings: number;
  recommendations: string[];
  bundlerOptimizations: string[];
}

export interface TreeShakingConfig {
  include: string[];
  exclude: string[];
  bundler: 'vite' | 'webpack' | 'rollup' | 'esbuild';
  aggressive: boolean;
  preserveTypes: boolean;
}

export class TreeShaker {
  private config: TreeShakingConfig;
  private analysis: TreeShakingAnalysis | null = null;

  constructor(config: Partial<TreeShakingConfig> = {}) {
    this.config = {
      include: ['src/**/*.{ts,tsx,js,jsx}'],
      exclude: ['**/*.test.{ts,tsx,js,jsx}', '**/*.spec.{ts,tsx,js,jsx}', '**/node_modules/**'],
      bundler: 'vite',
      aggressive: false,
      preserveTypes: true,
      ...config
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç tree shaking –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
   */
  async analyzeProject(rootPath: string): Promise<TreeShakingAnalysis> {
    console.log('üå≤ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ tree shaking...');

    const files = await this.findSourceFiles(rootPath);
    const unusedExports: UnusedExport[] = [];
    let potentialSavings = 0;

    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);

    for (const file of files) {
      try {
        const unused = await this.analyzeFile(file, files);
        unusedExports.push(...unused);
        
        // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∏
        unused.forEach(exp => {
          potentialSavings += exp.size;
        });
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª ${file}:`, error);
      }
    }

    const recommendations = this.generateRecommendations(unusedExports);
    const bundlerOptimizations = this.getBundlerOptimizations();

    this.analysis = {
      totalFiles: files.length,
      analyzedFiles: files.length,
      unusedExports,
      potentialSavings,
      recommendations,
      bundlerOptimizations
    };

    console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ ${unusedExports.length} –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤`);
    return this.analysis;
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   */
  private async findSourceFiles(rootPath: string): Promise<string[]> {
    const files: string[] = [];
    
    const searchPaths = this.config.include.map(pattern => {
      // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ glob –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
      const basePath = pattern.replace(/\/\*\*\/\*\.\{.*\}$/, '');
      return path.join(rootPath, basePath);
    });

    for (const searchPath of searchPaths) {
      if (fs.existsSync(searchPath)) {
        await this.walkDirectory(searchPath, files);
      }
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    return files.filter(file => {
      return !this.config.exclude.some(excludePattern => {
        return file.includes(excludePattern.replace(/\*\*/g, ''));
      });
    });
  }

  /**
   * –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
   */
  private async walkDirectory(dirPath: string, files: string[]): Promise<void> {
    const entries = fs.readdirSync(dirPath, { withFileTypes: true });

    for (const entry of entries) {
      const fullPath = path.join(dirPath, entry.name);

      if (entry.isDirectory()) {
        await this.walkDirectory(fullPath, files);
      } else if (entry.isFile() && this.isSourceFile(entry.name)) {
        files.push(fullPath);
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º
   */
  private isSourceFile(fileName: string): boolean {
    const extensions = ['.ts', '.tsx', '.js', '.jsx'];
    return extensions.some(ext => fileName.endsWith(ext));
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
   */
  private async analyzeFile(filePath: string, allFiles: string[]): Promise<UnusedExport[]> {
    const content = fs.readFileSync(filePath, 'utf8');
    const exports = this.extractExports(content, filePath);
    const unusedExports: UnusedExport[] = [];

    for (const exportItem of exports) {
      const isUsed = await this.isExportUsed(exportItem, filePath, allFiles);
      
      if (!isUsed) {
        unusedExports.push(exportItem);
      }
    }

    return unusedExports;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
   */
  private extractExports(content: string, filePath: string): UnusedExport[] {
    const exports: UnusedExport[] = [];
    const lines = content.split('\n');

    lines.forEach((line, index) => {
      // –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
      const patterns = [
        /export\s+(?:const|let|var)\s+(\w+)/g,           // export const name
        /export\s+function\s+(\w+)/g,                    // export function name
        /export\s+class\s+(\w+)/g,                       // export class name
        /export\s+interface\s+(\w+)/g,                   // export interface name
        /export\s+type\s+(\w+)/g,                        // export type name
        /export\s+enum\s+(\w+)/g,                        // export enum name
        /export\s*{\s*([^}]+)\s*}/g,                     // export { name1, name2 }
      ];

      patterns.forEach(pattern => {
        let match;
        while ((match = pattern.exec(line)) !== null) {
          const exportName = match[1];
          
          if (!exportName) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
          
          // –î–ª—è export { } –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
          if (pattern.source.includes('{')) {
            const namedExports = exportName.split(',').map(n => n.trim());
            namedExports.forEach(name => {
              if (name && !name.includes('as')) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
                exports.push({
                  file: filePath,
                  exportName: name,
                  line: index + 1,
                  size: this.estimateExportSize(line),
                  type: this.detectExportType(line, name)
                });
              }
            });
          } else {
            exports.push({
              file: filePath,
              exportName,
              line: index + 1,
              size: this.estimateExportSize(line),
              type: this.detectExportType(line, exportName)
            });
          }
        }
      });
    });

    return exports;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —ç–∫—Å–ø–æ—Ä—Ç –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
   */
  private async isExportUsed(exportItem: UnusedExport, sourceFile: string, allFiles: string[]): Promise<boolean> {
    // –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º —Ñ–∞–π–ª –∏–∑ –ø–æ–∏—Å–∫–∞
    const otherFiles = allFiles.filter(file => file !== sourceFile);

    for (const file of otherFiles) {
      try {
        const content = fs.readFileSync(file, 'utf8');
        
        // –ò—â–µ–º –∏–º–ø–æ—Ä—Ç—ã —ç—Ç–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
        const importPatterns = [
          new RegExp(`import\\s+\\{[^}]*\\b${exportItem.exportName}\\b[^}]*\\}`, 'g'),
          new RegExp(`import\\s+${exportItem.exportName}\\b`, 'g'),
          new RegExp(`import\\s*\\*\\s+as\\s+\\w+\\s+from\\s+['"][^'"]*${path.basename(sourceFile, path.extname(sourceFile))}['"]`, 'g'),
        ];

        // –¢–∞–∫–∂–µ –∏—â–µ–º –ø—Ä—è–º—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤)
        const usagePatterns = [
          new RegExp(`\\b${exportItem.exportName}\\b`, 'g'),
        ];

        const isImported = importPatterns.some(pattern => pattern.test(content));
        const isUsed = usagePatterns.some(pattern => {
          const matches = content.match(pattern);
          return matches && matches.length > 1; // –ë–æ–ª—å—à–µ 1, —Ç–∞–∫ –∫–∞–∫ –æ–¥–∏–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º
        });

        if (isImported || isUsed) {
          return true;
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        continue;
      }
    }

    return false;
  }

  /**
   * –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
   */
  private estimateExportSize(line: string): number {
    // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏
    let size = line.length * 2; // –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–µ—Å–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    if (line.includes('function')) size += 100;
    if (line.includes('class')) size += 200;
    if (line.includes('interface')) size += 50;
    if (line.includes('type')) size += 30;
    if (line.includes('const')) size += 20;

    return size;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞
   */
  private detectExportType(line: string, exportName: string): UnusedExport['type'] {
    if (line.includes('function')) return 'function';
    if (line.includes('class')) return 'class';
    if (line.includes('interface')) return 'interface';
    if (line.includes('type')) return 'type';
    if (line.includes('const') || line.includes('let') || line.includes('var')) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–µ–π
      if (line.includes('=>') || line.includes('function')) return 'function';
      return exportName.toUpperCase() === exportName ? 'constant' : 'variable';
    }
    return 'variable';
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  private generateRecommendations(unusedExports: UnusedExport[]): string[] {
    const recommendations: string[] = [];

    if (unusedExports.length === 0) {
      recommendations.push('üéâ –û—Ç–ª–∏—á–Ω–æ! –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return recommendations;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ñ–∞–π–ª–∞–º
    const byFile = unusedExports.reduce((acc, exp) => {
      if (!acc[exp.file]) acc[exp.file] = [];
      acc[exp.file]!.push(exp);
      return acc;
    }, {} as Record<string, UnusedExport[]>);

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ñ–∞–π–ª–∞–º
    Object.entries(byFile).forEach(([file, exports]) => {
      const fileName = path.basename(file);
      const totalSize = exports.reduce((sum, exp) => sum + exp.size, 0);
      
      if (exports.length > 5) {
        recommendations.push(`üìÅ ${fileName}: ${exports.length} –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ (${this.formatBytes(totalSize)})`);
      } else {
        exports.forEach(exp => {
          recommendations.push(`üîπ ${fileName}:${exp.line} - —É–¥–∞–ª–∏—Ç—å '${exp.exportName}' (${exp.type})`);
        });
      }
    });

    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const totalSize = unusedExports.reduce((sum, exp) => sum + exp.size, 0);
    recommendations.push(`üíæ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è: ${this.formatBytes(totalSize)}`);

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º
    const typeGroups = unusedExports.reduce((acc, exp) => {
      if (!acc[exp.type]) acc[exp.type] = 0;
      acc[exp.type]!++;
      return acc;
    }, {} as Record<string, number>);

    Object.entries(typeGroups).forEach(([type, count]) => {
      if (count > 3) {
        recommendations.push(`üîß –ú–Ω–æ–≥–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö ${type}: ${count} - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥`);
      }
    });

    return recommendations;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ bundler
   */
  private getBundlerOptimizations(): string[] {
    const optimizations: string[] = [];

    switch (this.config.bundler) {
      case 'vite':
        optimizations.push('‚ö° Vite: –í–∫–ª—é—á–∏—Ç—å build.rollupOptions.treeshake');
        optimizations.push('üì¶ Vite: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å build.rollupOptions.external –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫');
        optimizations.push('üîß Vite: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å build.lib –¥–ª—è library mode');
        break;

      case 'webpack':
        optimizations.push('‚ö° Webpack: –í–∫–ª—é—á–∏—Ç—å optimization.usedExports');
        optimizations.push('üì¶ Webpack: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å optimization.sideEffects: false');
        optimizations.push('üîß Webpack: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å webpack-bundle-analyzer');
        break;

      case 'rollup':
        optimizations.push('‚ö° Rollup: –í–∫–ª—é—á–∏—Ç—å treeshake.unknownGlobalSideEffects: false');
        optimizations.push('üì¶ Rollup: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å external dependencies');
        optimizations.push('üîß Rollup: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @rollup/plugin-node-resolve');
        break;

      case 'esbuild':
        optimizations.push('‚ö° ESBuild: –í–∫–ª—é—á–∏—Ç—å treeShaking: true');
        optimizations.push('üì¶ ESBuild: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å external –¥–ª—è node_modules');
        optimizations.push('üîß ESBuild: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å bundle: true –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏');
        break;
    }

    return optimizations;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–∞–π—Ç—ã –≤ —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
   */
  private formatBytes(bytes: number): string {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ–± –∞–Ω–∞–ª–∏–∑–µ
   */
  generateReport(): string {
    if (!this.analysis) {
      return '–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ analyzeProject() —Å–Ω–∞—á–∞–ª–∞.';
    }

    const { totalFiles, unusedExports, potentialSavings, recommendations, bundlerOptimizations } = this.analysis;

    let report = 'üå≤ –û–¢–ß–ï–¢ TREE SHAKING –ê–ù–ê–õ–ò–ó–ê\n';
    report += '================================\n\n';

    report += `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
    report += `   –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}\n`;
    report += `   –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤: ${unusedExports.length}\n`;
    report += `   –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è: ${this.formatBytes(potentialSavings)}\n\n`;

    if (recommendations.length > 0) {
      report += `üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n`;
      recommendations.forEach(rec => {
        report += `   ${rec}\n`;
      });
      report += '\n';
    }

    if (bundlerOptimizations.length > 0) {
      report += `‚öôÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ bundler (${this.config.bundler}):\n`;
      bundlerOptimizations.forEach(opt => {
        report += `   ${opt}\n`;
      });
      report += '\n';
    }

    // –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ (–ø–µ—Ä–≤—ã–µ 10)
    if (unusedExports.length > 0) {
      report += `üìã –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã (–ø–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 10):\n`;
      unusedExports.slice(0, 10).forEach(exp => {
        const fileName = path.basename(exp.file);
        report += `   ${fileName}:${exp.line} - ${exp.exportName} (${exp.type}, ${this.formatBytes(exp.size)})\n`;
      });
      
      if (unusedExports.length > 10) {
        report += `   ... –∏ –µ—â–µ ${unusedExports.length - 10} —ç–∫—Å–ø–æ—Ä—Ç–æ–≤\n`;
      }
    }

    return report;
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
   */
  exportToJson(): string {
    if (!this.analysis) {
      throw new Error('–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω');
    }
    return JSON.stringify(this.analysis, null, 2);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∞–Ω–∞–ª–∏–∑
   */
  getAnalysis(): TreeShakingAnalysis | null {
    return this.analysis;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton instance
export const treeShaker = new TreeShaker();
