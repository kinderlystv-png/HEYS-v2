/**
 * @fileoverview Lighthouse Score Optimizer - –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è Lighthouse Score
 * 
 * @author AI Assistant
 * @version 1.0.0
 * @since 2024
 */

import { performance } from 'perf_hooks';

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Lighthouse –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */
export interface LighthouseConfig {
  /**
   * –¶–µ–ª–µ–≤–æ–π –æ–±—â–∏–π Lighthouse Score (0-100)
   */
  targetScore: number;
  
  /**
   * –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
   */
  categoryTargets: {
    performance: number;
    accessibility: number;
    bestPractices: number;
    seo: number;
    pwa?: number;
  };
  
  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  optimizations: {
    enableCriticalResourceOptimization: boolean;
    enableImageOptimization: boolean;
    enableScriptOptimization: boolean;
    enableCSSOptimization: boolean;
    enableCaching: boolean;
    enableCompression: boolean;
    enableServiceWorker: boolean;
  };
  
  /**
   * –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –º–µ—Ç—Ä–∏–∫
   */
  performanceThresholds: {
    firstContentfulPaint: number;    // ms
    largestContentfulPaint: number;  // ms
    firstInputDelay: number;         // ms
    cumulativeLayoutShift: number;   // score
    speedIndex: number;              // ms
    totalBlockingTime: number;       // ms
  };
  
  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   */
  analysis: {
    runCount: number;
    device: 'mobile' | 'desktop' | 'both';
    throttling: 'simulated3G' | 'simulated4G' | 'none';
    enableSourceMaps: boolean;
  };
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Lighthouse –∞–Ω–∞–ª–∏–∑–∞
 */
export interface LighthouseResults {
  /**
   * –û–±—â–∏–π —Å–∫–æ—Ä (0-100)
   */
  overallScore: number;
  
  /**
   * –°–∫–æ—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
   */
  categories: {
    performance: number;
    accessibility: number;
    bestPractices: number;
    seo: number;
    pwa?: number;
  };
  
  /**
   * –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  metrics: {
    firstContentfulPaint: number;
    largestContentfulPaint: number;
    firstInputDelay: number;
    cumulativeLayoutShift: number;
    speedIndex: number;
    totalBlockingTime: number;
    timeToInteractive: number;
  };
  
  /**
   * –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
   */
  opportunities: Array<{
    id: string;
    title: string;
    description: string;
    scoreDisplayMode: string;
    numericValue: number;
    displayValue: string;
    details?: any;
  }>;
  
  /**
   * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
   */
  diagnostics: Array<{
    id: string;
    title: string;
    description: string;
    scoreDisplayMode: string;
    displayValue: string;
    details?: any;
  }>;
  
  /**
   * –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
   */
  meta: {
    timestamp: number;
    url: string;
    device: string;
    userAgent: string;
    lighthouseVersion: string;
  };
}

/**
 * –ü–ª–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */
export interface OptimizationPlan {
  step: string;
  description: string;
  impact: 'high' | 'medium' | 'low';
  category: string;
  estimatedImprovement: number;
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */
export interface OptimizationResults {
  success: boolean;
  finalResults?: LighthouseResults;
  improvements?: Array<{ metric: string; improvement: number }>;
  error?: string;
  executionTime?: number;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
export interface ProgressCallback {
  step: number;
  total: number;
  task: string;
  progress: number;
}

/**
 * –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */
export interface OptimizationProgress {
  currentStep: string;
  completedSteps: string[];
  totalSteps: number;
  estimatedTimeRemaining: number;
  currentScore: number;
  targetScore: number;
  improvementsSinceStart: Array<{
    metric: string;
    beforeValue: number;
    afterValue: number;
    improvement: number;
  }>;
}

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ Lighthouse Score
 */
export class LighthouseOptimizer {
  private config: LighthouseConfig;
  private baseline?: LighthouseResults;
  private currentResults?: LighthouseResults;
  private optimizationHistory: LighthouseResults[] = [];

  constructor(config: LighthouseConfig) {
    this.config = config;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  getConfig(): LighthouseConfig {
    return this.config;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ baseline —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   */
  async setBaseline(url: string): Promise<void> {
    this.validateUrlStrict(url);
    this.baseline = await this.runLighthouseAudit(url);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ baseline —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   */
  getBaseline(): LighthouseResults | undefined {
    return this.baseline;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)
   */
  createOptimizationPlan(results?: LighthouseResults): OptimizationPlan[] {
    const baseResults = results || this.baseline;
    if (!baseResults) {
      throw new Error('–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ setBaseline()');
    }
    return this.createOptimizationPlanInternal(baseResults);
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ –ø–ª–∞–Ω—É
   */
  async executeOptimization(
    plan: OptimizationPlan[], 
    progressCallback?: (progress: ProgressCallback) => void
  ): Promise<OptimizationResults> {
    const startTime = performance.now();
    
    try {
      // –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
      for (let i = 0; i < plan.length; i++) {
        const task = plan[i];
        
        if (progressCallback && task) {
          progressCallback({
            step: i + 1,
            total: plan.length,
            task: task.description,
            progress: ((i + 1) / plan.length) * 100
          });
        }

        // –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        await new Promise(resolve => setTimeout(resolve, 100));
      }

      // –ó–∞–ø—É—Å–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      if (this.baseline) {
        const finalResults = await this.runLighthouseAudit(this.baseline.meta.url);
        this.currentResults = finalResults;
        
        const improvements = this.calculateImprovements();
        const executionTime = performance.now() - startTime;

        return {
          success: true,
          finalResults,
          improvements,
          executionTime
        };
      }

      throw new Error('–ù–µ—Ç baseline –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        executionTime: performance.now() - startTime
      };
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ Lighthouse –∞—É–¥–∏—Ç–∞
   */
  async runLighthouseAudit(url: string): Promise<LighthouseResults> {
    this.validateUrl(url);
    
    console.log(`üîç –ó–∞–ø—É—Å–∫ Lighthouse –∞—É–¥–∏—Ç–∞ –¥–ª—è ${url}...`);
    
    try {
      // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ Lighthouse
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // –ú–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ Lighthouse API)
      const mockResults: LighthouseResults = {
        overallScore: Math.floor(Math.random() * 40) + 50, // 50-89
        categories: {
          performance: Math.floor(Math.random() * 30) + 60,
          accessibility: Math.floor(Math.random() * 20) + 75,
          bestPractices: Math.floor(Math.random() * 25) + 70,
          seo: Math.floor(Math.random() * 20) + 80,
          pwa: Math.floor(Math.random() * 30) + 50
        },
        metrics: {
          firstContentfulPaint: Math.floor(Math.random() * 1000) + 1500,
          largestContentfulPaint: Math.floor(Math.random() * 2000) + 2500,
          firstInputDelay: Math.floor(Math.random() * 100) + 100,
          cumulativeLayoutShift: Math.random() * 0.2 + 0.1,
          speedIndex: Math.floor(Math.random() * 1500) + 3000,
          totalBlockingTime: Math.floor(Math.random() * 300) + 200,
          timeToInteractive: Math.floor(Math.random() * 2000) + 4000
        },
        opportunities: [
          {
            id: 'unused-css-rules',
            title: 'Remove unused CSS',
            description: '–£–¥–∞–ª–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ CSS –ø—Ä–∞–≤–∏–ª–∞',
            scoreDisplayMode: 'numeric',
            numericValue: Math.floor(Math.random() * 500) + 200,
            displayValue: '500ms',
            details: { items: [] }
          },
          {
            id: 'unused-javascript',
            title: 'Remove unused JavaScript',
            description: '–£–¥–∞–ª–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π JavaScript',
            scoreDisplayMode: 'numeric',
            numericValue: Math.floor(Math.random() * 800) + 300,
            displayValue: '800ms',
            details: { items: [] }
          }
        ],
        diagnostics: [
          {
            id: 'uses-optimized-images',
            title: 'Serve images in next-gen formats',
            description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
            scoreDisplayMode: 'binary',
            displayValue: '1.2s',
            details: { items: [] }
          }
        ],
        meta: {
          timestamp: Date.now(),
          url,
          device: this.config.analysis.device === 'both' ? 'desktop' : this.config.analysis.device,
          userAgent: 'Chrome/120.0.0.0',
          lighthouseVersion: '11.0.0'
        }
      };

      console.log(`‚úÖ –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –°–∫–æ—Ä: ${mockResults.overallScore}`);
      return mockResults;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Lighthouse:', error);
      throw new Error(`–û—à–∏–±–∫–∞ Lighthouse –∞—É–¥–∏—Ç–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—É–¥–∏—Ç–∞
   */
  private createOptimizationPlanInternal(results: LighthouseResults): OptimizationPlan[] {
    const plan: OptimizationPlan[] = [];
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º opportunities –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞
    for (const opportunity of results.opportunities) {
      let impact: 'high' | 'medium' | 'low' = 'low';
      let estimatedImprovement = 0;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
      if (opportunity.numericValue > 500) {
        impact = 'high';
        estimatedImprovement = 15;
      } else if (opportunity.numericValue > 200) {
        impact = 'medium';
        estimatedImprovement = 8;
      } else {
        impact = 'low';
        estimatedImprovement = 3;
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID opportunity
      const task = this.createOptimizationTask(opportunity.id, impact, estimatedImprovement);
      if (task) {
        plan.push(task);
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (this.config.optimizations.enableImageOptimization) {
      plan.push({
        step: 'optimize-images',
        description: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (WebP, —Å–∂–∞—Ç–∏–µ, lazy loading)',
        impact: 'high',
        category: 'performance',
        estimatedImprovement: 12
      });
    }

    if (this.config.optimizations.enableCriticalResourceOptimization) {
      plan.push({
        step: 'critical-resources',
        description: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤',
        impact: 'high',
        category: 'performance',
        estimatedImprovement: 10
      });
    }

    if (this.config.optimizations.enableScriptOptimization) {
      plan.push({
        step: 'optimize-scripts',
        description: '–ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —Å–∂–∞—Ç–∏–µ JavaScript',
        impact: 'medium',
        category: 'performance',
        estimatedImprovement: 8
      });
    }

    if (this.config.optimizations.enableCSSOptimization) {
      plan.push({
        step: 'optimize-css',
        description: '–ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ CSS',
        impact: 'medium',
        category: 'performance',
        estimatedImprovement: 6
      });
    }

    if (this.config.optimizations.enableServiceWorker) {
      plan.push({
        step: 'service-worker',
        description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Service Worker –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è',
        impact: 'medium',
        category: 'pwa',
        estimatedImprovement: 5
      });
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    return plan.sort((a, b) => {
      const priorityOrder = { high: 3, medium: 2, low: 1 };
      return priorityOrder[b.impact] - priorityOrder[a.impact];
    });
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ Lighthouse opportunity
   */
  private createOptimizationTask(
    opportunityId: string, 
    impact: 'high' | 'medium' | 'low', 
    estimatedImprovement: number
  ): OptimizationPlan | null {
    const taskMap: Record<string, { step: string; description: string; category: string }> = {
      'unused-css-rules': {
        step: 'remove-unused-css',
        description: '–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö CSS –ø—Ä–∞–≤–∏–ª',
        category: 'performance'
      },
      'unused-javascript': {
        step: 'remove-unused-js',
        description: '–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ JavaScript',
        category: 'performance'
      },
      'uses-optimized-images': {
        step: 'optimize-images',
        description: '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã',
        category: 'performance'
      },
      'render-blocking-resources': {
        step: 'eliminate-render-blocking',
        description: '–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤',
        category: 'performance'
      },
      'unminified-css': {
        step: 'minify-css',
        description: '–ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è CSS —Ñ–∞–π–ª–æ–≤',
        category: 'performance'
      },
      'unminified-javascript': {
        step: 'minify-js',
        description: '–ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è JavaScript —Ñ–∞–π–ª–æ–≤',
        category: 'performance'
      },
      'uses-text-compression': {
        step: 'enable-compression',
        description: '–í–∫–ª—é—á–µ–Ω–∏–µ —Å–∂–∞—Ç–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤',
        category: 'performance'
      }
    };

    const taskTemplate = taskMap[opportunityId];
    if (!taskTemplate) {
      return null;
    }

    return {
      ...taskTemplate,
      impact,
      estimatedImprovement
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  generateReport(): string {
    if (!this.baseline) {
      return '–û—Ç—á–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –Ω–µ—Ç –±–∞–∑–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤';
    }

    const improvements = this.calculateImprovements();
    const currentScore = this.currentResults?.overallScore || this.baseline.overallScore;
    
    let report = '# üìä –û—Ç—á–µ—Ç –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ Lighthouse Score\n\n';
    
    // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    report += '## üìà –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n';
    report += `- **–ò—Å—Ö–æ–¥–Ω—ã–π —Å–∫–æ—Ä:** ${this.baseline.overallScore}\n`;
    report += `- **–¢–µ–∫—É—â–∏–π —Å–∫–æ—Ä:** ${currentScore}\n`;
    report += `- **–¶–µ–ª–µ–≤–æ–π —Å–∫–æ—Ä:** ${this.config.targetScore}\n`;
    report += `- **–£–ª—É—á—à–µ–Ω–∏–µ:** ${currentScore - this.baseline.overallScore} –±–∞–ª–ª–æ–≤\n\n`;
    
    // –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    report += '## üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n\n';
    report += '| –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –ò—Å—Ö–æ–¥–Ω–æ | –¢–µ–∫—É—â–∏–π | –¶–µ–ª—å | –°—Ç–∞—Ç—É—Å |\n';
    report += '|-----------|---------|---------|------|--------|\n';
    
    const categories = [
      { key: 'performance', name: 'Performance', target: this.config.categoryTargets.performance },
      { key: 'accessibility', name: 'Accessibility', target: this.config.categoryTargets.accessibility },
      { key: 'bestPractices', name: 'Best Practices', target: this.config.categoryTargets.bestPractices },
      { key: 'seo', name: 'SEO', target: this.config.categoryTargets.seo }
    ];

    for (const category of categories) {
      const baselineScore = this.baseline.categories[category.key as keyof typeof this.baseline.categories];
      const currentScoreForCategory = this.currentResults?.categories[category.key as keyof typeof this.currentResults.categories] ?? baselineScore;
      const status = (currentScoreForCategory ?? 0) >= category.target ? '‚úÖ' : '‚ö†Ô∏è';
      
      report += `| ${category.name} | ${baselineScore} | ${currentScoreForCategory} | ${category.target} | ${status} |\n`;
    }
    
    // –£–ª—É—á—à–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
    if (improvements.length > 0) {
      report += '\n## üöÄ –£–ª—É—á—à–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫\n\n';
      for (const improvement of improvements) {
        const sign = improvement.improvement >= 0 ? '+' : '';
        report += `- **${improvement.metric}:** ${sign}${improvement.improvement.toFixed(1)}%\n`;
      }
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    report += '\n## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è\n\n';
    
    if (currentScore < this.config.targetScore) {
      const gap = this.config.targetScore - currentScore;
      report += `–î–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ —Å–∫–æ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ ${gap} –±–∞–ª–ª–æ–≤.\n\n`;
      
      // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      if (this.baseline.categories.performance < this.config.categoryTargets.performance) {
        report += '- üîß **Performance:** –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ JavaScript\n';
      }
      if (this.baseline.categories.accessibility < this.config.categoryTargets.accessibility) {
        report += '- ‚ôø **Accessibility:** –£–ª—É—á—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n';
      }
      if (this.baseline.categories.bestPractices < this.config.categoryTargets.bestPractices) {
        report += '- ‚úÖ **Best Practices:** –°–ª–µ–¥—É–π—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –≤–µ–±-—Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º\n';
      }
      if (this.baseline.categories.seo < this.config.categoryTargets.seo) {
        report += '- üîç **SEO:** –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –º–µ—Ç–∞-—Ç–µ–≥–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã\n';
      }
    } else {
      report += 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¶–µ–ª–µ–≤–æ–π —Å–∫–æ—Ä –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!\n';
    }
    
    return report;
  }

  /**
   * –†–∞—Å—á–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π –º–µ—Ç—Ä–∏–∫
   */
  calculateImprovements(): Array<{ metric: string; improvement: number }> {
    if (!this.baseline || !this.currentResults) {
      return [];
    }

    const improvements = [];
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    const metrics = [
      { key: 'firstContentfulPaint', name: 'First Contentful Paint', invert: true },
      { key: 'largestContentfulPaint', name: 'Largest Contentful Paint', invert: true },
      { key: 'firstInputDelay', name: 'First Input Delay', invert: true },
      { key: 'cumulativeLayoutShift', name: 'Cumulative Layout Shift', invert: true },
      { key: 'speedIndex', name: 'Speed Index', invert: true },
      { key: 'totalBlockingTime', name: 'Total Blocking Time', invert: true }
    ];

    for (const metric of metrics) {
      const baseValue = this.baseline.metrics[metric.key as keyof typeof this.baseline.metrics];
      const currentValue = this.currentResults.metrics[metric.key as keyof typeof this.currentResults.metrics];
      
      if (baseValue && currentValue) {
        let improvement = ((baseValue - currentValue) / baseValue) * 100;
        if (!metric.invert) {
          improvement = -improvement;
        }
        
        improvements.push({
          metric: metric.name,
          improvement
        });
      }
    }

    return improvements;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  getProgress(): OptimizationProgress {
    const currentScore = this.currentResults?.overallScore || this.baseline?.overallScore || 0;
    const improvements = this.calculateImprovements().map(imp => ({
      metric: imp.metric,
      beforeValue: this.baseline?.overallScore || 0,
      afterValue: this.currentResults?.overallScore || 0,
      improvement: imp.improvement
    }));
    
    return {
      currentStep: '–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
      completedSteps: ['Baseline —Å–æ–∑–¥–∞–Ω', '–ü–ª–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤'],
      totalSteps: 5,
      estimatedTimeRemaining: 120, // —Å–µ–∫—É–Ω–¥—ã
      currentScore,
      targetScore: this.config.targetScore,
      improvementsSinceStart: improvements
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  getOptimizationHistory(): LighthouseResults[] {
    return [...this.optimizationHistory];
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è URL
   */
  validateUrl(url: string): boolean {
    if (!url || typeof url !== 'string') {
      return false;
    }

    try {
      new URL(url);
    } catch {
      return false;
    }

    if (!url.startsWith('http://') && !url.startsWith('https://')) {
      return false;
    }

    return true;
  }

  /**
   * –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL —Å –≤—ã–±—Ä–æ—Å–æ–º –æ—à–∏–±–æ–∫
   */
  private validateUrlStrict(url: string): void {
    if (!url || typeof url !== 'string') {
      throw new Error('URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    }

    try {
      new URL(url);
    } catch {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL');
    }

    if (!url.startsWith('http://') && !url.startsWith('https://')) {
      throw new Error('URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://');
    }
  }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 */
export default LighthouseOptimizer;
