// filepath: packages/shared/src/performance/BundleAnalyzer.ts

/**
 * Bundle Analyzer - –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–Ω–¥–ª–∞
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏, —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */

export interface BundleMetrics {
  totalSize: number;
  gzippedSize: number;
  loadTime: number;
  firstContentfulPaint: number;
  largestContentfulPaint: number;
  timeToInteractive: number;
  chunkSizes: Record<string, number>;
  unusedCode: Record<string, number>;
}

export interface BaselineMetrics {
  timestamp: string;
  version: string;
  metrics: BundleMetrics;
  lighthouseScore: number;
  performanceGrade: 'A' | 'B' | 'C' | 'D' | 'F';
}

export class BundleAnalyzer {
  private static instance: BundleAnalyzer;
  private baselineHistory: BaselineMetrics[] = [];
  private currentMetrics: BundleMetrics | null = null;

  static getInstance(): BundleAnalyzer {
    if (!this.instance) {
      this.instance = new BundleAnalyzer();
    }
    return this.instance;
  }

  /**
   * –ò–∑–º–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  async measureCurrentMetrics(): Promise<BundleMetrics> {
    const startTime = performance.now();
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ä–µ—Å—É—Ä—Å–æ–≤
    const resources = performance.getEntriesByType('resource') as PerformanceResourceTiming[];
    const navigationEntry = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã —á–∞–Ω–∫–æ–≤
    const chunkSizes = this.analyzeChunkSizes(resources);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä
    const totalSize = resources.reduce((total, resource) => {
      return total + (resource.transferSize || 0);
    }, 0);

    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    const metrics: BundleMetrics = {
      totalSize,
      gzippedSize: this.calculateGzippedSize(resources),
      loadTime: performance.now() - startTime,
      firstContentfulPaint: this.getFirstContentfulPaint(),
      largestContentfulPaint: this.getLargestContentfulPaint(),
      timeToInteractive: this.getTimeToInteractive(navigationEntry),
      chunkSizes,
      unusedCode: await this.analyzeUnusedCode()
    };

    this.currentMetrics = metrics;
    return metrics;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç baseline –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
   */
  saveBaseline(version: string, lighthouseScore: number): void {
    if (!this.currentMetrics) {
      throw new Error('–ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è baseline');
    }

    const baseline: BaselineMetrics = {
      timestamp: new Date().toISOString(),
      version,
      metrics: { ...this.currentMetrics },
      lighthouseScore,
      performanceGrade: this.calculatePerformanceGrade(lighthouseScore)
    };

    this.baselineHistory.push(baseline);
    this.saveToStorage(baseline);
    
    console.log(`üìä Baseline —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –≤–µ—Ä—Å–∏–∏ ${version}:`, {
      totalSize: this.formatBytes(baseline.metrics.totalSize),
      lighthouseScore: baseline.lighthouseScore,
      grade: baseline.performanceGrade
    });
  }

  /**
   * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º baseline
   */
  compareWithBaseline(): {
    improvement: boolean;
    changes: Record<string, { current: number; baseline: number; change: number; }>;
    summary: string;
  } | null {
    const lastBaseline = this.getLastBaseline();
    if (!lastBaseline || !this.currentMetrics) {
      return null;
    }

    const changes = {
      totalSize: {
        current: this.currentMetrics.totalSize,
        baseline: lastBaseline.metrics.totalSize,
        change: ((this.currentMetrics.totalSize - lastBaseline.metrics.totalSize) / lastBaseline.metrics.totalSize) * 100
      },
      loadTime: {
        current: this.currentMetrics.loadTime,
        baseline: lastBaseline.metrics.loadTime,
        change: ((this.currentMetrics.loadTime - lastBaseline.metrics.loadTime) / lastBaseline.metrics.loadTime) * 100
      },
      firstContentfulPaint: {
        current: this.currentMetrics.firstContentfulPaint,
        baseline: lastBaseline.metrics.firstContentfulPaint,
        change: ((this.currentMetrics.firstContentfulPaint - lastBaseline.metrics.firstContentfulPaint) / lastBaseline.metrics.firstContentfulPaint) * 100
      }
    };

    const totalSizeImproved = changes.totalSize.change < 0;
    const loadTimeImproved = changes.loadTime.change < 0;
    const improvement = totalSizeImproved && loadTimeImproved;

    const summary = `
Bundle Size: ${totalSizeImproved ? '‚úÖ' : '‚ùå'} ${changes.totalSize.change.toFixed(1)}%
Load Time: ${loadTimeImproved ? '‚úÖ' : '‚ùå'} ${changes.loadTime.change.toFixed(1)}%
FCP: ${changes.firstContentfulPaint.change < 0 ? '‚úÖ' : '‚ùå'} ${changes.firstContentfulPaint.change.toFixed(1)}%
    `.trim();

    return { improvement, changes, summary };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä—ã —á–∞–Ω–∫–æ–≤
   */
  private analyzeChunkSizes(resources: PerformanceResourceTiming[]): Record<string, number> {
    const chunkSizes: Record<string, number> = {};
    
    resources.forEach(resource => {
      if (resource.name.includes('.js') || resource.name.includes('.css')) {
        const fileName = resource.name.split('/').pop() || 'unknown';
        chunkSizes[fileName] = resource.transferSize || 0;
      }
    });

    return chunkSizes;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ gzip
   */
  private calculateGzippedSize(resources: PerformanceResourceTiming[]): number {
    // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: gzip –æ–±—ã—á–Ω–æ —Å–∂–∏–º–∞–µ—Ç –Ω–∞ 60-80%
    const totalTransferSize = resources.reduce((total, resource) => {
      return total + (resource.transferSize || 0);
    }, 0);
    
    return Math.round(totalTransferSize * 0.7); // –ü—Ä–∏–º–µ—Ä–Ω–æ 70% –æ—Ç original size
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç First Contentful Paint –º–µ—Ç—Ä–∏–∫—É
   */
  private getFirstContentfulPaint(): number {
    const paintEntries = performance.getEntriesByType('paint');
    const fcpEntry = paintEntries.find(entry => entry.name === 'first-contentful-paint');
    return fcpEntry?.startTime || 0;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç Largest Contentful Paint –º–µ—Ç—Ä–∏–∫—É
   */
  private getLargestContentfulPaint(): number {
    return new Promise<number>((resolve) => {
      if ('PerformanceObserver' in window) {
        const observer = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const lastEntry = entries[entries.length - 1];
          resolve(lastEntry?.startTime || 0);
          observer.disconnect();
        });
        observer.observe({ entryTypes: ['largest-contentful-paint'] });
        
        // Fallback —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          observer.disconnect();
          resolve(0);
        }, 3000);
      } else {
        resolve(0);
      }
    }) as any; // –¢–∏–ø–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ —á–∏—Å–ª–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç Time to Interactive
   */
  private getTimeToInteractive(navigationEntry: PerformanceNavigationTiming): number {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ TTI
    return navigationEntry.domContentLoadedEventEnd - navigationEntry.fetchStart;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–æ–¥ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
   */
  private async analyzeUnusedCode(): Promise<Record<string, number>> {
    // –î–ª—è production –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å webpack-bundle-analyzer
    // –°–µ–π—á–∞—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    return {
      'unused-utilities': 0,
      'unused-components': 0,
      'dead-code': 0
    };
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  private calculatePerformanceGrade(lighthouseScore: number): 'A' | 'B' | 'C' | 'D' | 'F' {
    if (lighthouseScore >= 90) return 'A';
    if (lighthouseScore >= 80) return 'B';
    if (lighthouseScore >= 70) return 'C';
    if (lighthouseScore >= 60) return 'D';
    return 'F';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π baseline
   */
  private getLastBaseline(): BaselineMetrics | null {
    return this.baselineHistory[this.baselineHistory.length - 1] || null;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ localStorage
   */
  private saveToStorage(baseline: BaselineMetrics): void {
    try {
      const stored = localStorage.getItem('heys-performance-baselines');
      const baselines = stored ? JSON.parse(stored) : [];
      baselines.push(baseline);
      
      // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 baseline
      if (baselines.length > 10) {
        baselines.splice(0, baselines.length - 10);
      }
      
      localStorage.setItem('heys-performance-baselines', JSON.stringify(baselines));
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å baseline –≤ localStorage:', error);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
   */
  loadFromStorage(): void {
    try {
      const stored = localStorage.getItem('heys-performance-baselines');
      if (stored) {
        this.baselineHistory = JSON.parse(stored);
      }
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å baselines –∏–∑ localStorage:', error);
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–∞–π—Ç—ã –≤ —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
   */
  private formatBytes(bytes: number): string {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  generateReport(): {
    current: BundleMetrics | null;
    baseline: BaselineMetrics | null;
    comparison: {
      improvement: boolean;
      changes: Record<string, { current: number; baseline: number; change: number; }>;
      summary: string;
    } | null;
    recommendations: string[];
  } {
    const comparison = this.compareWithBaseline();
    const recommendations = this.generateRecommendations();

    return {
      current: this.currentMetrics,
      baseline: this.getLastBaseline(),
      comparison,
      recommendations
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  private generateRecommendations(): string[] {
    const recommendations: string[] = [];
    
    if (!this.currentMetrics) return recommendations;

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É bundle
    if (this.currentMetrics.totalSize > 500000) { // 500KB
      recommendations.push('üì¶ Bundle —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–≤—ã—à–∞–µ—Ç 500KB - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ code splitting');
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    if (this.currentMetrics.firstContentfulPaint > 1800) { // 1.8s
      recommendations.push('‚ö° FCP –ø—Ä–µ–≤—ã—à–∞–µ—Ç 1.8s - –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞');
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —á–∞–Ω–∫–∞–º
    const largeChunks = Object.entries(this.currentMetrics.chunkSizes)
      .filter(([, size]) => size > 100000); // 100KB
    
    if (largeChunks.length > 0) {
      recommendations.push(`üîß –ù–∞–π–¥–µ–Ω—ã –±–æ–ª—å—à–∏–µ —á–∞–Ω–∫–∏: ${largeChunks.map(([name]) => name).join(', ')}`);
    }

    return recommendations;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const bundleAnalyzer = BundleAnalyzer.getInstance();
