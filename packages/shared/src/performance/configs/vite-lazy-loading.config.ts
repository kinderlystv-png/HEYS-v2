// filepath: packages/shared/src/performance/configs/vite-lazy-loading.config.ts

import { defineConfig, UserConfig } from 'vite';
import { splitVendorChunkPlugin } from 'vite';

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Vite –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
 */
export function createLazyLoadingViteConfig(options: {
  /**
   * –í–∫–ª—é—á–∏—Ç—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ code splitting
   */
  enableAggressiveSplitting?: boolean;
  
  /**
   * –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–≤ –±–∞–π—Ç–∞—Ö)
   */
  minChunkSize?: number;
  
  /**
   * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ (–≤ –±–∞–π—Ç–∞—Ö)
   */
  maxChunkSize?: number;
  
  /**
   * –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ vendor –±–∏–±–ª–∏–æ—Ç–µ–∫
   */
  vendorStrategy?: 'single' | 'multiple' | 'framework';
  
  /**
   * –í–∫–ª—é—á–∏—Ç—å preload –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —á–∞–Ω–∫–æ–≤
   */
  enablePreload?: boolean;
  
  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∞–Ω–¥–ª–∞
   */
  enableBundleAnalysis?: boolean;
} = {}): UserConfig {
  
  const {
    enableAggressiveSplitting = true,
    minChunkSize = 20000, // 20KB
    maxChunkSize = 500000, // 500KB
    vendorStrategy = 'framework',
    enablePreload = true,
    enableBundleAnalysis = false
  } = options;

  return defineConfig({
    build: {
      // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
      target: 'es2015',
      minify: 'terser',
      sourcemap: true,
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ code splitting
      rollupOptions: {
        output: {
          // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —á–∞–Ω–∫–æ–≤
          chunkFileNames: (chunkInfo) => {
            const facadeModuleId = chunkInfo.facadeModuleId;
            
            if (facadeModuleId) {
              // –°–æ–∑–¥–∞–µ–º —á–∏—Ç–∞–µ–º—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è —á–∞–Ω–∫–æ–≤
              if (facadeModuleId.includes('node_modules')) {
                const packageName = extractPackageName(facadeModuleId);
                return `vendor-${packageName}-[hash].js`;
              }
              
              if (facadeModuleId.includes('pages/') || facadeModuleId.includes('routes/')) {
                const routeName = extractRouteName(facadeModuleId);
                return `page-${routeName}-[hash].js`;
              }
              
              if (facadeModuleId.includes('components/')) {
                const componentName = extractComponentName(facadeModuleId);
                return `component-${componentName}-[hash].js`;
              }
            }
            
            return 'chunk-[name]-[hash].js';
          },
          
          entryFileNames: 'entry-[name]-[hash].js',
          assetFileNames: 'assets/[name]-[hash].[ext]',
          
          // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ manual chunks –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
          manualChunks: enableAggressiveSplitting ? 
            createManualChunks(vendorStrategy, minChunkSize) : 
            undefined
        },
        
        // –í–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        external: (id) => {
          // –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ —Ç—è–∂–µ–ª—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤–æ –≤–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
          return false;
        }
      },
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Terser –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
      terserOptions: {
        compress: {
          drop_console: true, // –£–¥–∞–ª—è–µ–º console.log –≤ production
          drop_debugger: true,
          pure_funcs: ['console.log', 'console.info'], // –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
          passes: 2 // –ù–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ö–æ–¥–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        },
        mangle: {
          properties: {
            regex: /^_/ // Mangling –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
          }
        },
        format: {
          comments: false // –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        }
      }
    },
    
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    optimizeDeps: {
      // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      include: [
        // –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç pre-bundle
        'lodash-es',
        'date-fns',
        'axios'
      ],
      
      // –ò—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ pre-bundling
      exclude: [
        // –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å ESM
        '@vueuse/core'
      ]
    },
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    server: {
      // –í–∫–ª—é—á–∞–µ–º HTTP/2 –¥–ª—è better multiplexing
      https: false, // –ü–æ—Å—Ç–∞–≤–∏—Ç—å true –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ HTTPS
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CORS –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      cors: true,
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è API
      proxy: enablePreload ? {
        '/api': {
          target: 'http://localhost:3001',
          changeOrigin: true,
          rewrite: (path) => path.replace(/^\/api/, '')
        }
      } : undefined
    },
    
    // –ü–ª–∞–≥–∏–Ω—ã –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    plugins: [
      // –ë–∞–∑–æ–≤—ã–π –ø–ª–∞–≥–∏–Ω –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è vendor –±–∏–±–ª–∏–æ—Ç–µ–∫
      splitVendorChunkPlugin(),
      
      // –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–ª–∞–≥–∏–Ω –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
      createLazyLoadingPlugin({
        enablePreload,
        enableBundleAnalysis
      })
    ]
  });
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ manual chunks
 */
function createManualChunks(
  strategy: 'single' | 'multiple' | 'framework',
  minChunkSize: number
) {
  return (id: string) => {
    // Vendor –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    if (id.includes('node_modules')) {
      const packageName = extractPackageName(id);
      
      switch (strategy) {
        case 'single':
          return 'vendor';
          
        case 'framework':
          // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞–º
          if (id.includes('react') || id.includes('react-dom')) {
            return 'vendor-react';
          }
          if (id.includes('vue')) {
            return 'vendor-vue';
          }
          if (id.includes('angular')) {
            return 'vendor-angular';
          }
          if (id.includes('lodash') || id.includes('moment') || id.includes('date-fns')) {
            return 'vendor-utils';
          }
          return 'vendor-misc';
          
        case 'multiple':
          // –û—Ç–¥–µ–ª—å–Ω—ã–π —á–∞–Ω–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –∫—Ä—É–ø–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
          const largeLibraries = ['react', 'vue', 'angular', 'lodash', 'moment', 'three', 'chart'];
          const foundLarge = largeLibraries.find(lib => packageName.includes(lib));
          if (foundLarge) {
            return `vendor-${foundLarge}`;
          }
          return `vendor-${packageName}`;
      }
    }
    
    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã UI –±–∏–±–ª–∏–æ—Ç–µ–∫
    if (id.includes('components/ui/') || id.includes('@/components/ui/')) {
      return 'ui-components';
    }
    
    // –£—Ç–∏–ª–∏—Ç—ã
    if (id.includes('utils/') || id.includes('@/utils/')) {
      return 'utils';
    }
    
    // –°—Ç—Ä–∞–Ω–∏—Ü—ã/—Ä–æ—É—Ç—ã
    if (id.includes('pages/') || id.includes('routes/') || id.includes('views/')) {
      const routeName = extractRouteName(id);
      return `page-${routeName}`;
    }
    
    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    if (id.includes('components/')) {
      const componentDir = extractComponentDirectory(id);
      if (componentDir) {
        return `components-${componentDir}`;
      }
    }
    
    return undefined;
  };
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–∞–∫–µ—Ç–∞ –∏–∑ –ø—É—Ç–∏
 */
function extractPackageName(id: string): string {
  const match = id.match(/node_modules\/([^\/]+)/);
  if (match) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ scoped packages (@scope/package)
    if (match[1].startsWith('@')) {
      const nextMatch = id.match(/node_modules\/@[^\/]+\/([^\/]+)/);
      return nextMatch ? `${match[1]}-${nextMatch[1]}` : match[1];
    }
    return match[1];
  }
  return 'unknown';
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ä–æ—É—Ç–∞ –∏–∑ –ø—É—Ç–∏
 */
function extractRouteName(id: string): string {
  const match = id.match(/\/(?:pages|routes|views)\/([^\/]+)/);
  return match ? match[1].replace(/\.(vue|tsx?|jsx?)$/, '') : 'unknown';
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑ –ø—É—Ç–∏
 */
function extractComponentName(id: string): string {
  const match = id.match(/\/components\/([^\/]+)/);
  return match ? match[1] : 'unknown';
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */
function extractComponentDirectory(id: string): string | null {
  const match = id.match(/\/components\/([^\/]+)\//);
  return match ? match[1] : null;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞ –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
 */
function createLazyLoadingPlugin(options: {
  enablePreload: boolean;
  enableBundleAnalysis: boolean;
}) {
  return {
    name: 'lazy-loading-optimizer',
    
    generateBundle(outputOptions: any, bundle: any) {
      if (options.enableBundleAnalysis) {
        // –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ —á–∞–Ω–∫–æ–≤
        const chunkSizes: Array<{ name: string; size: number }> = [];
        
        Object.entries(bundle).forEach(([fileName, chunk]: [string, any]) => {
          if (chunk.type === 'chunk') {
            const size = Buffer.byteLength(chunk.code, 'utf8');
            chunkSizes.push({ name: fileName, size });
          }
        });
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
        chunkSizes.sort((a, b) => b.size - a.size);
        
        console.log('\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ —á–∞–Ω–∫–æ–≤:');
        chunkSizes.slice(0, 10).forEach((chunk, index) => {
          const sizeKB = (chunk.size / 1024).toFixed(1);
          console.log(`   ${index + 1}. ${chunk.name}: ${sizeKB} KB`);
        });
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –±–æ–ª—å—à–∏—Ö —á–∞–Ω–∫–∞—Ö
        const largeChunks = chunkSizes.filter(chunk => chunk.size > 500000); // 500KB
        if (largeChunks.length > 0) {
          console.log('\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –±–æ–ª—å—à–∏–µ —á–∞–Ω–∫–∏:');
          largeChunks.forEach(chunk => {
            const sizeKB = (chunk.size / 1024).toFixed(1);
            console.log(`   ‚Ä¢ ${chunk.name}: ${sizeKB} KB`);
          });
          console.log('   –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —ç—Ç–∏—Ö —á–∞–Ω–∫–æ–≤.\n');
        }
      }
    },
    
    transformIndexHtml(html: string) {
      if (options.enablePreload) {
        // –î–æ–±–∞–≤–ª—è–µ–º preload —Ç–µ–≥–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        const preloadTags = [
          '<link rel="preload" href="/fonts/main.woff2" as="font" type="font/woff2" crossorigin>',
          '<link rel="preload" href="/images/hero.webp" as="image">',
          // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
        ].join('\n    ');
        
        return html.replace('<head>', `<head>\n    ${preloadTags}`);
      }
      return html;
    }
  };
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
 */
export function createReactLazyConfig(options = {}) {
  return createLazyLoadingViteConfig({
    vendorStrategy: 'framework',
    enableAggressiveSplitting: true,
    ...options
  });
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Vue –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
 */
export function createVueLazyConfig(options = {}) {
  return createLazyLoadingViteConfig({
    vendorStrategy: 'framework',
    enableAggressiveSplitting: true,
    ...options
  });
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
 */
export function createEnterpriseLazyConfig(options = {}) {
  return createLazyLoadingViteConfig({
    enableAggressiveSplitting: true,
    minChunkSize: 10000, // 10KB - –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
    maxChunkSize: 250000, // 250KB - –º–µ–Ω—å—à–∏–µ —á–∞–Ω–∫–∏
    vendorStrategy: 'multiple',
    enablePreload: true,
    enableBundleAnalysis: true,
    ...options
  });
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
 */
export default {
  createLazyLoadingViteConfig,
  createReactLazyConfig,
  createVueLazyConfig,
  createEnterpriseLazyConfig
};
