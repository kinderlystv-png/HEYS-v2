// filepath: packages/shared/src/performance/webpack-analyzer.config.js

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Webpack Bundle Analyzer
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–Ω–¥–ª–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
 */

const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');
const path = require('path');

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∞–Ω–¥–ª–∞
 */
function createBundleAnalyzerConfig(options = {}) {
  const {
    analyzerMode = process.env.ANALYZE ? 'server' : 'json',
    outputDir = 'bundle-analysis',
    openAnalyzer = false,
    generateStatsFile = true,
  } = options;

  return {
    plugins: [
      new BundleAnalyzerPlugin({
        // –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 'server', 'static', 'json', 'disabled'
        analyzerMode,
        
        // –ü–æ—Ä—Ç –¥–ª—è server —Ä–µ–∂–∏–º–∞
        analyzerPort: 8888,
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä
        openAnalyzer,
        
        // –ü—É—Ç—å –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
        reportFilename: path.join(outputDir, 'bundle-report.html'),
        
        // –ü—É—Ç—å –¥–ª—è JSON –æ—Ç—á–µ—Ç–∞
        statsFilename: path.join(outputDir, 'bundle-stats.json'),
        
        // –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å stats —Ñ–∞–π–ª
        generateStatsFile,
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logLevel: 'info',
        
        // –†–∞–∑–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        defaultSizes: 'gzip',
        
        // –ò—Å–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª–∏ –º–µ–Ω—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–≤ –±–∞–π—Ç–∞—Ö)
        statsOptions: {
          source: false,
          modules: false,
          chunks: false,
          chunkModules: false,
          chunkOrigins: false,
          excludeAssets: /\.(map|txt|html|jpg|png|gif)$/,
        },
      }),
    ],
  };
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
 */
function createEnvironmentConfigs() {
  return {
    // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - JSON –æ—Ç—á–µ—Ç
    development: createBundleAnalyzerConfig({
      analyzerMode: 'json',
      outputDir: 'dist/bundle-analysis/dev',
      openAnalyzer: false,
    }),

    // –î–ª—è production - —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π HTML –æ—Ç—á–µ—Ç
    production: createBundleAnalyzerConfig({
      analyzerMode: 'static',
      outputDir: 'dist/bundle-analysis/prod',
      openAnalyzer: false,
    }),

    // –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
    analyze: createBundleAnalyzerConfig({
      analyzerMode: 'server',
      outputDir: 'dist/bundle-analysis/analyze',
      openAnalyzer: true,
    }),
  };
}

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö stats —Ñ–∞–π–ª–æ–≤
 */
function createStatsAnalysisScript() {
  return `
// filepath: scripts/analyze-bundle.js

const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');
const fs = require('fs');
const path = require('path');

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π stats.json —Ñ–∞–π–ª
 */
async function analyzeStats(statsPath, outputPath = 'bundle-analysis') {
  if (!fs.existsSync(statsPath)) {
    console.error('‚ùå Stats —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', statsPath);
    process.exit(1);
  }

  console.log('üìä –ê–Ω–∞–ª–∏–∑ bundle stats:', statsPath);

  const statsData = JSON.parse(fs.readFileSync(statsPath, 'utf8'));
  
  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π webpack config –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  const analyzer = new BundleAnalyzerPlugin({
    analyzerMode: 'static',
    reportFilename: path.join(outputPath, 'bundle-report.html'),
    openAnalyzer: true,
    generateStatsFile: false,
  });

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
  await analyzer.generateReport(statsData);
  
  console.log('‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω:', path.join(outputPath, 'bundle-report.html'));
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/analyze-bundle.js path/to/stats.json
if (require.main === module) {
  const statsPath = process.argv[2] || 'dist/stats.json';
  const outputPath = process.argv[3] || 'bundle-analysis';
  
  analyzeStats(statsPath, outputPath).catch(console.error);
}

module.exports = { analyzeStats };
  `;
}

/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –Ω–∞—à–∏–º BundleAnalyzer
 */
function createIntegrationScript() {
  return `
// filepath: scripts/performance-integration.js

const fs = require('fs');
const path = require('path');
const { bundleAnalyzer } = require('../packages/shared/src/performance/BundleAnalyzer');

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ webpack bundle analyzer
 * –∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –∏—Ö —Å –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */
async function integrateWebpackStats(statsPath) {
  if (!fs.existsSync(statsPath)) {
    console.error('‚ùå Stats —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', statsPath);
    return;
  }

  console.log('üîÑ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è webpack stats —Å BundleAnalyzer...');

  const statsData = JSON.parse(fs.readFileSync(statsPath, 'utf8'));
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —á–∞–Ω–∫–∞—Ö
  const chunks = statsData.chunks || [];
  const assets = statsData.assets || [];
  
  // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
  const chunkSizes = {};
  let totalSize = 0;
  
  assets.forEach(asset => {
    if (asset.name.endsWith('.js') || asset.name.endsWith('.css')) {
      chunkSizes[asset.name] = asset.size;
      totalSize += asset.size;
    }
  });

  // –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  const fakeMetrics = {
    totalSize,
    gzippedSize: Math.round(totalSize * 0.7),
    loadTime: 0,
    firstContentfulPaint: 0,
    largestContentfulPaint: 0,
    timeToInteractive: 0,
    chunkSizes,
    unusedCode: {},
  };

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ analyzer
  bundleAnalyzer.currentMetrics = fakeMetrics;

  console.log('üìä –î–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã:');
  console.log(\`- –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: \${(totalSize / 1024 / 1024).toFixed(2)} MB\`);
  console.log(\`- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤: \${Object.keys(chunkSizes).length}\`);
  console.log(\`- –ö—Ä—É–ø–Ω–µ–π—à–∏–π —á–∞–Ω–∫: \${Math.max(...Object.values(chunkSizes)) / 1024} KB\`);

  return fakeMetrics;
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/performance-integration.js path/to/stats.json
if (require.main === module) {
  const statsPath = process.argv[2] || 'dist/stats.json';
  integrateWebpackStats(statsPath).catch(console.error);
}

module.exports = { integrateWebpackStats };
  `;
}

module.exports = {
  createBundleAnalyzerConfig,
  createEnvironmentConfigs,
  createStatsAnalysisScript,
  createIntegrationScript,
};
