import { z as z$1 } from 'zod';
import { defaultValidator, ValidationSchemas, SecurityError } from '@heys/shared';

var P=z$1.object({id:z$1.string(),email:z$1.string().email(),name:z$1.string(),profile:z$1.object({age:z$1.number().optional(),gender:z$1.enum(["male","female","other"]).optional(),weight:z$1.number().optional(),height:z$1.number().optional(),activityLevel:z$1.enum(["sedentary","light","moderate","active","very-active"]).optional()}).optional(),preferences:z$1.object({units:z$1.enum(["metric","imperial"]).default("metric"),language:z$1.enum(["en","ru"]).default("en"),theme:z$1.enum(["light","dark","auto"]).default("auto")}).default({}),createdAt:z$1.date(),updatedAt:z$1.date()}),I=P.partial().omit({id:true,createdAt:true,updatedAt:true}),z=a=>{let e=new Date;return {id:crypto.randomUUID(),email:a.email,name:a.name,profile:a.profile,preferences:a.preferences||{units:"metric",language:"en",theme:"auto"},createdAt:e,updatedAt:e}};var M=z$1.object({id:z$1.string(),name:z$1.string(),brand:z$1.string().optional(),category:z$1.string(),nutrition:z$1.object({calories:z$1.number(),protein:z$1.number(),carbs:z$1.number(),fat:z$1.number(),fiber:z$1.number().optional(),sugar:z$1.number().optional(),sodium:z$1.number().optional()}),perUnit:z$1.object({amount:z$1.number(),unit:z$1.enum(["g","ml","piece","cup","tbsp","tsp"])}),createdAt:z$1.date(),updatedAt:z$1.date()}),k=z$1.object({id:z$1.string(),userId:z$1.string(),productId:z$1.string(),amount:z$1.number(),unit:z$1.string(),date:z$1.date(),meal:z$1.enum(["breakfast","lunch","dinner","snack"]),createdAt:z$1.date()}),A=(a,e)=>{let t=e/a.perUnit.amount;return {calories:Math.round(a.nutrition.calories*t*10)/10,protein:Math.round(a.nutrition.protein*t*10)/10,carbs:Math.round(a.nutrition.carbs*t*10)/10,fat:Math.round(a.nutrition.fat*t*10)/10,fiber:a.nutrition.fiber?Math.round(a.nutrition.fiber*t*10)/10:void 0,sugar:a.nutrition.sugar?Math.round(a.nutrition.sugar*t*10)/10:void 0,sodium:a.nutrition.sodium?Math.round(a.nutrition.sodium*t*10)/10:void 0}};var L=z$1.object({id:z$1.string(),name:z$1.string(),category:z$1.enum(["strength","cardio","flexibility","balance","sport"]),muscleGroups:z$1.array(z$1.string()),equipment:z$1.string().optional(),instructions:z$1.string().optional(),difficulty:z$1.enum(["beginner","intermediate","advanced"])}),S=z$1.object({exerciseId:z$1.string(),reps:z$1.number().optional(),weight:z$1.number().optional(),duration:z$1.number().optional(),distance:z$1.number().optional(),rest:z$1.number().optional()}),V=z$1.object({id:z$1.string(),userId:z$1.string(),name:z$1.string(),date:z$1.date(),sets:z$1.array(S),notes:z$1.string().optional(),duration:z$1.number(),createdAt:z$1.date()}),j=z$1.object({id:z$1.string(),name:z$1.string(),description:z$1.string(),duration:z$1.number(),sessions:z$1.array(z$1.object({name:z$1.string(),exercises:z$1.array(z$1.object({exerciseId:z$1.string(),sets:z$1.number(),reps:z$1.string(),weight:z$1.string().optional()}))})),level:z$1.enum(["beginner","intermediate","advanced"]),createdAt:z$1.date()});var v=class{static DEFAULT_MULTIPLIERS={proteins:4,carbs:4,fats:9};static calculateCalories(e,t={}){let{proteinMultiplier:n=this.DEFAULT_MULTIPLIERS.proteins,carbMultiplier:c=this.DEFAULT_MULTIPLIERS.carbs,fatMultiplier:p=this.DEFAULT_MULTIPLIERS.fats}=t;return e.proteins*n+e.carbs*c+e.fats*p}static calculateMacroRatio(e){let t=this.calculateCalories(e);return t===0?{proteinsPercent:0,carbsPercent:0,fatsPercent:0}:{proteinsPercent:Math.round(e.proteins*4/t*100),carbsPercent:Math.round(e.carbs*4/t*100),fatsPercent:Math.round(e.fats*9/t*100)}}static validateNutritionData(e){return typeof e.proteins=="number"&&e.proteins>=0&&typeof e.carbs=="number"&&e.carbs>=0&&typeof e.fats=="number"&&e.fats>=0&&(e.weight===void 0||typeof e.weight=="number"&&e.weight>0)}};var w=class{providers=[];eventQueue=[];userId;sessionId;constructor(){this.sessionId=this.generateSessionId();}addProvider(e){this.providers.push(e);}async track(e,t){let n={name:e,timestamp:Date.now(),sessionId:this.sessionId};t&&(n.properties=t),this.userId&&(n.userId=this.userId),this.eventQueue.push(n);let c=this.providers.map(p=>p.track(n).catch(x=>{}));await Promise.allSettled(c);}async identify(e,t){this.userId=e;let n=this.providers.map(c=>c.identify(e,t).catch(p=>{}));await Promise.allSettled(n);}getEventQueue(){return [...this.eventQueue]}clearEventQueue(){this.eventQueue=[];}generateSessionId(){return `session_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}};var N={save:()=>Promise.resolve(),load:()=>Promise.resolve(null)};var l=class{async createUser(e){return {id:this.generateId(),...e}}async updateUser(e,t){return {id:e,...t}}async searchUsers(e){return []}generateId(){return Math.random().toString(36).substr(2,9)}},m=class{async createDay(e){return {id:this.generateId(),...e}}async updateDay(e,t){return {id:e,...t}}async getDayContent(e){return {id:e,content:"sample content"}}generateId(){return Math.random().toString(36).substr(2,9)}},h=class{async createSession(e){return {id:this.generateId(),token:this.generateToken(),...e}}async validateSessionToken(e){return !!(e&&e.length>10)}generateId(){return Math.random().toString(36).substr(2,9)}generateToken(){return Math.random().toString(36).substr(2,32)}};var y=class extends l{async createUser(e){let t=await defaultValidator.validateSchema(e,ValidationSchemas.user,{sanitize:true,strictMode:true});if(!t.isValid)throw new SecurityError("User validation failed",t.errors);return super.createUser(t.sanitized||e)}async updateUser(e,t){let n=await defaultValidator.validateSchema(e,ValidationSchemas.user.shape.id);if(!n.isValid)throw new SecurityError("Invalid user ID",n.errors);let c=await defaultValidator.validateSchema(t,ValidationSchemas.user.partial(),{sanitize:true,strictMode:true});if(!c.isValid)throw new SecurityError("Update data validation failed",c.errors);return super.updateUser(e,c.sanitized||t)}async searchUsers(e){let t=defaultValidator.validateInput(e,"text",{sanitize:true,required:true});if(!t.isValid)throw new SecurityError("Search query validation failed",t.errors);return super.searchUsers(t.sanitized||e)}},f=class extends m{async createDay(e){let t=ValidationSchemas.content.extend({date:ValidationSchemas.user.shape.createdAt,userId:ValidationSchemas.user.shape.id}),n=await defaultValidator.validateSchema(e,t,{sanitize:true,strictMode:true});if(!n.isValid)throw new SecurityError("Day data validation failed",n.errors);return super.createDay(n.sanitized||e)}async updateDay(e,t){let n=await defaultValidator.validateSchema(t,ValidationSchemas.content.partial(),{sanitize:true,strictMode:true});if(!n.isValid)throw new SecurityError("Day update validation failed",n.errors);return super.updateDay(e,n.sanitized||t)}async getDayContent(e){let t=await super.getDayContent(e);return t&&typeof t=="object"&&(await defaultValidator.validateSchema(t,ValidationSchemas.content,{sanitize:true})).sanitized||t}},g=class extends h{async createSession(e){let t=ValidationSchemas.user.pick({id:true,email:true}).extend({token:ValidationSchemas.apiRequest.shape.headers,expiresAt:ValidationSchemas.user.shape.createdAt}),n=await defaultValidator.validateSchema(e,t,{sanitize:true,strictMode:true});if(!n.isValid)throw new SecurityError("Session validation failed",n.errors);return super.createSession(n.sanitized||e)}async validateSessionToken(e){let t=defaultValidator.validateInput(e,"text",{required:true,sanitize:true});return t.isValid?super.validateSessionToken(t.sanitized||e):false}},b=class{users;days;sessions;constructor(){this.users=new y,this.days=new f,this.sessions=new g;}async initialize(e={}){let t=await defaultValidator.validateSchema(e,ValidationSchemas.apiRequest.shape.body||{},{sanitize:true});if(!t.isValid)throw new SecurityError("Configuration validation failed",t.errors);await Promise.all([]);}async handleApiRequest(e){let t=await defaultValidator.validateSchema(e,ValidationSchemas.apiRequest,{sanitize:true,strictMode:true});if(!t.isValid)throw new SecurityError("API request validation failed",t.errors);let n=t.sanitized;switch(n.method){case "GET":return this.handleGetRequest(n);case "POST":return this.handlePostRequest(n);case "PUT":return this.handlePutRequest(n);case "DELETE":return this.handleDeleteRequest(n);default:throw new SecurityError("Unsupported HTTP method",[])}}async handleGetRequest(e){if(e.path.startsWith("/users"))return this.users.searchUsers(e.query?.q||"");if(e.path.startsWith("/days"))return this.days.getDayContent(e.query?.id);throw new SecurityError("Unknown GET endpoint",[])}async handlePostRequest(e){if(e.path==="/users")return this.users.createUser(e.body);if(e.path==="/days")return this.days.createDay(e.body);if(e.path==="/sessions")return this.sessions.createSession(e.body);throw new SecurityError("Unknown POST endpoint",[])}async handlePutRequest(e){let t=e.path.split("/");if(t[1]==="users"&&t[2])return this.users.updateUser(t[2],e.body);if(t[1]==="days"&&t[2])return this.days.updateDay(t[2],e.body);throw new SecurityError("Unknown PUT endpoint",[])}async handleDeleteRequest(e){throw e.headers?.authorization?new SecurityError("DELETE operations not implemented",[]):new SecurityError("Authorization required for DELETE operations",[])}},Z=new b;

export { w as AnalyticsService, L as ExerciseSchema, k as FoodEntrySchema, M as FoodProductSchema, v as NutritionService, f as SecureDayManager, b as SecureHeysCore, g as SecureSessionManager, y as SecureUserManager, N as StorageService, j as TrainingProgramSchema, I as UserDraftSchema, P as UserSchema, V as WorkoutSessionSchema, S as WorkoutSetSchema, A as calculateNutrition, z as createUser, Z as secureCore };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.js.map