{"version":3,"sources":["../src/models/user.ts","../src/models/food.ts","../src/models/training.ts","../src/services/nutrition.ts","../src/services/analytics.ts","../src/services/storage.ts"],"names":["z","UserSchema","UserDraftSchema","createUser","draft","now","FoodProductSchema","FoodEntrySchema","calculateNutrition","product","amount","ratio","ExerciseSchema","WorkoutSetSchema","WorkoutSessionSchema","TrainingProgramSchema","NutritionService","AnalyticsService","StorageService"],"mappings":"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","sourcesContent":["// User Model - Migrated from legacy heys_user_v12.ts\nimport { z } from 'zod';\n\n// User Schema\nexport const UserSchema = z.object({\n  id: z.string(),\n  email: z.string().email(),\n  name: z.string(),\n  profile: z\n    .object({\n      age: z.number().optional(),\n      gender: z.enum(['male', 'female', 'other']).optional(),\n      weight: z.number().optional(),\n      height: z.number().optional(),\n      activityLevel: z.enum(['sedentary', 'light', 'moderate', 'active', 'very-active']).optional(),\n    })\n    .optional(),\n  preferences: z\n    .object({\n      units: z.enum(['metric', 'imperial']).default('metric'),\n      language: z.enum(['en', 'ru']).default('en'),\n      theme: z.enum(['light', 'dark', 'auto']).default('auto'),\n    })\n    .default({}),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport type User = z.infer<typeof UserSchema>;\n\n// User Draft for forms\nexport const UserDraftSchema = UserSchema.partial().omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type UserDraft = z.infer<typeof UserDraftSchema>;\n\n// User utilities\nexport const createUser = (draft: UserDraft): User => {\n  const now = new Date();\n  return {\n    id: crypto.randomUUID(),\n    email: draft.email!,\n    name: draft.name!,\n    profile: draft.profile,\n    preferences: draft.preferences || {\n      units: 'metric',\n      language: 'en',\n      theme: 'auto',\n    },\n    createdAt: now,\n    updatedAt: now,\n  };\n};\n","// Food and Nutrition Models - Migrated from legacy core\nimport { z } from 'zod';\n\n// Food Product Schema\nexport const FoodProductSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  brand: z.string().optional(),\n  category: z.string(),\n  nutrition: z.object({\n    calories: z.number(),\n    protein: z.number(),\n    carbs: z.number(),\n    fat: z.number(),\n    fiber: z.number().optional(),\n    sugar: z.number().optional(),\n    sodium: z.number().optional(),\n  }),\n  perUnit: z.object({\n    amount: z.number(),\n    unit: z.enum(['g', 'ml', 'piece', 'cup', 'tbsp', 'tsp']),\n  }),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport type FoodProduct = z.infer<typeof FoodProductSchema>;\n\n// Food Entry Schema (diary entry)\nexport const FoodEntrySchema = z.object({\n  id: z.string(),\n  userId: z.string(),\n  productId: z.string(),\n  amount: z.number(),\n  unit: z.string(),\n  date: z.date(),\n  meal: z.enum(['breakfast', 'lunch', 'dinner', 'snack']),\n  createdAt: z.date(),\n});\n\nexport type FoodEntry = z.infer<typeof FoodEntrySchema>;\n\n// Nutrition calculations\nexport const calculateNutrition = (\n  product: FoodProduct,\n  amount: number\n): FoodProduct['nutrition'] => {\n  const ratio = amount / product.perUnit.amount;\n  return {\n    calories: Math.round(product.nutrition.calories * ratio * 10) / 10,\n    protein: Math.round(product.nutrition.protein * ratio * 10) / 10,\n    carbs: Math.round(product.nutrition.carbs * ratio * 10) / 10,\n    fat: Math.round(product.nutrition.fat * ratio * 10) / 10,\n    fiber: product.nutrition.fiber\n      ? Math.round(product.nutrition.fiber * ratio * 10) / 10\n      : undefined,\n    sugar: product.nutrition.sugar\n      ? Math.round(product.nutrition.sugar * ratio * 10) / 10\n      : undefined,\n    sodium: product.nutrition.sodium\n      ? Math.round(product.nutrition.sodium * ratio * 10) / 10\n      : undefined,\n  };\n};\n","// Training Models - New structure for workout management\nimport { z } from 'zod';\n\n// Exercise Schema\nexport const ExerciseSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  category: z.enum(['strength', 'cardio', 'flexibility', 'balance', 'sport']),\n  muscleGroups: z.array(z.string()),\n  equipment: z.string().optional(),\n  instructions: z.string().optional(),\n  difficulty: z.enum(['beginner', 'intermediate', 'advanced']),\n});\n\nexport type Exercise = z.infer<typeof ExerciseSchema>;\n\n// Workout Set Schema\nexport const WorkoutSetSchema = z.object({\n  exerciseId: z.string(),\n  reps: z.number().optional(),\n  weight: z.number().optional(),\n  duration: z.number().optional(), // in seconds\n  distance: z.number().optional(), // in meters\n  rest: z.number().optional(), // rest time in seconds\n});\n\nexport type WorkoutSet = z.infer<typeof WorkoutSetSchema>;\n\n// Workout Session Schema\nexport const WorkoutSessionSchema = z.object({\n  id: z.string(),\n  userId: z.string(),\n  name: z.string(),\n  date: z.date(),\n  sets: z.array(WorkoutSetSchema),\n  notes: z.string().optional(),\n  duration: z.number(), // total workout duration in seconds\n  createdAt: z.date(),\n});\n\nexport type WorkoutSession = z.infer<typeof WorkoutSessionSchema>;\n\n// Training Program Schema\nexport const TrainingProgramSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  description: z.string(),\n  duration: z.number(), // program duration in weeks\n  sessions: z.array(\n    z.object({\n      name: z.string(),\n      exercises: z.array(\n        z.object({\n          exerciseId: z.string(),\n          sets: z.number(),\n          reps: z.string(), // e.g., \"8-12\", \"30 sec\"\n          weight: z.string().optional(), // e.g., \"bodyweight\", \"60% 1RM\"\n        })\n      ),\n    })\n  ),\n  level: z.enum(['beginner', 'intermediate', 'advanced']),\n  createdAt: z.date(),\n});\n\nexport type TrainingProgram = z.infer<typeof TrainingProgramSchema>;\n","// Nutrition service placeholder\nexport const NutritionService = {\n  calculateCalories: () => 0,\n};\n","// Analytics service placeholder\nexport const AnalyticsService = {\n  track: () => {},\n};\n","// Storage service placeholder\nexport const StorageService = {\n  save: () => Promise.resolve(),\n  load: () => Promise.resolve(null),\n};\n"]}