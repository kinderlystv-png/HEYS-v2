{"version":3,"sources":["../src/index.ts"],"names":["SmartSearchEngine","config","str1","str2","matrix","i","j","indicator","query","text","result","rule","word","synonymList","key","values","v","target","distance","maxLength","similarity","items","searchFields","startTime","normalizedQuery","cached","phoneticQuery","synonyms","maxDistance","matches","item","field","fieldValue","phoneticValue","score","phoneticDistance","phoneticScore","synonym","synonymDistance","synonymScore","uniqueMatches","m","a","b","resultItems","suggestions","queryLength","match","entries","searchTime","newConfig"],"mappings":"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","sourcesContent":["// HEYS Search Engine - Modern TypeScript implementation\r\n// Migrated from heys_smart_search_with_typos_v1.js\r\n\r\nexport interface SearchConfig {\r\n  maxTypoDistance: number;\r\n  minQueryLength: number;\r\n  maxSuggestions: number;\r\n  cacheEnabled: boolean;\r\n  cacheTimeout: number;\r\n  enablePhonetic: boolean;\r\n  enableSynonyms: boolean;\r\n  debugMode: boolean;\r\n}\r\n\r\nexport interface SearchResult<T = any> {\r\n  items: T[];\r\n  query: string;\r\n  suggestions: string[];\r\n  searchTime: number;\r\n  total: number;\r\n  typosCorrected: boolean;\r\n}\r\n\r\nexport interface SearchMetrics {\r\n  totalSearches: number;\r\n  averageSearchTime: number;\r\n  cacheHitRate: number;\r\n  typoCorrections: number;\r\n}\r\n\r\nexport class SmartSearchEngine<T = any> {\r\n  private config: SearchConfig;\r\n  private cache = new Map<string, { result: SearchResult<T>; timestamp: number }>();\r\n  private metrics: SearchMetrics = {\r\n    totalSearches: 0,\r\n    averageSearchTime: 0,\r\n    cacheHitRate: 0,\r\n    typoCorrections: 0,\r\n  };\r\n\r\n  // Common words dictionary for improved search\r\n  private commonWords = new Set([\r\n    'хлеб',\r\n    'молоко',\r\n    'мясо',\r\n    'рыба',\r\n    'овощи',\r\n    'фрукты',\r\n    'крупа',\r\n    'макароны',\r\n    'сыр',\r\n    'масло',\r\n    'яйца',\r\n    'курица',\r\n    'говядина',\r\n    'свинина',\r\n    'картофель',\r\n    'морковь',\r\n    'лук',\r\n    'помидор',\r\n    'огурец',\r\n    'яблоко',\r\n    'банан',\r\n    'апельсин',\r\n  ]);\r\n\r\n  // Synonyms dictionary\r\n  private synonyms = new Map([\r\n    ['хлеб', ['батон', 'буханка', 'булка', 'багет']],\r\n    ['молоко', ['молочко', 'молочный']],\r\n    ['мясо', ['мясной', 'мясные']],\r\n    ['курица', ['куриный', 'цыпленок', 'птица']],\r\n    ['говядина', ['говяжий', 'телятина']],\r\n    ['свинина', ['свиной', 'поросенок']],\r\n    ['картофель', ['картошка', 'картофельный']],\r\n    ['помидор', ['томат', 'томатный']],\r\n    ['масло', ['маслице', 'сливочное']],\r\n  ]);\r\n\r\n  // Phonetic rules for Russian language\r\n  private phoneticRules = [\r\n    { from: /[её]/g, to: 'е' },\r\n    { from: /[ии]/g, to: 'и' },\r\n    { from: /[оё]/g, to: 'о' },\r\n    { from: /[ъь]/g, to: '' },\r\n    { from: /тс/g, to: 'ц' },\r\n    { from: /дс/g, to: 'ц' },\r\n  ];\r\n\r\n  constructor(config: Partial<SearchConfig> = {}) {\r\n    this.config = {\r\n      maxTypoDistance: 2,\r\n      minQueryLength: 2,\r\n      maxSuggestions: 5,\r\n      cacheEnabled: true,\r\n      cacheTimeout: 300000, // 5 minutes\r\n      enablePhonetic: true,\r\n      enableSynonyms: true,\r\n      debugMode: false,\r\n      ...config,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate Levenshtein distance between two strings\r\n   */\r\n  private levenshteinDistance(str1: string, str2: string): number {\r\n    const matrix = Array(str2.length + 1)\r\n      .fill(null)\r\n      .map(() => Array(str1.length + 1).fill(null));\r\n\r\n    for (let i = 0; i <= str1.length; i++) matrix[0][i] = i;\r\n    for (let j = 0; j <= str2.length; j++) matrix[j][0] = j;\r\n\r\n    for (let j = 1; j <= str2.length; j++) {\r\n      for (let i = 1; i <= str1.length; i++) {\r\n        const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;\r\n        matrix[j][i] = Math.min(\r\n          matrix[j][i - 1] + 1, // deletion\r\n          matrix[j - 1][i] + 1, // insertion\r\n          matrix[j - 1][i - 1] + indicator, // substitution\r\n        );\r\n      }\r\n    }\r\n\r\n    return matrix[str2.length][str1.length];\r\n  }\r\n\r\n  /**\r\n   * Normalize query string\r\n   */\r\n  private normalizeQuery(query: string): string {\r\n    return query.toLowerCase().trim().replace(/\\s+/g, ' ');\r\n  }\r\n\r\n  /**\r\n   * Apply phonetic transformation\r\n   */\r\n  private phoneticTransform(text: string): string {\r\n    if (!this.config.enablePhonetic) return text;\r\n\r\n    let result = text;\r\n    for (const rule of this.phoneticRules) {\r\n      result = result.replace(rule.from, rule.to);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Find synonyms for a word\r\n   */\r\n  private findSynonyms(word: string): string[] {\r\n    if (!this.config.enableSynonyms) return [];\r\n\r\n    const synonymList = this.synonyms.get(word) || [];\r\n\r\n    // Also check if word is a synonym of another word\r\n    for (const [key, values] of this.synonyms) {\r\n      if (values.includes(word)) {\r\n        synonymList.push(key, ...values.filter((v) => v !== word));\r\n      }\r\n    }\r\n\r\n    return [...new Set(synonymList)];\r\n  }\r\n\r\n  /**\r\n   * Calculate relevance score for a match\r\n   */\r\n  private calculateRelevance(query: string, target: string, distance: number): number {\r\n    const maxLength = Math.max(query.length, target.length);\r\n    const similarity = 1 - distance / maxLength;\r\n\r\n    // Boost score for exact matches\r\n    if (distance === 0) return 1.0;\r\n\r\n    // Boost score for common words\r\n    if (this.commonWords.has(target.toLowerCase())) {\r\n      return similarity * 1.2;\r\n    }\r\n\r\n    return similarity;\r\n  }\r\n\r\n  /**\r\n   * Search function with fuzzy matching\r\n   */\r\n  search<TItem extends Record<string, any>>(\r\n    items: TItem[],\r\n    query: string,\r\n    searchFields: (keyof TItem)[],\r\n  ): SearchResult<TItem> {\r\n    const startTime = Date.now();\r\n    const normalizedQuery = this.normalizeQuery(query);\r\n\r\n    // Check cache first\r\n    if (this.config.cacheEnabled) {\r\n      const cached = this.getCachedResult(normalizedQuery);\r\n      if (cached) {\r\n        this.metrics.cacheHitRate =\r\n          (this.metrics.cacheHitRate * this.metrics.totalSearches + 1) /\r\n          (this.metrics.totalSearches + 1);\r\n        this.updateMetrics(Date.now() - startTime);\r\n        return cached;\r\n      }\r\n    }\r\n\r\n    if (normalizedQuery.length < this.config.minQueryLength) {\r\n      const emptyResult: SearchResult<TItem> = {\r\n        items: items.slice(0, this.config.maxSuggestions),\r\n        query: normalizedQuery,\r\n        suggestions: [],\r\n        searchTime: Date.now() - startTime,\r\n        total: items.length,\r\n        typosCorrected: false,\r\n      };\r\n      return emptyResult;\r\n    }\r\n\r\n    const phoneticQuery = this.phoneticTransform(normalizedQuery);\r\n    const synonyms = this.findSynonyms(normalizedQuery);\r\n    const maxDistance = this.getMaxTypoDistance(normalizedQuery.length);\r\n\r\n    const matches: Array<{ item: TItem; score: number; field: string }> = [];\r\n\r\n    for (const item of items) {\r\n      for (const field of searchFields) {\r\n        const fieldValue = String(item[field]).toLowerCase();\r\n        const phoneticValue = this.phoneticTransform(fieldValue);\r\n\r\n        // Direct match\r\n        let distance = this.levenshteinDistance(normalizedQuery, fieldValue);\r\n        let score = this.calculateRelevance(normalizedQuery, fieldValue, distance);\r\n\r\n        // Phonetic match\r\n        const phoneticDistance = this.levenshteinDistance(phoneticQuery, phoneticValue);\r\n        const phoneticScore = this.calculateRelevance(\r\n          phoneticQuery,\r\n          phoneticValue,\r\n          phoneticDistance,\r\n        );\r\n\r\n        if (phoneticScore > score) {\r\n          distance = phoneticDistance;\r\n          score = phoneticScore;\r\n        }\r\n\r\n        // Synonym match\r\n        for (const synonym of synonyms) {\r\n          const synonymDistance = this.levenshteinDistance(synonym, fieldValue);\r\n          const synonymScore = this.calculateRelevance(synonym, fieldValue, synonymDistance);\r\n\r\n          if (synonymScore > score) {\r\n            distance = synonymDistance;\r\n            score = synonymScore;\r\n          }\r\n        }\r\n\r\n        // Partial match (contains)\r\n        if (fieldValue.includes(normalizedQuery)) {\r\n          score = Math.max(score, 0.8);\r\n        }\r\n\r\n        if (distance <= maxDistance || score > 0.3) {\r\n          matches.push({ item, score, field: String(field) });\r\n        }\r\n      }\r\n    }\r\n\r\n    // Sort by score and remove duplicates\r\n    const uniqueMatches = Array.from(new Map(matches.map((m) => [m.item, m])).values()).sort(\r\n      (a, b) => b.score - a.score,\r\n    );\r\n\r\n    const resultItems = uniqueMatches.slice(0, this.config.maxSuggestions).map((m) => m.item);\r\n    const suggestions = this.generateSuggestions(normalizedQuery, uniqueMatches);\r\n\r\n    const result: SearchResult<TItem> = {\r\n      items: resultItems,\r\n      query: normalizedQuery,\r\n      suggestions,\r\n      searchTime: Date.now() - startTime,\r\n      total: uniqueMatches.length,\r\n      typosCorrected: suggestions.length > 0,\r\n    };\r\n\r\n    // Cache result\r\n    if (this.config.cacheEnabled) {\r\n      this.cacheResult(normalizedQuery, result);\r\n    }\r\n\r\n    this.updateMetrics(result.searchTime);\r\n    if (result.typosCorrected) {\r\n      this.metrics.typoCorrections++;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  private getMaxTypoDistance(queryLength: number): number {\r\n    if (queryLength <= 4) return 1;\r\n    if (queryLength <= 6) return 2;\r\n    return 3;\r\n  }\r\n\r\n  private generateSuggestions<TItem>(\r\n    query: string,\r\n    matches: Array<{ item: TItem; score: number; field: string }>,\r\n  ): string[] {\r\n    // Extract unique suggestions from field values\r\n    const suggestions = new Set<string>();\r\n\r\n    for (const match of matches.slice(0, this.config.maxSuggestions)) {\r\n      if (match.score < 1.0) {\r\n        // Only suggest if not exact match\r\n        const fieldValue = String((match.item as any)[match.field]);\r\n        if (fieldValue.toLowerCase() !== query) {\r\n          suggestions.add(fieldValue);\r\n        }\r\n      }\r\n    }\r\n\r\n    return Array.from(suggestions).slice(0, this.config.maxSuggestions);\r\n  }\r\n\r\n  private getCachedResult<TItem>(query: string): SearchResult<TItem> | null {\r\n    const cached = this.cache.get(query);\r\n    if (!cached) return null;\r\n\r\n    const isExpired = Date.now() - cached.timestamp > this.config.cacheTimeout;\r\n    if (isExpired) {\r\n      this.cache.delete(query);\r\n      return null;\r\n    }\r\n\r\n    return cached.result;\r\n  }\r\n\r\n  private cacheResult<TItem>(query: string, result: SearchResult<TItem>): void {\r\n    this.cache.set(query, {\r\n      result,\r\n      timestamp: Date.now(),\r\n    });\r\n\r\n    // Cleanup old cache entries\r\n    if (this.cache.size > 1000) {\r\n      const entries = Array.from(this.cache.entries());\r\n      entries.sort((a, b) => a[1].timestamp - b[1].timestamp);\r\n      entries.slice(0, 500).forEach(([key]) => this.cache.delete(key));\r\n    }\r\n  }\r\n\r\n  private updateMetrics(searchTime: number): void {\r\n    this.metrics.totalSearches++;\r\n    this.metrics.averageSearchTime =\r\n      (this.metrics.averageSearchTime * (this.metrics.totalSearches - 1) + searchTime) /\r\n      this.metrics.totalSearches;\r\n  }\r\n\r\n  /**\r\n   * Get search statistics\r\n   */\r\n  getMetrics(): SearchMetrics {\r\n    return { ...this.metrics };\r\n  }\r\n\r\n  /**\r\n   * Clear search cache\r\n   */\r\n  clearCache(): void {\r\n    this.cache.clear();\r\n  }\r\n\r\n  /**\r\n   * Update configuration\r\n   */\r\n  updateConfig(newConfig: Partial<SearchConfig>): void {\r\n    this.config = { ...this.config, ...newConfig };\r\n  }\r\n}\r\n"]}