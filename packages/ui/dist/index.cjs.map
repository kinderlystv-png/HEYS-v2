{"version":3,"sources":["../src/components/Button/Button.tsx","../src/security/index.tsx"],"names":["Fragment","jsx","jsxs","Button","variant","size","loading","children","className","disabled","props","baseClasses","variantClasses","sizeClasses","classes","defaultValidator","SecurityError","ValidationSchemas","React","useCallback","useMemo","SecureInput","value","onChange","type","placeholder","required","maxLength","sanitize","validateOnChange","testId","handleChange","event","newValue","inputType","validation","SecureContent","content","allowHtml","sanitizedContent","SecureForm","onSubmit","validationSchema","handleSubmit","formData","data","key","SecureUserProfile","user","onUpdate","editable","isEditing","setIsEditing","setFormData","handleSave","email","prev","username","bio","SecureSearch","onSearch","debounceMs","query","setQuery","results","setResults","isLoading","setIsLoading","timeoutId","searchResults","error","result","index"],"mappings":"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","sourcesContent":["import React from 'react';\n\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';\n  size?: 'sm' | 'md' | 'lg';\n  loading?: boolean;\n  children: React.ReactNode;\n}\n\nexport const Button: React.FC<ButtonProps> = ({\n  variant = 'primary',\n  size = 'md',\n  loading = false,\n  children,\n  className = '',\n  disabled,\n  ...props\n}) => {\n  const baseClasses =\n    'inline-flex items-center justify-center rounded-md font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none';\n\n  const variantClasses = {\n    primary: 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500',\n    secondary: 'bg-gray-600 text-white hover:bg-gray-700 focus:ring-gray-500',\n    outline: 'border border-gray-300 bg-transparent hover:bg-gray-50 focus:ring-gray-500',\n    ghost: 'bg-transparent hover:bg-gray-100 focus:ring-gray-500',\n  };\n\n  const sizeClasses = {\n    sm: 'px-3 py-1.5 text-sm',\n    md: 'px-4 py-2 text-base',\n    lg: 'px-6 py-3 text-lg',\n  };\n\n  const classes = [baseClasses, variantClasses[variant], sizeClasses[size], className]\n    .filter(Boolean)\n    .join(' ');\n\n  return (\n    <button className={classes} disabled={disabled || loading} {...props}>\n      {loading ? (\n        <>\n          <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\">\n            <circle\n              cx=\"12\"\n              cy=\"12\"\n              r=\"10\"\n              stroke=\"currentColor\"\n              strokeWidth=\"4\"\n              className=\"opacity-25\"\n            />\n            <path\n              fill=\"currentColor\"\n              d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n              className=\"opacity-75\"\n            />\n          </svg>\n          Loading...\n        </>\n      ) : (\n        children\n      )}\n    </button>\n  );\n};\n","/**\r\n * HEYS UI Security Integration\r\n * Security-enhanced UI components with validation and sanitization\r\n *\r\n * @author HEYS Team\r\n * @version 1.4.0\r\n * @created 2025-01-31\r\n */\r\n\r\nimport { defaultValidator, SecurityError, ValidationSchemas } from '@heys/shared';\r\nimport React, { useCallback, useMemo } from 'react';\r\n\r\n/**\r\n * Security-enhanced form input component\r\n */\r\nexport interface SecureInputProps {\r\n  value: string;\r\n  onChange: (value: string) => void;\r\n  type?: 'text' | 'email' | 'url' | 'password';\r\n  placeholder?: string;\r\n  required?: boolean;\r\n  maxLength?: number;\r\n  sanitize?: boolean;\r\n  validateOnChange?: boolean;\r\n  className?: string;\r\n  'data-testid'?: string;\r\n}\r\n\r\nexport const SecureInput: React.FC<SecureInputProps> = ({\r\n  value,\r\n  onChange,\r\n  type = 'text',\r\n  placeholder,\r\n  required = false,\r\n  maxLength,\r\n  sanitize = true,\r\n  validateOnChange = true,\r\n  className,\r\n  'data-testid': testId,\r\n}) => {\r\n  const handleChange = useCallback(\r\n    (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      let newValue = event.target.value;\r\n\r\n      if (validateOnChange) {\r\n        // Validate input based on type\r\n        let inputType: 'text' | 'email' | 'password' | 'html' | 'filename' = 'text';\r\n        if (type === 'email') inputType = 'email';\r\n        else if (type === 'password') inputType = 'password';\r\n\r\n        const validation = defaultValidator.validateInput(newValue, inputType, {\r\n          required,\r\n          sanitize,\r\n        });\r\n\r\n        if (!validation.isValid && required) {\r\n          // Don't update if validation fails for required fields\r\n          return;\r\n        }\r\n\r\n        newValue = (validation.sanitized as string) || newValue;\r\n      }\r\n\r\n      onChange(newValue);\r\n    },\r\n    [onChange, type, required, maxLength, sanitize, validateOnChange],\r\n  );\r\n\r\n  return (\r\n    <input\r\n      type={type}\r\n      value={value}\r\n      onChange={handleChange}\r\n      placeholder={placeholder}\r\n      maxLength={maxLength}\r\n      required={required}\r\n      className={className}\r\n      data-testid={testId}\r\n    />\r\n  );\r\n};\r\n\r\n/**\r\n * Security-enhanced content display component\r\n */\r\nexport interface SecureContentProps {\r\n  content: string;\r\n  allowHtml?: boolean;\r\n  maxLength?: number;\r\n  className?: string;\r\n  'data-testid'?: string;\r\n}\r\n\r\nexport const SecureContent: React.FC<SecureContentProps> = ({\r\n  content,\r\n  allowHtml = false,\r\n  maxLength,\r\n  className,\r\n  'data-testid': testId,\r\n}) => {\r\n  const sanitizedContent = useMemo(() => {\r\n    const validation = defaultValidator.validateInput(content, 'html', {\r\n      sanitize: true,\r\n    });\r\n\r\n    return (validation.sanitized as string) || content;\r\n  }, [content, maxLength]);\r\n\r\n  if (allowHtml) {\r\n    return (\r\n      <div\r\n        className={className}\r\n        data-testid={testId}\r\n        dangerouslySetInnerHTML={{ __html: sanitizedContent }}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={className} data-testid={testId}>\r\n      {sanitizedContent}\r\n    </div>\r\n  );\r\n};\r\n\r\n/**\r\n * Security-enhanced form component\r\n */\r\nexport interface SecureFormProps {\r\n  onSubmit: (data: Record<string, any>) => Promise<void>;\r\n  children: React.ReactNode;\r\n  validationSchema?: any;\r\n  className?: string;\r\n  'data-testid'?: string;\r\n}\r\n\r\nexport const SecureForm: React.FC<SecureFormProps> = ({\r\n  onSubmit,\r\n  children,\r\n  validationSchema,\r\n  className,\r\n  'data-testid': testId,\r\n}) => {\r\n  const handleSubmit = useCallback(\r\n    async (event: React.FormEvent<HTMLFormElement>) => {\r\n      event.preventDefault();\r\n\r\n      const formData = new FormData(event.currentTarget);\r\n      const data: Record<string, any> = {};\r\n\r\n      // Extract form data\r\n      for (const [key, value] of formData.entries()) {\r\n        data[key] = value;\r\n      }\r\n\r\n      // Validate if schema provided\r\n      if (validationSchema) {\r\n        const validation = await defaultValidator.validateSchema(data, validationSchema, {\r\n          sanitize: true,\r\n          strictMode: true,\r\n        });\r\n\r\n        if (!validation.isValid) {\r\n          throw new SecurityError('Form validation failed', validation.errors);\r\n        }\r\n\r\n        // Use sanitized data\r\n        Object.assign(data, validation.sanitized || {});\r\n      }\r\n\r\n      await onSubmit(data);\r\n    },\r\n    [onSubmit, validationSchema],\r\n  );\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className={className} data-testid={testId}>\r\n      {children}\r\n    </form>\r\n  );\r\n};\r\n\r\n/**\r\n * Security-enhanced user profile component\r\n */\r\nexport interface SecureUserProfileProps {\r\n  user: {\r\n    id: string;\r\n    email: string;\r\n    username: string;\r\n    avatar?: string;\r\n    bio?: string;\r\n  };\r\n  onUpdate?: (user: any) => Promise<void>;\r\n  editable?: boolean;\r\n  className?: string;\r\n}\r\n\r\nexport const SecureUserProfile: React.FC<SecureUserProfileProps> = ({\r\n  user,\r\n  onUpdate,\r\n  editable = false,\r\n  className,\r\n}) => {\r\n  const [isEditing, setIsEditing] = React.useState(false);\r\n  const [formData, setFormData] = React.useState(user);\r\n\r\n  const handleSave = useCallback(async () => {\r\n    if (!onUpdate) return;\r\n\r\n    // Validate user data\r\n    const validation = await defaultValidator.validateSchema(formData, ValidationSchemas.user, {\r\n      sanitize: true,\r\n      strictMode: true,\r\n    });\r\n\r\n    if (!validation.isValid) {\r\n      throw new SecurityError('User profile validation failed', validation.errors);\r\n    }\r\n\r\n    await onUpdate(validation.sanitized || formData);\r\n    setIsEditing(false);\r\n  }, [formData, onUpdate]);\r\n\r\n  if (!editable || !isEditing) {\r\n    return (\r\n      <div className={className} data-testid=\"user-profile\">\r\n        <div data-testid=\"user-email\">\r\n          <SecureContent content={user.email} />\r\n        </div>\r\n        <div data-testid=\"user-username\">\r\n          <SecureContent content={user.username} />\r\n        </div>\r\n        {user.bio && (\r\n          <div data-testid=\"user-bio\">\r\n            <SecureContent content={user.bio} maxLength={500} />\r\n          </div>\r\n        )}\r\n        {editable && (\r\n          <button onClick={() => setIsEditing(true)} data-testid=\"edit-profile-button\">\r\n            Edit Profile\r\n          </button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={className} data-testid=\"user-profile-edit\">\r\n      <SecureForm\r\n        onSubmit={handleSave}\r\n        validationSchema={ValidationSchemas.user}\r\n        data-testid=\"profile-form\"\r\n      >\r\n        <SecureInput\r\n          value={formData.email}\r\n          onChange={(email) => setFormData((prev) => ({ ...prev, email }))}\r\n          type=\"email\"\r\n          placeholder=\"Email\"\r\n          required\r\n          data-testid=\"email-input\"\r\n        />\r\n        <SecureInput\r\n          value={formData.username}\r\n          onChange={(username) => setFormData((prev) => ({ ...prev, username }))}\r\n          type=\"text\"\r\n          placeholder=\"Username\"\r\n          required\r\n          maxLength={50}\r\n          data-testid=\"username-input\"\r\n        />\r\n        <SecureInput\r\n          value={formData.bio || ''}\r\n          onChange={(bio) => setFormData((prev) => ({ ...prev, bio }))}\r\n          type=\"text\"\r\n          placeholder=\"Bio\"\r\n          maxLength={500}\r\n          data-testid=\"bio-input\"\r\n        />\r\n        <button type=\"submit\" data-testid=\"save-button\">\r\n          Save\r\n        </button>\r\n        <button type=\"button\" onClick={() => setIsEditing(false)} data-testid=\"cancel-button\">\r\n          Cancel\r\n        </button>\r\n      </SecureForm>\r\n    </div>\r\n  );\r\n};\r\n\r\n/**\r\n * Security-enhanced search component\r\n */\r\nexport interface SecureSearchProps {\r\n  onSearch: (query: string) => Promise<any[]>;\r\n  placeholder?: string;\r\n  debounceMs?: number;\r\n  maxLength?: number;\r\n  className?: string;\r\n}\r\n\r\nexport const SecureSearch: React.FC<SecureSearchProps> = ({\r\n  onSearch,\r\n  placeholder = 'Search...',\r\n  debounceMs = 300,\r\n  maxLength = 100,\r\n  className,\r\n}) => {\r\n  const [query, setQuery] = React.useState('');\r\n  const [results, setResults] = React.useState<any[]>([]);\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n\r\n  // Debounced search\r\n  React.useEffect(() => {\r\n    if (!query.trim()) {\r\n      setResults([]);\r\n      return;\r\n    }\r\n\r\n    const timeoutId = setTimeout(async () => {\r\n      setIsLoading(true);\r\n      try {\r\n        // Validate and sanitize search query\r\n        const validation = defaultValidator.validateInput(query, 'text', {\r\n          sanitize: true,\r\n          required: true,\r\n        });\r\n\r\n        if (validation.isValid) {\r\n          const searchResults = await onSearch((validation.sanitized as string) || query);\r\n          setResults(searchResults);\r\n        }\r\n      } catch (error) {\r\n        console.error('Search error:', error);\r\n        setResults([]);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    }, debounceMs);\r\n\r\n    return () => clearTimeout(timeoutId);\r\n  }, [query, onSearch, debounceMs, maxLength]);\r\n\r\n  return (\r\n    <div className={className} data-testid=\"secure-search\">\r\n      <SecureInput\r\n        value={query}\r\n        onChange={setQuery}\r\n        type=\"text\"\r\n        placeholder={placeholder}\r\n        maxLength={maxLength}\r\n        data-testid=\"search-input\"\r\n      />\r\n      {isLoading && <div data-testid=\"search-loading\">Loading...</div>}\r\n      <div data-testid=\"search-results\">\r\n        {results.map((result, index) => (\r\n          <div key={result.id || index} data-testid={`search-result-${index}`}>\r\n            <SecureContent content={result.title || result.name || String(result)} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"]}