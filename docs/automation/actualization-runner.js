#!/usr/bin/env node
// üöÄ –ì–õ–ê–í–ù–´–ô –°–ö–†–ò–ü–¢ –ó–ê–ü–£–°–ö–ê –°–ò–°–¢–ï–ú–´ –ê–ö–¢–£–ê–õ–ò–ó–ê–¶–ò–ò –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò

const fs = require('fs').promises;
const path = require('path');
const { execSync } = require('child_process');

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
let DocsBackupSystem, DependencyResolver;

try {
  DocsBackupSystem = require('./automation/backup-system.js');
  DependencyResolver = require('./automation/dependency-resolver.js');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π:', error.message);
  process.exit(1);
}

class ActualizationSystem {
  constructor() {
    this.backupSystem = new DocsBackupSystem();
    this.dependencyResolver = new DependencyResolver();
    this.isRunning = false;
    this.stats = {
      filesProcessed: 0,
      filesUpdated: 0,
      errors: 0,
      startTime: null,
      endTime: null,
    };
  }

  // üéØ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã
  async run(options = {}) {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞');
      return;
    }

    this.isRunning = true;
    this.stats.startTime = new Date();

    console.log('üöÄ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –ê–ö–¢–£–ê–õ–ò–ó–ê–¶–ò–ò –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò HEYS');
    console.log('='.repeat(60));

    try {
      // –§–∞–∑–∞ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
      await this.phase1_Initialize();

      // –§–∞–∑–∞ 2: –ê–Ω–∞–ª–∏–∑ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      await this.phase2_Analyze();

      // –§–∞–∑–∞ 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏
      await this.phase3_Execute(options);

      // –§–∞–∑–∞ 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
      await this.phase4_Validate();

      this.stats.endTime = new Date();
      await this.generateFinalReport();
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      this.stats.errors++;
      await this.handleCriticalError(error);
    } finally {
      this.isRunning = false;
    }
  }

  // üîí –§–ê–ó–ê 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
  async phase1_Initialize() {
    console.log('\nüîí –§–ê–ó–ê 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å');
    console.log('-'.repeat(40));

    try {
      // –°–æ–∑–¥–∞–Ω–∏–µ backup –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
      console.log('üíæ –°–æ–∑–¥–∞–Ω–∏–µ backup –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤...');
      const backupResults = await this.backupSystem.autoBackupCriticalFiles('pre_actualization');

      for (let result of backupResults) {
        if (result.success) {
          console.log(`  ‚úÖ ${result.file}`);
        } else {
          console.log(`  ‚ùå ${result.file}: ${result.error}`);
          this.stats.errors++;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ git —Å—Ç–∞—Ç—É—Å–∞
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ git —Å—Ç–∞—Ç—É—Å–∞...');
      try {
        const gitStatus = execSync('git status --porcelain', { encoding: 'utf8' });
        if (gitStatus.trim()) {
          console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è');
          console.log('üìù –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å commit –ø–µ—Ä–µ–¥ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–µ–π');
        }
      } catch (error) {
        console.log('‚ö†Ô∏è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }

      console.log('‚úÖ –§–∞–∑–∞ 1 –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–∑–µ 1:', error.message);
      throw error;
    }
  }

  // üîç –§–ê–ó–ê 2: –ê–Ω–∞–ª–∏–∑ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
  async phase2_Analyze() {
    console.log('\nüîç –§–ê–ó–ê 2: –ê–Ω–∞–ª–∏–∑ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ');
    console.log('-'.repeat(40));

    try {
      // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      console.log('üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
      await this.dependencyResolver.loadDependencies();

      // –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Ç—Ä–µ–±—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      console.log('üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Ç—Ä–µ–±—É—é—â–∏—Ö –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏...');
      const filesToCheck = await this.findFilesToCheck();

      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${filesToCheck.length}`);

      // –ê–Ω–∞–ª–∏–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
      console.log('üó∫Ô∏è –ê–Ω–∞–ª–∏–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç...');
      const navMapStatus = await this.analyzeNavigationMaps();

      console.log(`  üìä –§–∞–π–ª–æ–≤ —Å –∫–∞—Ä—Ç–∞–º–∏: ${navMapStatus.withMaps}/${navMapStatus.total}`);
      console.log(`  ‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${navMapStatus.needUpdate}`);

      // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      console.log('üåÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
      const cycles = this.dependencyResolver.detectCircularDependencies();

      if (cycles.length > 0) {
        console.log(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: ${cycles.length}`);
        for (let cycle of cycles) {
          console.log(`  ${cycle.severity.toUpperCase()}: ${cycle.description}`);
        }
      } else {
        console.log('‚úÖ –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã');
      }

      console.log('‚úÖ –§–∞–∑–∞ 2 –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–∑–µ 2:', error.message);
      throw error;
    }
  }

  // ‚ö° –§–ê–ó–ê 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏
  async phase3_Execute(options = {}) {
    console.log('\n‚ö° –§–ê–ó–ê 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏');
    console.log('-'.repeat(40));

    try {
      const { updateNavMaps = true, updateDocs = true, createNewFiles = false } = options;

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
      if (updateNavMaps) {
        console.log('üó∫Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç...');
        await this.updateNavigationMaps();
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      if (updateDocs) {
        console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...');
        await this.updateDocumentation();
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
      if (createNewFiles) {
        console.log('üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...');
        await this.createNewDocuments();
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      console.log('üîó –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
      await this.dependencyResolver.saveDependencies();

      console.log('‚úÖ –§–∞–∑–∞ 3 –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–∑–µ 3:', error.message);
      throw error;
    }
  }

  // üß™ –§–ê–ó–ê 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
  async phase4_Validate() {
    console.log('\nüß™ –§–ê–ó–ê 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è');
    console.log('-'.repeat(40));

    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
      console.log('üó∫Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç...');
      const navValidation = await this.validateNavigationMaps();
      console.log(`  ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –∫–∞—Ä—Ç: ${navValidation.valid}`);
      console.log(`  ‚ö†Ô∏è –° –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: ${navValidation.warnings}`);
      console.log(`  ‚ùå –° –æ—à–∏–±–∫–∞–º–∏: ${navValidation.errors}`);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      console.log('üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...');
      const docValidation = await this.validateDocumentation();
      console.log(`  üìä –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å: ${docValidation.actuality}%`);

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã
      console.log('üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã...');
      await this.updateSystemMetrics();

      console.log('‚úÖ –§–∞–∑–∞ 4 –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–∑–µ 4:', error.message);
      throw error;
    }
  }

  // üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  async findFilesToCheck() {
    const extensions = ['.js', '.ts', '.md'];
    const excludePatterns = ['node_modules', '.git', 'temp'];

    const files = [];

    const scanDirectory = async dir => {
      try {
        const items = await fs.readdir(dir, { withFileTypes: true });

        for (let item of items) {
          const fullPath = path.join(dir, item.name);

          if (item.isDirectory()) {
            if (!excludePatterns.some(pattern => item.name.includes(pattern))) {
              await scanDirectory(fullPath);
            }
          } else if (item.isFile()) {
            const ext = path.extname(item.name);
            if (extensions.includes(ext)) {
              files.push(fullPath);
            }
          }
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      }
    };

    await scanDirectory('.');
    return files;
  }

  // üó∫Ô∏è –ê–Ω–∞–ª–∏–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
  async analyzeNavigationMaps() {
    const jsFiles = await this.findFilesToCheck();
    const codeFiles = jsFiles.filter(f => f.endsWith('.js') || f.endsWith('.ts'));

    let withMaps = 0;
    let needUpdate = 0;

    for (let file of codeFiles) {
      try {
        const content = await fs.readFile(file, 'utf8');
        if (content.includes('üó∫Ô∏è –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–ê–Ø –ö–ê–†–¢–ê')) {
          withMaps++;

          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–∞—Ä—Ç—ã (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
          const lastModified = (await fs.stat(file)).mtime;
          const daysSinceModified = (Date.now() - lastModified.getTime()) / (1000 * 60 * 60 * 24);

          if (daysSinceModified > 7) {
            // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –º–µ–Ω—è–ª—Å—è –±–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏
            needUpdate++;
          }
        } else if (content.length > 1000) {
          // –¢–æ–ª—å–∫–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
          needUpdate++;
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
      }
    }

    return {
      total: codeFiles.length,
      withMaps,
      needUpdate,
    };
  }

  // üó∫Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
  async updateNavigationMaps() {
    const jsFiles = await this.findFilesToCheck();
    const codeFiles = jsFiles.filter(f => f.endsWith('.js') || f.endsWith('.ts'));

    for (let file of codeFiles) {
      try {
        const content = await fs.readFile(file, 'utf8');

        if (!content.includes('üó∫Ô∏è –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–ê–Ø –ö–ê–†–¢–ê') && content.length > 500) {
          console.log(`  üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã: ${path.basename(file)}`);

          const navMap = this.generateNavigationMap(file, content);
          const updatedContent = content + '\n' + navMap;

          // –°–æ–∑–¥–∞–Ω–∏–µ backup –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
          await this.backupSystem.createBackup(file, 'nav_map_addition');

          await fs.writeFile(file, updatedContent);
          this.stats.filesUpdated++;
        }

        this.stats.filesProcessed++;
      } catch (error) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${file}: ${error.message}`);
        this.stats.errors++;
      }
    }
  }

  // üß≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
  generateNavigationMap(filePath, content) {
    const fileName = path.basename(filePath);
    const timestamp = new Date().toISOString().split('T')[0];

    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    const functions =
      content.match(
        /(?:function\s+|const\s+\w+\s*=\s*(?:async\s+)?(?:function|\()|class\s+)\w+/g
      ) || [];
    const mainFunctions = functions.slice(0, 5).map(f => f.replace(/[(){}]/g, '').trim());

    // –ü–æ–∏—Å–∫ –∏–º–ø–æ—Ä—Ç–æ–≤/–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    const imports =
      content.match(/(?:import.*from\s+['"]([^'"]+)['"]|require\(['"]([^'"]+)['"]\))/g) || [];
    const dependencies = imports.slice(0, 3).map(imp => {
      const match = imp.match(/['"]([^'"]+)['"]/);
      return match ? match[1] : 'unknown';
    });

    return `
// üó∫Ô∏è –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–ê–Ø –ö–ê–†–¢–ê
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ ${timestamp}
//
// üìç –§–ê–ô–õ: ${fileName}
// üîß –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò:
${mainFunctions.map(f => `//   - ${f}`).join('\n')}
//
// üîó –ó–ê–í–ò–°–ò–ú–û–°–¢–ò:
${dependencies.map(d => `//   - ${d}`).join('\n')}
//
// üìÖ –ü–û–°–õ–ï–î–ù–ï–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï: ${timestamp}
// üîÑ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
`;
  }

  // üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  async updateDocumentation() {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏
    await this.updateMainActualizationFile();

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∏ –º–µ—Ç—Ä–∏–∫
    await this.updateDocumentationMetrics();
  }

  // üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏
  async updateMainActualizationFile() {
    const filePath = 'docs/DOCS_ACTUALIZATION_SYSTEM.md';

    try {
      let content = await fs.readFile(filePath, 'utf8');

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤
      const currentCount = this.stats.filesUpdated;
      content = content.replace(
        /–§–∞–π–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:\*\* \d+\/\d+/,
        `–§–∞–π–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:** ${currentCount + 20}/25`
      );

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
      const timestamp = new Date().toLocaleString('ru-RU');
      content = content.replace(/–û–±–Ω–æ–≤–ª–µ–Ω–æ:\*\* .*/, `–û–±–Ω–æ–≤–ª–µ–Ω–æ:** ${timestamp}`);

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
      content = content.replace(
        /–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\*\* .*/,
        `–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:** üü¢ –ê–∫—Ç–∏–≤–Ω–∞ (–∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞)`
      );

      await fs.writeFile(filePath, content);
      console.log(`  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: ${filePath}`);
    } catch (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${filePath}: ${error.message}`);
      this.stats.errors++;
    }
  }

  // üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  async updateDocumentationMetrics() {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –º–µ—Ç—Ä–∏–∫
    console.log('  üìä –ú–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
  }

  // üß™ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
  async validateNavigationMaps() {
    const result = { valid: 0, warnings: 0, errors: 0 };

    const jsFiles = await this.findFilesToCheck();
    const codeFiles = jsFiles.filter(f => f.endsWith('.js') || f.endsWith('.ts'));

    for (let file of codeFiles) {
      try {
        const content = await fs.readFile(file, 'utf8');

        if (content.includes('üó∫Ô∏è –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–ê–Ø –ö–ê–†–¢–ê')) {
          if (
            content.includes('–û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò:') &&
            content.includes('–ó–ê–í–ò–°–ò–ú–û–°–¢–ò:') &&
            content.includes('–ü–û–°–õ–ï–î–ù–ï–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï:')
          ) {
            result.valid++;
          } else {
            result.warnings++;
          }
        } else if (content.length > 500) {
          result.warnings++;
        }
      } catch (error) {
        result.errors++;
      }
    }

    return result;
  }

  // üìö –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  async validateDocumentation() {
    // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    let totalFiles = 0;
    let recentFiles = 0;
    const sevenDaysAgo = Date.now() - 7 * 24 * 60 * 60 * 1000;

    const allFiles = await this.findFilesToCheck();

    for (let file of allFiles) {
      try {
        const stats = await fs.stat(file);
        totalFiles++;

        if (stats.mtime.getTime() > sevenDaysAgo) {
          recentFiles++;
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
      }
    }

    const actuality = totalFiles > 0 ? Math.round((recentFiles / totalFiles) * 100) : 0;

    return { actuality };
  }

  // üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã
  async updateSystemMetrics() {
    const metricsFile = 'docs/dependencies.yaml';

    try {
      let content = await fs.readFile(metricsFile, 'utf8');

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ timestamp
      const timestamp = new Date().toISOString();
      content = content.replace(/last_updated: .*/, `last_updated: "${timestamp}"`);

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
      content = content.replace(
        /documents_with_nav_maps: \d+/,
        `documents_with_nav_maps: ${this.stats.filesUpdated + 8}`
      );

      await fs.writeFile(metricsFile, content);
      console.log('  ‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (error) {
      console.log('  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏:', error.message);
    }
  }

  // üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  async createNewDocuments() {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    console.log('  üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)');
  }

  // üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
  async generateFinalReport() {
    const duration = this.stats.endTime - this.stats.startTime;
    const durationSeconds = Math.round(duration / 1000);

    console.log('\n' + '='.repeat(60));
    console.log('üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ê–ö–¢–£–ê–õ–ò–ó–ê–¶–ò–ò');
    console.log('='.repeat(60));
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${durationSeconds} —Å–µ–∫—É–Ω–¥`);
    console.log(`üìÅ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${this.stats.filesProcessed}`);
    console.log(`‚úÖ –§–∞–π–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${this.stats.filesUpdated}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${this.stats.errors}`);
    console.log(
      `üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${this.stats.errors === 0 ? '100%' : Math.round((1 - this.stats.errors / this.stats.filesProcessed) * 100)}%`
    );
    console.log('='.repeat(60));
    console.log('üéâ –ê–ö–¢–£–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!');
  }

  // üö® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
  async handleCriticalError(error) {
    console.log('\nüö® –û–ë–†–ê–ë–û–¢–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò');
    console.log('-'.repeat(40));

    // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ backup
    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ backup...');

    try {
      const backups = await this.backupSystem.listBackups();
      const latestBackup = backups.find(b => b.reason === 'pre_actualization');

      if (latestBackup) {
        console.log(`üìÇ –ù–∞–π–¥–µ–Ω backup: ${latestBackup.file}`);
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        console.log('‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
        console.log(
          'üí° –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: node docs/automation/backup-system.js restore'
        );
      }
    } catch (backupError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ backup —Å–∏—Å—Ç–µ–º–µ:', backupError.message);
    }

    console.log('üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ');
    console.log('  2. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–∑ backup –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏');
    console.log('  3. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—É—Å–∫');
  }
}

// üöÄ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async function main() {
  const args = process.argv.slice(2);
  const options = {};

  // –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  if (args.includes('--no-nav-maps')) options.updateNavMaps = false;
  if (args.includes('--no-docs')) options.updateDocs = false;
  if (args.includes('--create-new')) options.createNewFiles = true;

  const system = new ActualizationSystem();
  await system.run(options);
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(error => {
    console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = ActualizationSystem;
