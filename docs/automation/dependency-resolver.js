// üîó –°–ò–°–¢–ï–ú–ê –†–ê–ó–†–ï–®–ï–ù–ò–Ø –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑—è–º–∏ –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏

class DependencyResolver {
  constructor() {
    this.dependencyGraph = new Map();
    this.reverseDependencies = new Map();
    this.circularDependencies = [];
    this.dependencyFile = './docs/dependencies.yaml';
    this.loadDependencies();
  }

  // üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ YAML —Ñ–∞–π–ª–∞
  async loadDependencies() {
    try {
      const fs = require('fs').promises;
      const yaml = require('js-yaml');

      const yamlContent = await fs.readFile(this.dependencyFile, 'utf8');
      const data = yaml.load(yamlContent);

      this.buildDependencyGraph(data);
      console.log('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ YAML');
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:', error.message);
      this.initializeEmptyGraph();
    }
  }

  // üèóÔ∏è –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  buildDependencyGraph(data) {
    this.dependencyGraph.clear();
    this.reverseDependencies.clear();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if (data.core_documents) {
      for (let doc of data.core_documents) {
        this.addNode(doc.name, {
          type: doc.type,
          criticality: doc.criticality,
          dependencies: doc.dependencies || [],
          dependents: doc.dependents || [],
        });
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
    if (data.navigation_maps) {
      for (let map of data.navigation_maps) {
        this.addNode(map.name, {
          type: 'navigation_map',
          dependencies: map.dependencies || [],
          dependents: map.dependents || [],
          status: map.status,
        });
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ roadmaps
    if (data.roadmaps) {
      for (let roadmap of data.roadmaps) {
        this.addNode(roadmap.name, {
          type: roadmap.type,
          dependencies: roadmap.dependencies || [],
          dependents: roadmap.dependents || [],
          priority: roadmap.priority,
        });
      }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
    this.circularDependencies = data.circular_dependencies || [];
  }

  // ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–∑–ª–∞ –≤ –≥—Ä–∞—Ñ
  addNode(nodeName, nodeData) {
    this.dependencyGraph.set(nodeName, nodeData);

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    for (let dependency of nodeData.dependencies) {
      if (!this.reverseDependencies.has(dependency)) {
        this.reverseDependencies.set(dependency, []);
      }
      this.reverseDependencies.get(dependency).push(nodeName);
    }
  }

  // üîç –ü–æ–∏—Å–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Ñ–∞–π–ª–∞
  getDependencies(fileName, maxDepth = 3) {
    const visited = new Set();
    const dependencies = [];

    const traverse = (currentFile, depth) => {
      if (depth > maxDepth || visited.has(currentFile)) {
        return;
      }

      visited.add(currentFile);
      const nodeData = this.dependencyGraph.get(currentFile);

      if (nodeData && nodeData.dependencies) {
        for (let dep of nodeData.dependencies) {
          dependencies.push({
            file: dep,
            depth: depth,
            type: 'dependency',
          });
          traverse(dep, depth + 1);
        }
      }
    };

    traverse(fileName, 0);
    return dependencies;
  }

  // üîÑ –ü–æ–∏—Å–∫ –∑–∞–≤–∏—Å–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ (–∫—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
  getDependents(fileName, maxDepth = 3) {
    const visited = new Set();
    const dependents = [];

    const traverse = (currentFile, depth) => {
      if (depth > maxDepth || visited.has(currentFile)) {
        return;
      }

      visited.add(currentFile);
      const fileDependents = this.reverseDependencies.get(currentFile) || [];

      for (let dependent of fileDependents) {
        dependents.push({
          file: dependent,
          depth: depth,
          type: 'dependent',
        });
        traverse(dependent, depth + 1);
      }
    };

    traverse(fileName, 0);
    return dependents;
  }

  // üåÄ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  detectCircularDependencies() {
    const visited = new Set();
    const recursionStack = new Set();
    const cycles = [];

    const dfs = (node, path) => {
      if (recursionStack.has(node)) {
        // –ù–∞–π–¥–µ–Ω —Ü–∏–∫–ª
        const cycleStart = path.indexOf(node);
        const cycle = path.slice(cycleStart).concat([node]);
        cycles.push({
          cycle: cycle,
          severity: this.evaluateCycleSeverity(cycle),
          description: `–¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: ${cycle.join(' ‚Üí ')}`,
        });
        return;
      }

      if (visited.has(node)) {
        return;
      }

      visited.add(node);
      recursionStack.add(node);
      path.push(node);

      const nodeData = this.dependencyGraph.get(node);
      if (nodeData && nodeData.dependencies) {
        for (let dependency of nodeData.dependencies) {
          dfs(dependency, [...path]);
        }
      }

      recursionStack.delete(node);
      path.pop();
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —É–∑–ª–æ–≤
    for (let [nodeName] of this.dependencyGraph) {
      if (!visited.has(nodeName)) {
        dfs(nodeName, []);
      }
    }

    return cycles;
  }

  // ‚ö†Ô∏è –û—Ü–µ–Ω–∫–∞ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  evaluateCycleSeverity(cycle) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤ –≤ —Ü–∏–∫–ª–µ
    let hasCritical = false;
    let hasCore = false;

    for (let file of cycle) {
      const nodeData = this.dependencyGraph.get(file);
      if (nodeData) {
        if (nodeData.criticality === 'critical') {
          hasCritical = true;
        }
        if (nodeData.type === 'core' || nodeData.type === 'architecture') {
          hasCore = true;
        }
      }
    }

    if (hasCritical && hasCore) {
      return 'high';
    } else if (hasCore || cycle.length > 4) {
      return 'medium';
    } else {
      return 'low';
    }
  }

  // üìä –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  analyzeChangeImpact(changedFiles) {
    const impactAnalysis = {
      directly_affected: [],
      indirectly_affected: [],
      critical_path: [],
      recommendations: [],
    };

    for (let file of changedFiles) {
      // –ü—Ä—è–º–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ —Ñ–∞–π–ª—ã
      const dependents = this.getDependents(file, 2);
      impactAnalysis.directly_affected.push({
        source: file,
        affected: dependents,
      });

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–∏
      const nodeData = this.dependencyGraph.get(file);
      if (nodeData && (nodeData.criticality === 'critical' || nodeData.type === 'architecture')) {
        impactAnalysis.critical_path.push(file);
        impactAnalysis.recommendations.push(
          `‚ö†Ô∏è –§–∞–π–ª ${file} —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.`,
        );
      }

      // –ü–æ–∏—Å–∫ –∫–æ—Å–≤–µ–Ω–Ω–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤
      for (let dependent of dependents) {
        const secondLevelDependents = this.getDependents(dependent.file, 1);
        impactAnalysis.indirectly_affected.push(...secondLevelDependents);
      }
    }

    return impactAnalysis;
  }

  // üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  getFilesToUpdate(changedFiles) {
    const updateList = new Set();
    const priorities = { critical: 1, high: 2, medium: 3, low: 4 };

    for (let file of changedFiles) {
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
      const dependents = this.getDependents(file, 2);
      for (let dependent of dependents) {
        updateList.add(dependent.file);
      }

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è JS/TS —Ñ–∞–π–ª
      if (file.endsWith('.js') || file.endsWith('.ts')) {
        const navMaps = this.findNavigationMaps(file);
        navMaps.forEach((map) => updateList.add(map));
      }
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    return Array.from(updateList).sort((a, b) => {
      const aData = this.dependencyGraph.get(a);
      const bData = this.dependencyGraph.get(b);
      const aPriority = priorities[aData?.criticality] || 4;
      const bPriority = priorities[bData?.criticality] || 4;
      return aPriority - bPriority;
    });
  }

  // üó∫Ô∏è –ü–æ–∏—Å–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –¥–ª—è —Ñ–∞–π–ª–∞
  findNavigationMaps(fileName) {
    const navMaps = [];
    for (let [mapName, mapData] of this.dependencyGraph) {
      if (
        mapData.type === 'navigation_map' &&
        mapData.dependencies &&
        mapData.dependencies.includes(fileName)
      ) {
        navMaps.push(mapName);
      }
    }
    return navMaps;
  }

  // üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  async saveDependencies() {
    try {
      const fs = require('fs').promises;
      const yaml = require('js-yaml');

      const data = {
        version: '1.0.0',
        last_updated: new Date().toISOString(),
        system_status: 'active',

        core_documents: [],
        navigation_maps: [],
        roadmaps: [],
        circular_dependencies: this.circularDependencies,

        metrics: {
          total_documents: this.dependencyGraph.size,
          circular_dependencies_count: this.circularDependencies.length,
          last_full_validation: new Date().toISOString(),
        },
      };

      // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É YAML
      for (let [name, nodeData] of this.dependencyGraph) {
        const entry = {
          name: name,
          type: nodeData.type,
          dependencies: nodeData.dependencies,
          dependents: nodeData.dependents,
        };

        if (nodeData.criticality) entry.criticality = nodeData.criticality;
        if (nodeData.status) entry.status = nodeData.status;
        if (nodeData.priority) entry.priority = nodeData.priority;

        if (nodeData.type === 'navigation_map') {
          data.navigation_maps.push(entry);
        } else if (nodeData.type === 'implementation_plan') {
          data.roadmaps.push(entry);
        } else {
          data.core_documents.push(entry);
        }
      }

      const yamlContent = yaml.dump(data, {
        indent: 2,
        lineWidth: 100,
        noRefs: true,
      });

      await fs.writeFile(this.dependencyFile, yamlContent);
      console.log('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ YAML');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:', error);
    }
  }

  // üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∞
  initializeEmptyGraph() {
    this.dependencyGraph.clear();
    this.reverseDependencies.clear();
    this.circularDependencies = [];
    console.log('‚ö†Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
  }
}

// üåê –≠–∫—Å–ø–æ—Ä—Ç
if (typeof module !== 'undefined' && module.exports) {
  module.exports = DependencyResolver;
}

console.log('üîó –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
