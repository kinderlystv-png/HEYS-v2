// üîí –°–ò–°–¢–ï–ú–ê BACKUP –ò ROLLBACK –î–õ–Ø –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò HEYS
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ backup'–æ–≤ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

class DocsBackupSystem {
  constructor() {
    this.backupDir = './docs/backups';
    this.maxBackups = 10;
    this.criticalFiles = [
      'README.md',
      'HEYS Project Context.md',
      'docs/dependencies.yaml',
      'docs/DOCS_ACTUALIZATION_SYSTEM.md',
    ];
    this.initializeSystem();
  }

  // üìÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã backup'–æ–≤
  async initializeSystem() {
    const fs = require('fs').promises;
    const path = require('path');

    try {
      await fs.mkdir(this.backupDir, { recursive: true });
      console.log('üîí –°–∏—Å—Ç–µ–º–∞ backup –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ backup —Å–∏—Å—Ç–µ–º—ã:', error);
    }
  }

  // üíæ –°–æ–∑–¥–∞–Ω–∏–µ backup'–∞ —Ñ–∞–π–ª–∞
  async createBackup(filePath, reason = 'manual') {
    const fs = require('fs').promises;
    const path = require('path');

    try {
      const content = await fs.readFile(filePath, 'utf8');
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const fileName = path.basename(filePath);
      const backupPath = path.join(this.backupDir, `${fileName}.${timestamp}.${reason}.backup`);

      const backupData = {
        original_path: filePath,
        backup_time: new Date().toISOString(),
        reason: reason,
        content: content,
        file_size: content.length,
        checksum: this.calculateChecksum(content),
      };

      await fs.writeFile(backupPath, JSON.stringify(backupData, null, 2));
      console.log(`‚úÖ Backup —Å–æ–∑–¥–∞–Ω: ${backupPath}`);

      // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö backup'–æ–≤
      await this.cleanupOldBackups(fileName);

      return backupPath;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup –¥–ª—è ${filePath}:`, error);
      throw error;
    }
  }

  // üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ backup'–∞
  async restoreFromBackup(backupPath, targetPath = null) {
    const fs = require('fs').promises;

    try {
      const backupContent = await fs.readFile(backupPath, 'utf8');
      const backupData = JSON.parse(backupContent);

      const restorePath = targetPath || backupData.original_path;

      // –°–æ–∑–¥–∞–Ω–∏–µ backup —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
      await this.createBackup(restorePath, 'pre_restore');

      // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      await fs.writeFile(restorePath, backupData.content);

      console.log(`üîÑ –§–∞–π–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${restorePath}`);
      console.log(`üìÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç: ${backupData.backup_time}`);

      return {
        success: true,
        restored_path: restorePath,
        backup_time: backupData.backup_time,
        reason: backupData.reason,
      };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ ${backupPath}:`, error);
      throw error;
    }
  }

  // üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö backup'–æ–≤
  async cleanupOldBackups(fileName) {
    const fs = require('fs').promises;
    const path = require('path');

    try {
      const files = await fs.readdir(this.backupDir);
      const fileBackups = files
        .filter(f => f.startsWith(fileName))
        .map(f => ({
          name: f,
          path: path.join(this.backupDir, f),
          time: fs.stat(path.join(this.backupDir, f)).then(s => s.mtime),
        }));

      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
      for (let backup of fileBackups) {
        backup.time = await backup.time;
      }
      fileBackups.sort((a, b) => b.time - a.time);

      // –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö backup'–æ–≤
      if (fileBackups.length > this.maxBackups) {
        const toDelete = fileBackups.slice(this.maxBackups);
        for (let backup of toDelete) {
          await fs.unlink(backup.path);
          console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π backup: ${backup.name}`);
        }
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ backup'–æ–≤:", error);
    }
  }

  // üîç –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö backup'–æ–≤
  async listBackups(fileName = null) {
    const fs = require('fs').promises;
    const path = require('path');

    try {
      const files = await fs.readdir(this.backupDir);
      let backups = files.filter(f => f.endsWith('.backup'));

      if (fileName) {
        backups = backups.filter(f => f.startsWith(fileName));
      }

      const backupDetails = [];
      for (let backup of backups) {
        try {
          const content = await fs.readFile(path.join(this.backupDir, backup), 'utf8');
          const data = JSON.parse(content);
          backupDetails.push({
            file: backup,
            original_path: data.original_path,
            backup_time: data.backup_time,
            reason: data.reason,
            size: data.file_size,
          });
        } catch (e) {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å backup: ${backup}`);
        }
      }

      return backupDetails.sort((a, b) => new Date(b.backup_time) - new Date(a.backup_time));
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ backup'–æ–≤:", error);
      return [];
    }
  }

  // üî¢ –†–∞—Å—á–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
  calculateChecksum(content) {
    const crypto = require('crypto');
    return crypto.createHash('md5').update(content).digest('hex');
  }

  // üö® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π backup –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
  async autoBackupCriticalFiles(reason = 'auto_backup') {
    console.log('üîí –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ backup –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤...');

    const results = [];
    for (let filePath of this.criticalFiles) {
      try {
        const backupPath = await this.createBackup(filePath, reason);
        results.push({ file: filePath, backup: backupPath, success: true });
      } catch (error) {
        results.push({ file: filePath, error: error.message, success: false });
      }
    }

    console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π backup –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${results.length} —Ñ–∞–π–ª–æ–≤`);
    return results;
  }
}

// üåê –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏
if (typeof module !== 'undefined' && module.exports) {
  module.exports = DocsBackupSystem;
}

// üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã backup
if (typeof window !== 'undefined') {
  window.DocsBackupSystem = DocsBackupSystem;
}

console.log('üîí –°–∏—Å—Ç–µ–º–∞ backup –∏ rollback –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
