// üîç ENHANCED ERROR LOGGER DIAGNOSTIC SCRIPT
// –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

console.log('üîç ENHANCED ERROR LOGGER DIAGNOSTICS');
console.log('=====================================');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
const components = {
  EnhancedErrorLogger: typeof window.EnhancedErrorLogger !== 'undefined',
  'enhancedLogger (instance)': typeof window.enhancedLogger !== 'undefined',
  StackTraceAnalyzer: typeof window.StackTraceAnalyzer !== 'undefined',
  ErrorClassificationEngine: typeof window.ErrorClassificationEngine !== 'undefined',
  RealTimeErrorDashboard: typeof window.RealTimeErrorDashboard !== 'undefined',
  'errorDashboard (instance)': typeof window.errorDashboard !== 'undefined',
};

console.log('\nüìã –ö–û–ú–ü–û–ù–ï–ù–¢–´:');
for (const [name, available] of Object.entries(components)) {
  console.log(`${available ? '‚úÖ' : '‚ùå'} ${name}: ${available ? '–î–æ—Å—Ç—É–ø–µ–Ω' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
if (window.enhancedLogger) {
  console.log('\nüìä –°–û–°–¢–û–Ø–ù–ò–ï –õ–û–ì–ì–ï–†–ê:');
  console.log('üìç Session ID:', window.enhancedLogger.sessionId);
  console.log('‚ö° Is Active:', window.enhancedLogger.isActive);
  console.log('üìã Logs Array Length:', window.enhancedLogger.logs?.length || 0);
  console.log('üìä Stats:', window.enhancedLogger.getStats());

  // –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –ª–æ–≥–∞–º
  console.log('\nüìù –ü–†–Ø–ú–û–ô –î–û–°–¢–£–ü –ö –õ–û–ì–ê–ú:');
  if (window.enhancedLogger.logs && window.enhancedLogger.logs.length > 0) {
    console.log('‚úÖ –õ–æ–≥–∏ –Ω–∞–π–¥–µ–Ω—ã:', window.enhancedLogger.logs.length);
    window.enhancedLogger.logs.forEach((log, index) => {
      console.log(`  ${index + 1}. [${log.level.toUpperCase()}] ${log.title}`);
    });
  } else {
    console.log('‚ùå –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π');
  }

  // –¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ getLogs()
  console.log('\nüîç –¢–ï–°–¢ –ú–ï–¢–û–î–ê getLogs():');
  const allLogsFromMethod = window.enhancedLogger.getLogs();
  console.log('üìã getLogs() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:', allLogsFromMethod.length, '–ª–æ–≥–æ–≤');

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥
  console.log('\nüß™ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –õ–û–ì–ê:');
  window.enhancedLogger.logInfo('Diagnostic Test Log', {
    source: 'console_diagnostic',
    timestamp: Date.now(),
  });

  console.log('üìä –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞:');
  console.log('üìã Logs Array Length:', window.enhancedLogger.logs?.length || 0);
  console.log('üìä Stats:', window.enhancedLogger.getStats());
} else {
  console.log('\n‚ùå –õ–û–ì–ì–ï–† –ù–ï –ù–ê–ô–î–ï–ù!');
  console.log('üí° –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞...');

  if (window.EnhancedErrorLogger) {
    window.enhancedLogger = new window.EnhancedErrorLogger();
    console.log('‚úÖ –õ–æ–≥–≥–µ—Ä —Å–æ–∑–¥–∞–Ω –≤—Ä—É—á–Ω—É—é');
    console.log('üìç Session ID:', window.enhancedLogger.sessionId);
  } else {
    console.log('‚ùå –ö–ª–∞—Å—Å EnhancedErrorLogger –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ Dashboard
if (window.errorDashboard) {
  console.log('\nüéõÔ∏è DASHBOARD:');
  console.log('üì° Connected to logger:', !!window.errorDashboard.logger);
  console.log('‚ö° Is Active:', window.errorDashboard.isActive);
} else if (window.RealTimeErrorDashboard) {
  console.log('\nüéõÔ∏è –°–û–ó–î–ê–ù–ò–ï DASHBOARD:');
  window.errorDashboard = new window.RealTimeErrorDashboard();
  window.errorDashboard.init();
  console.log('‚úÖ Dashboard —Å–æ–∑–¥–∞–Ω');
}

console.log('\nüîß –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:');
console.log('window.enhancedLogger.logError("Test Error", {source: "console"})');
console.log('window.enhancedLogger.getStats()');
console.log('window.enhancedLogger.getLogs()');
console.log('window.enhancedLogger.exportLogs()');
console.log('window.errorDashboard?.exportReport()');

console.log('\n‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
