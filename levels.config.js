/**
 * HEYS Platform - Log Levels Configuration
 * –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è–º–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–æ–ª–æ—Ç–æ–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É SHINOMONTAGKA
 */

// –û—Å–Ω–æ–≤–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (RFC 5424 + —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
export const LOG_LEVELS = {
  // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏
  fatal: {
    value: 60,
    name: 'fatal',
    color: 'magenta',
    symbol: 'üíÄ',
    description: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–∏–≤–æ–¥—è—â–∞—è –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
  },
  error: {
    value: 50,
    name: 'error',
    color: 'red',
    symbol: '‚ùå',
    description: '–û—à–∏–±–∫–∞, —Ç—Ä–µ–±—É—é—â–∞—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è'
  },
  
  // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
  warn: {
    value: 40,
    name: 'warn',
    color: 'yellow',
    symbol: '‚ö†Ô∏è',
    description: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–µ'
  },
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ
  info: {
    value: 30,
    name: 'info',
    color: 'green',
    symbol: '‚ÑπÔ∏è',
    description: '–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
  },
  http: {
    value: 29,
    name: 'http',
    color: 'cyan',
    symbol: 'üåê',
    description: 'HTTP –∑–∞–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã'
  },
  
  // –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ
  debug: {
    value: 20,
    name: 'debug',
    color: 'blue',
    symbol: 'üîç',
    description: '–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'
  },
  trace: {
    value: 10,
    name: 'trace',
    color: 'gray',
    symbol: 'üî¨',
    description: '–î–µ—Ç–∞–ª—å–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
  },
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ
  silent: {
    value: Infinity,
    name: 'silent',
    color: 'white',
    symbol: 'üîá',
    description: '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–æ–≥–æ–≤'
  }
};

// –ê–ª–∏–∞—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const LEVEL_ALIASES = {
  err: 'error',
  warning: 'warn',
  information: 'info',
  verbose: 'debug',
  silly: 'trace',
  off: 'silent'
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
export const LEVEL_COLORS = Object.fromEntries(
  Object.entries(LOG_LEVELS).map(([key, level]) => [key, level.color])
);

// –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –¥–ª—è Pino/Winston
export const LEVEL_VALUES = Object.fromEntries(
  Object.entries(LOG_LEVELS).map(([key, level]) => [key, level.value])
);

// –ú–∞–ø–ø–∏–Ω–≥ —É—Ä–æ–≤–Ω–µ–π –Ω–∞ –º–µ—Ç–æ–¥—ã
export const LEVEL_METHODS = Object.keys(LOG_LEVELS);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
export const ENVIRONMENT_CONFIGS = {
  development: {
    defaultLevel: 'debug',
    console: {
      enabled: true,
      level: 'debug',
      colorize: true,
      timestamp: true,
      prettyPrint: true
    },
    file: {
      enabled: true,
      level: 'info',
      rotation: false
    },
    performance: {
      logSlowOperations: true,
      threshold: 100 // ms
    }
  },
  
  test: {
    defaultLevel: 'error',
    console: {
      enabled: false,
      level: 'silent'
    },
    file: {
      enabled: true,
      level: 'error',
      path: './logs/test'
    },
    performance: {
      logSlowOperations: false
    }
  },
  
  staging: {
    defaultLevel: 'info',
    console: {
      enabled: true,
      level: 'warn',
      colorize: false,
      format: 'json'
    },
    file: {
      enabled: true,
      level: 'info',
      rotation: true,
      maxSize: '50m',
      maxFiles: '7d'
    },
    performance: {
      logSlowOperations: true,
      threshold: 500
    }
  },
  
  production: {
    defaultLevel: 'warn',
    console: {
      enabled: true,
      level: 'error',
      colorize: false,
      format: 'json'
    },
    file: {
      enabled: true,
      level: 'info',
      rotation: true,
      maxSize: '100m',
      maxFiles: '30d',
      compress: true
    },
    performance: {
      logSlowOperations: true,
      threshold: 1000
    },
    security: {
      sanitizeHeaders: true,
      maskPasswords: true,
      auditLevel: 'warn'
    }
  }
};

// –§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
export const LEVEL_FORMATTERS = {
  fatal: (message, meta) => `üíÄ FATAL: ${message} ${JSON.stringify(meta)}`,
  error: (message, meta) => `‚ùå ERROR: ${message} ${meta ? JSON.stringify(meta) : ''}`,
  warn: (message, meta) => `‚ö†Ô∏è  WARN: ${message} ${meta ? JSON.stringify(meta) : ''}`,
  info: (message, _meta) => `‚ÑπÔ∏è  INFO: ${message}`,
  http: (message, _meta) => `üåê HTTP: ${message}`,
  debug: (message, meta) => `üîç DEBUG: ${message} ${meta ? JSON.stringify(meta) : ''}`,
  trace: (message, meta) => `üî¨ TRACE: ${message} ${meta ? JSON.stringify(meta) : ''}`
};

// –ü—Ä–µ–¥–∏–∫–∞—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
export const LEVEL_PREDICATES = {
  isError: (level) => ['fatal', 'error'].includes(level),
  isWarning: (level) => level === 'warn',
  isInfo: (level) => ['info', 'http'].includes(level),
  isDebug: (level) => ['debug', 'trace'].includes(level),
  isCritical: (level) => ['fatal', 'error', 'warn'].includes(level),
  isProduction: (level) => ['fatal', 'error', 'warn', 'info'].includes(level)
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
export const ROTATION_CONFIG = {
  fatal: { maxSize: '10m', maxFiles: '90d', compress: true },
  error: { maxSize: '50m', maxFiles: '30d', compress: true },
  warn: { maxSize: '100m', maxFiles: '14d', compress: true },
  info: { maxSize: '200m', maxFiles: '7d', compress: false },
  http: { maxSize: '500m', maxFiles: '3d', compress: false },
  debug: { maxSize: '100m', maxFiles: '1d', compress: false },
  trace: { maxSize: '50m', maxFiles: '6h', compress: false }
};

// –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
export const DEFAULT_CONFIG = {
  level: 'info',
  levels: LEVEL_VALUES,
  colors: LEVEL_COLORS,
  environment: process.env.NODE_ENV || 'development',
  
  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  getEnvironmentConfig() {
    return ENVIRONMENT_CONFIGS[this.environment] || ENVIRONMENT_CONFIGS.development;
  },
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–∫–ª—é—á–µ–Ω –ª–∏ —É—Ä–æ–≤–µ–Ω—å
  isLevelEnabled(level, currentLevel = this.level) {
    const levelValue = LOG_LEVELS[level]?.value || 0;
    const currentValue = LOG_LEVELS[currentLevel]?.value || 30;
    return levelValue >= currentValue;
  },
  
  // –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —É—Ä–æ–≤–Ω—è
  getFormatter(level) {
    return LEVEL_FORMATTERS[level] || LEVEL_FORMATTERS.info;
  },
  
  // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–º—è —É—Ä–æ–≤–Ω—è
  normalizeLevel(level) {
    const normalized = level.toLowerCase();
    return LEVEL_ALIASES[normalized] || normalized;
  }
};

// CommonJS —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    LOG_LEVELS,
    LEVEL_ALIASES,
    LEVEL_COLORS,
    LEVEL_VALUES,
    LEVEL_METHODS,
    ENVIRONMENT_CONFIGS,
    LEVEL_FORMATTERS,
    LEVEL_PREDICATES,
    ROTATION_CONFIG,
    DEFAULT_CONFIG,
    default: DEFAULT_CONFIG
  };
}
