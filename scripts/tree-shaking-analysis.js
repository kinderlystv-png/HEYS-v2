// filepath: scripts/tree-shaking-analysis.js

/**
 * CLI —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ tree shaking
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –∫–æ–¥–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
 */

const fs = require('fs');
const path = require('path');

// –ò–º–ø–æ—Ä—Ç TreeShaker (—á–µ—Ä–µ–∑ require –¥–ª—è Node.js —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
async function importTreeShaker() {
  try {
    // –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ TypeScript —Ñ–∞–π–ª–∞
    const tsNode = require('ts-node');
    tsNode.register({
      compilerOptions: {
        module: 'commonjs',
        target: 'es2020',
      }
    });
    
    const { TreeShaker } = require('../packages/shared/src/performance/TreeShaker.ts');
    return TreeShaker;
  } catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å TreeShaker:', error.message);
    console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ts-node —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: npm install -g ts-node');
    process.exit(1);
  }
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 */
const defaultConfig = {
  rootPath: process.cwd(),
  outputFile: 'tree-shaking-report.txt',
  format: 'text', // 'text' | 'json' | 'both'
  preset: 'safe', // 'aggressive' | 'safe' | 'library' | 'legacy'
  bundler: 'vite', // 'vite' | 'webpack' | 'rollup' | 'esbuild'
};

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç tree shaking
 */
async function analyzeFileSystem(rootPath, config = {}) {
  console.log('üå≤ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ tree shaking...');
  console.log(`üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${rootPath}`);
  
  const startTime = Date.now();
  
  try {
    const TreeShaker = await importTreeShaker();
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    const treeShaker = new TreeShaker({
      bundler: config.bundler || 'vite',
      aggressive: config.preset === 'aggressive',
      preserveTypes: config.preset !== 'aggressive',
      include: config.include || ['src/**/*.{ts,tsx,js,jsx}', 'packages/**/*.{ts,tsx,js,jsx}'],
      exclude: config.exclude || [
        '**/*.test.{ts,tsx,js,jsx}',
        '**/*.spec.{ts,tsx,js,jsx}',
        '**/*.stories.{ts,tsx,js,jsx}',
        '**/node_modules/**',
        '**/coverage/**',
        '**/dist/**',
        '**/build/**'
      ]
    });
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
    const analysis = await treeShaker.analyzeProject(rootPath);
    
    const duration = Date.now() - startTime;
    console.log(`‚ö° –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${duration}ms`);
    
    return { treeShaker, analysis };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error);
    throw error;
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
 */
function saveReport(treeShaker, analysis, outputPath, format = 'text') {
  try {
    let content = '';
    
    switch (format) {
      case 'text':
        content = treeShaker.generateReport();
        break;
      case 'json':
        content = treeShaker.exportToJson();
        break;
      case 'both':
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        const textContent = treeShaker.generateReport();
        const jsonContent = treeShaker.exportToJson();
        
        const baseName = path.basename(outputPath, path.extname(outputPath));
        const dir = path.dirname(outputPath);
        
        fs.writeFileSync(path.join(dir, `${baseName}.txt`), textContent, 'utf8');
        fs.writeFileSync(path.join(dir, `${baseName}.json`), jsonContent, 'utf8');
        
        console.log(`üíæ –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:`);
        console.log(`   üìÑ ${baseName}.txt`);
        console.log(`   üìã ${baseName}.json`);
        return;
    }
    
    fs.writeFileSync(outputPath, content, 'utf8');
    console.log(`üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${outputPath}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:', error);
  }
}

/**
 * –í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
 */
function printSummary(analysis) {
  console.log('\nüìä –ö–†–ê–¢–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log('========================');
  console.log(`üìÅ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${analysis.totalFiles}`);
  console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤: ${analysis.unusedExports.length}`);
  
  if (analysis.potentialSavings > 0) {
    console.log(`üíæ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è: ${formatBytes(analysis.potentialSavings)}`);
  }
  
  // –¢–æ–ø —Ñ–∞–π–ª–æ–≤ —Å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞–º–∏
  if (analysis.unusedExports.length > 0) {
    const fileGroups = analysis.unusedExports.reduce((acc, exp) => {
      const fileName = path.basename(exp.file);
      if (!acc[fileName]) acc[fileName] = [];
      acc[fileName].push(exp);
      return acc;
    }, {});
    
    const topFiles = Object.entries(fileGroups)
      .sort(([,a], [,b]) => b.length - a.length)
      .slice(0, 5);
    
    if (topFiles.length > 0) {
      console.log('\nüîù –¢–û–ü –§–ê–ô–õ–û–í –° –ù–ï–ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ú–ò –≠–ö–°–ü–û–†–¢–ê–ú–ò:');
      topFiles.forEach(([fileName, exports], index) => {
        const totalSize = exports.reduce((sum, exp) => sum + exp.size, 0);
        console.log(`   ${index + 1}. ${fileName}: ${exports.length} —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ (${formatBytes(totalSize)})`);
      });
    }
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–ø–µ—Ä–≤—ã–µ 3)
  if (analysis.recommendations.length > 0) {
    console.log('\nüí° –ì–õ–ê–í–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    analysis.recommendations.slice(0, 3).forEach(rec => {
      console.log(`   ${rec}`);
    });
    
    if (analysis.recommendations.length > 3) {
      console.log(`   ... –∏ –µ—â–µ ${analysis.recommendations.length - 3} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π`);
    }
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–∞–π—Ç—ã
 */
function formatBytes(bytes) {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

/**
 * –ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
 */
function parseArguments() {
  const args = process.argv.slice(2);
  const config = { ...defaultConfig };
  
  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    
    switch (arg) {
      case '--path':
      case '-p':
        config.rootPath = args[++i] || config.rootPath;
        break;
      case '--output':
      case '-o':
        config.outputFile = args[++i] || config.outputFile;
        break;
      case '--format':
      case '-f':
        config.format = args[++i] || config.format;
        break;
      case '--preset':
        config.preset = args[++i] || config.preset;
        break;
      case '--bundler':
      case '-b':
        config.bundler = args[++i] || config.bundler;
        break;
      case '--help':
      case '-h':
        printHelp();
        process.exit(0);
        break;
      case '--verbose':
      case '-v':
        config.verbose = true;
        break;
      case '--aggressive':
        config.preset = 'aggressive';
        break;
      case '--safe':
        config.preset = 'safe';
        break;
      default:
        if (!arg.startsWith('-')) {
          config.rootPath = arg;
        }
        break;
    }
  }
  
  return config;
}

/**
 * –í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
 */
function printHelp() {
  console.log(`
üå≤ Tree Shaking Analysis Tool

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
  node tree-shaking-analysis.js [–æ–ø—Ü–∏–∏] [–ø—É—Ç—å]

–û–ü–¶–ò–ò:
  -p, --path <–ø—É—Ç—å>       –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)
  -o, --output <—Ñ–∞–π–ª>     –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: tree-shaking-report.txt)
  -f, --format <—Ñ–æ—Ä–º–∞—Ç>   –§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞: text, json, both (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: text)
  -b, --bundler <—Ç–∏–ø>     –¢–∏–ø bundler: vite, webpack, rollup, esbuild (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: vite)
  --preset <—Ç–∏–ø>          Preset –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: aggressive, safe, library, legacy (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: safe)
  --aggressive            –í–∫–ª—é—á–∏—Ç—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
  --safe                  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  -v, --verbose           –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
  -h, --help              –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–†–ò–ú–ï–†–´:
  # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  node tree-shaking-analysis.js

  # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ JSON
  node tree-shaking-analysis.js --path ./my-project --format json

  # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è Webpack
  node tree-shaking-analysis.js --aggressive --bundler webpack

  # –ê–Ω–∞–ª–∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å Rollup
  node tree-shaking-analysis.js --preset library --bundler rollup
`);
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  try {
    const config = parseArguments();
    
    if (config.verbose) {
      console.log('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', JSON.stringify(config, null, 2));
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏
    if (!fs.existsSync(config.rootPath)) {
      console.error(`‚ùå –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${config.rootPath}`);
      process.exit(1);
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
    const { treeShaker, analysis } = await analyzeFileSystem(config.rootPath, config);
    
    // –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    printSummary(analysis);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    if (config.outputFile) {
      saveReport(treeShaker, analysis, config.outputFile, config.format);
    }
    
    // –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –µ—Å–ª–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    if (!config.outputFile || config.verbose) {
      console.log('\n' + treeShaker.generateReport());
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    if (analysis.unusedExports.length > 100) {
      console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–∞–π–¥–µ–Ω–æ –º–Ω–æ–≥–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤!');
      console.log('   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.');
    }
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = {
  analyzeFileSystem,
  saveReport,
  printSummary,
  formatBytes,
};
