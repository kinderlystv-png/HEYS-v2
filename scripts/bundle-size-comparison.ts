// filepath: scripts/bundle-size-comparison.ts
// Simplified Bundle Size Analysis –¥–ª—è Performance Sprint

import { execSync } from 'child_process';
import { readFileSync, existsSync } from 'fs';
import { join } from 'path';
import chalk from 'chalk';

class SimpleBundleAnalyzer {
  private workspaceRoot: string;
  private buildPath: string;

  constructor() {
    this.workspaceRoot = process.cwd();
    this.buildPath = join(this.workspaceRoot, 'apps', 'web', 'dist');
  }

  async analyzeBundleSize(): Promise<void> {
    console.log(chalk.blue('üì¶ BUNDLE SIZE ANALYSIS - Performance Sprint Day 2\n'));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π build
    if (!existsSync(this.buildPath)) {
      console.log(chalk.yellow('üî® No existing build found, creating one...'));
      await this.createBuild();
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä
    const bundleInfo = this.analyzeBuild();
    this.reportResults(bundleInfo);
  }

  private async createBuild(): Promise<void> {
    try {
      console.log(chalk.yellow('‚ö° Building web app...'));
      execSync('pnpm --filter="@heys/web" run build', { 
        stdio: 'inherit',
        cwd: this.workspaceRoot
      });
    } catch (error) {
      console.log(chalk.red('‚ùå Build failed, analyzing existing files...'));
    }
  }

  private analyzeBuild(): any {
    if (!existsSync(this.buildPath)) {
      console.log(chalk.red('‚ùå No build directory found'));
      return null;
    }

    try {
      // –ê–Ω–∞–ª–∏–∑ assets folder
      const assetsPath = join(this.buildPath, 'assets');
      
      if (existsSync(assetsPath)) {
        const files = execSync(`Get-ChildItem "${assetsPath}" -File | ForEach-Object { "$($_.Name),$($_.Length)" }`, 
          { encoding: 'utf-8' }
        ).split('\n').filter(Boolean);

        const jsFiles: Array<{name: string, size: number}> = [];
        const cssFiles: Array<{name: string, size: number}> = [];
        let totalSize = 0;

        files.forEach(line => {
          const [name, size] = line.trim().split(',');
          const sizeNum = parseInt(size) || 0;
          totalSize += sizeNum;

          if (name?.endsWith('.js')) {
            jsFiles.push({ name, size: sizeNum });
          } else if (name?.endsWith('.css')) {
            cssFiles.push({ name, size: sizeNum });
          }
        });

        return {
          totalSize,
          jsFiles: jsFiles.sort((a, b) => b.size - a.size),
          cssFiles: cssFiles.sort((a, b) => b.size - a.size),
          fileCount: files.length
        };
      }
    } catch (error) {
      console.log(chalk.yellow('‚ö†Ô∏è Could not analyze build directory'));
    }

    return null;
  }

  private reportResults(bundleInfo: any): void {
    if (!bundleInfo) {
      console.log(chalk.red('‚ùå No bundle information available'));
      return;
    }

    console.log(chalk.blue('\nüìä CURRENT BUNDLE ANALYSIS\n'));

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log(chalk.yellow('üì¶ BUNDLE OVERVIEW:'));
    console.log(`   Total bundle size: ${chalk.cyan(this.formatBytes(bundleInfo.totalSize))}`);
    console.log(`   Number of files: ${chalk.cyan(bundleInfo.fileCount)}`);
    console.log(`   JavaScript files: ${chalk.cyan(bundleInfo.jsFiles.length)}`);
    console.log(`   CSS files: ${chalk.cyan(bundleInfo.cssFiles.length)}`);

    // JavaScript —Ñ–∞–π–ª—ã
    if (bundleInfo.jsFiles.length > 0) {
      console.log(chalk.blue('\nüü® JAVASCRIPT BUNDLES:'));
      bundleInfo.jsFiles.forEach((file: any, index: number) => {
        const icon = index === 0 ? 'üéØ' : 'üìÑ';
        console.log(`   ${icon} ${file.name}: ${chalk.cyan(this.formatBytes(file.size))}`);
      });
    }

    // CSS —Ñ–∞–π–ª—ã
    if (bundleInfo.cssFiles.length > 0) {
      console.log(chalk.blue('\nüé® CSS BUNDLES:'));
      bundleInfo.cssFiles.forEach((file: any) => {
        console.log(`   üé® ${file.name}: ${chalk.cyan(this.formatBytes(file.size))}`);
      });
    }

    // –û—Ü–µ–Ω–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    this.evaluateBundle(bundleInfo);
  }

  private evaluateBundle(bundleInfo: any): void {
    const totalKB = bundleInfo.totalSize / 1024;
    
    console.log(chalk.blue('\nüéØ PERFORMANCE EVALUATION:\n'));

    // –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ bundle
    if (totalKB < 50) {
      console.log(chalk.green('‚úÖ EXCELLENT: Bundle size is optimal!'));
    } else if (totalKB < 100) {
      console.log(chalk.yellow('üü° GOOD: Bundle size is acceptable'));
    } else if (totalKB < 200) {
      console.log(chalk.yellow('üü† WARNING: Bundle size could be reduced'));
    } else {
      console.log(chalk.red('üî¥ CRITICAL: Bundle size needs optimization'));
    }

    console.log(`   Current size: ${chalk.cyan(this.formatBytes(bundleInfo.totalSize))}`);
    console.log(`   Recommended: ${chalk.green('< 100 KB')}`);

    // –ê–Ω–∞–ª–∏–∑ –∫—Ä—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    const largeJsFiles = bundleInfo.jsFiles.filter((f: any) => f.size > 30 * 1024);
    if (largeJsFiles.length > 0) {
      console.log(chalk.yellow('\n‚ö†Ô∏è LARGE FILES DETECTED:'));
      largeJsFiles.forEach((file: any) => {
        console.log(`   üì¶ ${file.name}: ${this.formatBytes(file.size)} - Consider code splitting`);
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–ø—Ä–∏–Ω—Ç–∞
    console.log(chalk.blue('\nüöÄ SPRINT OPTIMIZATION OPPORTUNITIES:\n'));
    
    const recommendations = [
      totalKB > 100 ? 'üì¶ Implement code splitting for large bundles' : null,
      bundleInfo.jsFiles.length > 3 ? 'üîÑ Merge small chunks to reduce HTTP requests' : null,
      'üå≥ Enable aggressive tree shaking',
      '‚ö° Use dynamic imports for non-critical code',
      'üóúÔ∏è Enable gzip/brotli compression',
      'üì± Implement progressive loading'
    ].filter(Boolean);

    recommendations.forEach(rec => rec && console.log(`   ${rec}`));

    // Sprint goals progress
    console.log(chalk.blue('\nüìà SPRINT PROGRESS:'));
    console.log(`   Bundle size goal: ${chalk.green('< 50 KB')}`);
    console.log(`   Current status: ${totalKB > 50 ? chalk.red('Needs optimization') : chalk.green('Goal achieved!')}`);
  }

  private formatBytes(bytes: number): string {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }
}

// –ó–∞–ø—É—Å–∫
async function runBundleAnalysis() {
  const analyzer = new SimpleBundleAnalyzer();
  await analyzer.analyzeBundleSize();
}

if (require.main === module) {
  runBundleAnalysis().catch(console.error);
}

export { SimpleBundleAnalyzer };
