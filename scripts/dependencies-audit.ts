// filepath: scripts/dependencies-audit.ts
// Dependencies Audit –¥–ª—è Performance Optimization Sprint –î–µ–Ω—å 2

import { execSync } from 'child_process';
import { readFileSync, existsSync } from 'fs';
import { join } from 'path';
import chalk from 'chalk';

interface DependencyInfo {
  name: string;
  version: string;
  size: number;
  type: 'dependency' | 'devDependency';
  bundled: boolean;
}

class DependenciesAuditor {
  private workspaceRoot: string;
  private dependencies: DependencyInfo[] = [];

  constructor() {
    this.workspaceRoot = process.cwd();
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
   */
  async auditDependencies(): Promise<void> {
    console.log(chalk.blue('üîç DEPENDENCIES AUDIT - Performance Sprint Day 2\n'));

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º package.json
    await this.analyzePackageJson();
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º node_modules —Ä–∞–∑–º–µ—Ä—ã
    await this.analyzeNodeModulesSizes();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    this.generateReport();
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ package.json –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
   */
  private async analyzePackageJson(): Promise<void> {
    const packageJsonPath = join(this.workspaceRoot, 'package.json');
    
    if (!existsSync(packageJsonPath)) {
      console.log(chalk.red('‚ùå package.json not found'));
      return;
    }

    const packageJson = JSON.parse(readFileSync(packageJsonPath, 'utf-8'));
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º dependencies
    if (packageJson.dependencies) {
      for (const [name, version] of Object.entries(packageJson.dependencies)) {
        this.dependencies.push({
          name,
          version: version as string,
          size: 0,
          type: 'dependency',
          bundled: true
        });
      }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º devDependencies
    if (packageJson.devDependencies) {
      for (const [name, version] of Object.entries(packageJson.devDependencies)) {
        this.dependencies.push({
          name,
          version: version as string,
          size: 0,
          type: 'devDependency',
          bundled: false
        });
      }
    }

    console.log(chalk.green(`‚úÖ Analyzed ${this.dependencies.length} dependencies`));
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ node_modules
   */
  private async analyzeNodeModulesSizes(): Promise<void> {
    console.log(chalk.blue('üì¶ Analyzing node_modules sizes...'));

    for (const dep of this.dependencies) {
      const depPath = join(this.workspaceRoot, 'node_modules', dep.name);
      
      if (existsSync(depPath)) {
        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º du –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ (Windows/Unix —Å–æ–≤–º–µ—Å—Ç–∏–º–æ)
          const sizeOutput = execSync(`powershell -command "(Get-ChildItem '${depPath}' -Recurse | Measure-Object -Property Length -Sum).Sum"`, 
            { encoding: 'utf-8', stdio: 'pipe' }
          );
          dep.size = parseInt(sizeOutput.trim()) || 0;
        } catch (error) {
          // Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –æ—à–∏–±–æ–∫
          dep.size = 0;
        }
      }
    }

    console.log(chalk.green('‚úÖ Node modules sizes calculated'));
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
   */
  private generateReport(): void {
    console.log(chalk.blue('\nüìä DEPENDENCIES AUDIT REPORT\n'));

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (—É–±—ã–≤–∞–Ω–∏–µ)
    const sortedDeps = this.dependencies
      .filter(dep => dep.size > 0)
      .sort((a, b) => b.size - a.size);

    // –¢–æ–ø-10 —Å–∞–º—ã—Ö —Ç—è–∂–µ–ª—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    console.log(chalk.yellow('üî• TOP 10 HEAVIEST DEPENDENCIES:\n'));
    
    const top10 = sortedDeps.slice(0, 10);
    top10.forEach((dep, index) => {
      const sizeInMB = (dep.size / 1024 / 1024).toFixed(2);
      const typeColor = dep.type === 'dependency' ? chalk.red : chalk.gray;
      const bundledIcon = dep.bundled ? 'üì¶' : 'üõ†Ô∏è';
      
      console.log(`${index + 1}. ${bundledIcon} ${chalk.bold(dep.name)} ${typeColor(`(${dep.type})`)} - ${chalk.cyan(sizeInMB + ' MB')}`);
    });

    // –ê–Ω–∞–ª–∏–∑ bundled dependencies
    const bundledDeps = sortedDeps.filter(dep => dep.bundled);
    const totalBundledSize = bundledDeps.reduce((sum, dep) => sum + dep.size, 0);
    
    console.log(chalk.blue(`\nüì¶ BUNDLED DEPENDENCIES ANALYSIS:`));
    console.log(`Total bundled size: ${chalk.cyan((totalBundledSize / 1024 / 1024).toFixed(2) + ' MB')}`);
    console.log(`Number of bundled deps: ${chalk.cyan(bundledDeps.length)}`);

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    this.generateOptimizationRecommendations(sortedDeps);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  private generateOptimizationRecommendations(sortedDeps: DependencyInfo[]): void {
    console.log(chalk.blue('\nüéØ OPTIMIZATION RECOMMENDATIONS:\n'));

    const heavyBundledDeps = sortedDeps
      .filter(dep => dep.bundled && dep.size > 5 * 1024 * 1024) // > 5MB
      .slice(0, 5);

    if (heavyBundledDeps.length > 0) {
      console.log(chalk.red('üö® CRITICAL - Heavy bundled dependencies:'));
      heavyBundledDeps.forEach(dep => {
        const sizeInMB = (dep.size / 1024 / 1024).toFixed(2);
        console.log(`   ‚Ä¢ ${dep.name} (${sizeInMB}MB) - Consider lazy loading or alternatives`);
      });
      console.log();
    }

    // Specific recommendations
    const recommendations = [
      'üå≥ Configure tree shaking for unused exports',
      'üì¶ Use dynamic imports for heavy components',
      'üîÑ Replace heavy libraries with lighter alternatives',
      'üì± Split vendor and application bundles',
      '‚ö° Enable aggressive minification'
    ];

    console.log(chalk.green('üí° RECOMMENDED ACTIONS:'));
    recommendations.forEach(rec => console.log(`   ${rec}`));

    console.log(chalk.blue('\nüöÄ NEXT STEPS FOR SPRINT:'));
    console.log('   1. Configure advanced tree shaking');
    console.log('   2. Implement dynamic imports');
    console.log('   3. Replace heavy dependencies');
    console.log('   4. Measure bundle size reduction');
  }
}

// –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞
async function runDependenciesAudit() {
  const auditor = new DependenciesAuditor();
  await auditor.auditDependencies();
}

if (require.main === module) {
  runDependenciesAudit().catch(console.error);
}

export { DependenciesAuditor };
