// filepath: scripts/tree-shaking-simple.js

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π CLI —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ tree shaking –±–µ–∑ ts-node
 * –†–∞–±–æ—Ç–∞–µ—Ç —Å JavaScript —Ñ–∞–π–ª–∞–º–∏ –∏ –ø—Ä–æ—Å—Ç—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
 */

const fs = require('fs');
const path = require('path');

/**
 * –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è TreeShaker –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
 */
class SimpleTreeShaker {
  constructor(config = {}) {
    this.config = {
      include: ['**/*.{js,ts,jsx,tsx}'],
      exclude: ['**/*.test.{js,ts,jsx,tsx}', '**/node_modules/**'],
      ...config
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
   */
  async analyzeProject(rootPath) {
    console.log('üå≤ –ù–∞—á–∏–Ω–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ tree shaking...');
    console.log(`üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${rootPath}`);

    const files = this.findSourceFiles(rootPath);
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);

    const unusedExports = [];
    let totalExports = 0;

    for (const file of files) {
      try {
        const content = fs.readFileSync(file, 'utf8');
        const exports = this.extractExports(content, file);
        totalExports += exports.length;
        
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        for (const exp of exports) {
          const isUsed = this.isExportUsed(exp, files);
          if (!isUsed) {
            unusedExports.push(exp);
          }
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª ${file}:`, error.message);
      }
    }

    console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ ${unusedExports.length} –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –∏–∑ ${totalExports}`);

    return {
      totalFiles: files.length,
      totalExports,
      unusedExports,
      recommendations: this.generateRecommendations(unusedExports)
    };
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
   */
  findSourceFiles(rootPath) {
    const files = [];
    
    const walkDir = (dir) => {
      if (!fs.existsSync(dir)) return;
      
      const entries = fs.readdirSync(dir, { withFileTypes: true });
      
      for (const entry of entries) {
        const fullPath = path.join(dir, entry.name);
        
        if (entry.isDirectory()) {
          if (!this.shouldExclude(fullPath)) {
            walkDir(fullPath);
          }
        } else if (entry.isFile() && this.isSourceFile(entry.name)) {
          if (!this.shouldExclude(fullPath)) {
            files.push(fullPath);
          }
        }
      }
    };

    walkDir(rootPath);
    return files;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å –ø—É—Ç—å
   */
  shouldExclude(filePath) {
    return this.config.exclude.some(pattern => {
      const simplePattern = pattern.replace(/\*\*/g, '').replace(/\*/g, '');
      return filePath.includes(simplePattern);
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º
   */
  isSourceFile(fileName) {
    const extensions = ['.js', '.ts', '.jsx', '.tsx'];
    return extensions.some(ext => fileName.endsWith(ext));
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
   */
  extractExports(content, filePath) {
    const exports = [];
    const lines = content.split('\n');

    lines.forEach((line, index) => {
      // –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
      const patterns = [
        /export\s+(?:const|let|var)\s+(\w+)/g,
        /export\s+function\s+(\w+)/g,
        /export\s+class\s+(\w+)/g,
        /export\s+interface\s+(\w+)/g,
        /export\s+type\s+(\w+)/g,
        /export\s*{\s*([^}]+)\s*}/g,
      ];

      patterns.forEach(pattern => {
        let match;
        while ((match = pattern.exec(line)) !== null) {
          const exportName = match[1];
          
          if (exportName) {
            if (pattern.source.includes('{')) {
              // Named exports
              const namedExports = exportName.split(',').map(n => n.trim());
              namedExports.forEach(name => {
                if (name && !name.includes('as')) {
                  exports.push({
                    name,
                    file: filePath,
                    line: index + 1,
                    type: 'named'
                  });
                }
              });
            } else {
              exports.push({
                name: exportName,
                file: filePath,
                line: index + 1,
                type: this.detectType(line)
              });
            }
          }
        }
      });
    });

    return exports;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞
   */
  detectType(line) {
    if (line.includes('function')) return 'function';
    if (line.includes('class')) return 'class';
    if (line.includes('interface')) return 'interface';
    if (line.includes('type')) return 'type';
    return 'variable';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —ç–∫—Å–ø–æ—Ä—Ç
   */
  isExportUsed(exportItem, allFiles) {
    const otherFiles = allFiles.filter(file => file !== exportItem.file);
    
    for (const file of otherFiles) {
      try {
        const content = fs.readFileSync(file, 'utf8');
        
        // –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–∏—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
        const importPatterns = [
          new RegExp(`import\\s+\\{[^}]*\\b${exportItem.name}\\b[^}]*\\}`, 'g'),
          new RegExp(`import\\s+${exportItem.name}\\b`, 'g'),
          new RegExp(`\\b${exportItem.name}\\b`, 'g'),
        ];

        for (const pattern of importPatterns) {
          if (pattern.test(content)) {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º
            const matches = content.match(pattern) || [];
            if (matches.length > 1) { // –ï—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –≤–µ—Ä–æ—è—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
              return true;
            }
          }
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è
      }
    }

    return false;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   */
  generateRecommendations(unusedExports) {
    const recommendations = [];

    if (unusedExports.length === 0) {
      recommendations.push('üéâ –û—Ç–ª–∏—á–Ω–æ! –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return recommendations;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ñ–∞–π–ª–∞–º
    const byFile = unusedExports.reduce((acc, exp) => {
      if (!acc[exp.file]) acc[exp.file] = [];
      acc[exp.file].push(exp);
      return acc;
    }, {});

    Object.entries(byFile).forEach(([file, exports]) => {
      const fileName = path.basename(file);
      if (exports.length > 3) {
        recommendations.push(`üìÅ ${fileName}: ${exports.length} –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤`);
      } else {
        exports.forEach(exp => {
          recommendations.push(`üîπ ${fileName}:${exp.line} - —É–¥–∞–ª–∏—Ç—å '${exp.name}' (${exp.type})`);
        });
      }
    });

    const potentialSavings = unusedExports.length * 50; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    recommendations.push(`üíæ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è: ~${potentialSavings} —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞`);

    return recommendations;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç
   */
  generateReport(analysis) {
    let report = 'üå≤ –û–¢–ß–ï–¢ TREE SHAKING –ê–ù–ê–õ–ò–ó–ê\n';
    report += '================================\n\n';

    report += `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
    report += `   –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${analysis.totalFiles}\n`;
    report += `   –í—Å–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤: ${analysis.totalExports}\n`;
    report += `   –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤: ${analysis.unusedExports.length}\n`;
    
    if (analysis.unusedExports.length > 0) {
      const percentage = ((analysis.unusedExports.length / analysis.totalExports) * 100).toFixed(1);
      report += `   –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö: ${percentage}%\n`;
    }
    
    report += '\n';

    if (analysis.recommendations.length > 0) {
      report += `üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n`;
      analysis.recommendations.forEach(rec => {
        report += `   ${rec}\n`;
      });
      report += '\n';
    }

    // –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–ø–µ—Ä–≤—ã–µ 10)
    if (analysis.unusedExports.length > 0) {
      report += `üìã –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã (–ø–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 10):\n`;
      analysis.unusedExports.slice(0, 10).forEach(exp => {
        const fileName = path.basename(exp.file);
        report += `   ${fileName}:${exp.line} - ${exp.name} (${exp.type})\n`;
      });
      
      if (analysis.unusedExports.length > 10) {
        report += `   ... –∏ –µ—â–µ ${analysis.unusedExports.length - 10} —ç–∫—Å–ø–æ—Ä—Ç–æ–≤\n`;
      }
    }

    return report;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  const args = process.argv.slice(2);
  const rootPath = args[0] || process.cwd();

  console.log('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ tree shaking');

  try {
    if (!fs.existsSync(rootPath)) {
      console.error(`‚ùå –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${rootPath}`);
      process.exit(1);
    }

    const treeShaker = new SimpleTreeShaker();
    const analysis = await treeShaker.analyzeProject(rootPath);

    // –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìä –ö–†–ê–¢–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log('========================');
    console.log(`üìÅ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${analysis.totalFiles}`);
    console.log(`üîç –í—Å–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤: ${analysis.totalExports}`);
    console.log(`üîç –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤: ${analysis.unusedExports.length}`);

    if (analysis.unusedExports.length > 0) {
      const percentage = ((analysis.unusedExports.length / analysis.totalExports) * 100).toFixed(1);
      console.log(`üìä –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö: ${percentage}%`);
    }

    // –¢–æ–ø —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
    if (analysis.unusedExports.length > 0) {
      const fileGroups = analysis.unusedExports.reduce((acc, exp) => {
        const fileName = path.basename(exp.file);
        if (!acc[fileName]) acc[fileName] = [];
        acc[fileName].push(exp);
        return acc;
      }, {});

      const topFiles = Object.entries(fileGroups)
        .sort(([,a], [,b]) => b.length - a.length)
        .slice(0, 5);

      if (topFiles.length > 0) {
        console.log('\nüîù –¢–û–ü –§–ê–ô–õ–û–í –° –ù–ï–ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ú–ò –≠–ö–°–ü–û–†–¢–ê–ú–ò:');
        topFiles.forEach(([fileName, exports], index) => {
          console.log(`   ${index + 1}. ${fileName}: ${exports.length} —ç–∫—Å–ø–æ—Ä—Ç–æ–≤`);
        });
      }
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (analysis.recommendations.length > 0) {
      console.log('\nüí° –ì–õ–ê–í–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
      analysis.recommendations.slice(0, 5).forEach(rec => {
        console.log(`   ${rec}`);
      });
    }

    // –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
    console.log('\n' + treeShaker.generateReport(analysis));

    if (analysis.unusedExports.length > 50) {
      console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–∞–π–¥–µ–Ω–æ –º–Ω–æ–≥–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤!');
      console.log('   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { SimpleTreeShaker };
