import chalk from 'chalk';
import { execSync } from 'child_process';
import { existsSync, statSync, readdirSync, writeFileSync, readFileSync, mkdirSync } from 'fs';
import { join } from 'path';

interface BundleStats {
  name: string;
  size: number;
  gzipSize?: number;
  brotliSize?: number;
}

interface DetailedBundleAnalysis {
  totalSize: number;
  chunkSizes: Record<string, number>;
  dependencies: Record<string, number>;
  timestamp: string;
  recommendations: string[];
}

function formatBytes(bytes: number): string {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

function getDirectorySize(dirPath: string): number {
  if (!existsSync(dirPath)) return 0;

  let totalSize = 0;

  function calculateSize(path: string) {
    try {
      const stats = statSync(path);
      if (stats.isDirectory()) {
        const files = readdirSync(path);
        files.forEach((file: string) => {
          calculateSize(join(path, file));
        });
      } else {
        totalSize += stats.size;
      }
    } catch (error) {
      // Ignore errors for inaccessible files
    }
  }

  calculateSize(dirPath);
  return totalSize;
}

/**
 * –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ bundle –¥–ª—è Performance Optimization Sprint
 */
function performDetailedAnalysis(): DetailedBundleAnalysis {
  const analysis: DetailedBundleAnalysis = {
    totalSize: 0,
    chunkSizes: {},
    dependencies: {},
    timestamp: new Date().toISOString(),
    recommendations: []
  };

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º dist –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
  const distPath = join(process.cwd(), 'apps', 'web', 'dist');
  if (existsSync(distPath)) {
    analysis.totalSize = getDirectorySize(distPath);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —á–∞–Ω–∫–∏
    const files = getJSFiles(distPath);
    files.forEach(file => {
      const filePath = join(distPath, file);
      const size = statSync(filePath).size;
      analysis.chunkSizes[file] = size;
    });
  }

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  const packageJsonPath = join(process.cwd(), 'package.json');
  if (existsSync(packageJsonPath)) {
    const packageJson = JSON.parse(readFileSync(packageJsonPath, 'utf-8'));
    const deps = { ...packageJson.dependencies || {}, ...packageJson.devDependencies || {} };
    
    Object.keys(deps).forEach(dep => {
      const depPath = join(process.cwd(), 'node_modules', dep);
      if (existsSync(depPath)) {
        analysis.dependencies[dep] = getDirectorySize(depPath);
      }
    });
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  analysis.recommendations = generateRecommendations(analysis);

  return analysis;
}

function getJSFiles(dirPath: string): string[] {
  if (!existsSync(dirPath)) return [];
  
  const files: string[] = [];
  
  function scanDir(currentPath: string, relativePath = '') {
    const items = readdirSync(currentPath);
    
    for (const item of items) {
      const fullPath = join(currentPath, item);
      const relativeFilePath = join(relativePath, item);
      const stat = statSync(fullPath);
      
      if (stat.isDirectory()) {
        scanDir(fullPath, relativeFilePath);
      } else if (item.endsWith('.js') || item.endsWith('.mjs') || item.endsWith('.css')) {
        files.push(relativeFilePath);
      }
    }
  }
  
  scanDir(dirPath);
  return files;
}

function generateRecommendations(analysis: DetailedBundleAnalysis): string[] {
  const recommendations: string[] = [];
  const totalSizeMB = analysis.totalSize / 1024 / 1024;
  
  // –ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
  if (totalSizeMB > 2) {
    recommendations.push('üö® Bundle —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>2MB) - –∫—Ä–∏—Ç–∏—á–Ω–æ –Ω—É–∂–µ–Ω code splitting');
  } else if (totalSizeMB > 1) {
    recommendations.push('‚ö†Ô∏è Bundle –±–æ–ª—å—à–æ–π (>1MB) - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è code splitting');
  }

  // –ê–Ω–∞–ª–∏–∑ —á–∞–Ω–∫–æ–≤
  const largeChunks = Object.entries(analysis.chunkSizes).filter(([,size]) => size > 500 * 1024);
  if (largeChunks.length > 0) {
    recommendations.push(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${largeChunks.length} —á–∞–Ω–∫–æ–≤ >500KB - —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –∏—Ö`);
  }

  // –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  const heavyDeps = Object.entries(analysis.dependencies)
    .filter(([,size]) => size > 10 * 1024 * 1024)
    .sort(([,a], [,b]) => b - a);
    
  if (heavyDeps.length > 0) {
    const topHeavy = heavyDeps.slice(0, 3).map(([name]) => name).join(', ');
    recommendations.push(`üîó –¢—è–∂–µ–ª—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${topHeavy} - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã`);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ tree shaking –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
  const totalDepsSize = Object.values(analysis.dependencies).reduce((a, b) => a + b, 0);
  if (totalDepsSize > analysis.totalSize * 10) {
    recommendations.push('üå≥ –ú–Ω–æ–≥–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –∫–æ–¥–∞ - –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ tree shaking');
  }

  return recommendations;
}

function saveAnalysisReport(analysis: DetailedBundleAnalysis) {
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
  const reportDir = join(process.cwd(), 'bundle-analysis');
  if (!existsSync(reportDir)) {
    mkdirSync(reportDir, { recursive: true });
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –æ—Ç—á–µ—Ç
  const jsonPath = join(reportDir, 'analysis.json');
  writeFileSync(jsonPath, JSON.stringify(analysis, null, 2));

  // –°–æ–∑–¥–∞–µ–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –æ—Ç—á–µ—Ç
  const report = generateHumanReadableReport(analysis);
  const reportPath = join(reportDir, 'report.md');
  writeFileSync(reportPath, report);

  console.log(chalk.green(`‚úÖ Analysis saved to ${reportDir}/`));
}

function generateHumanReadableReport(analysis: DetailedBundleAnalysis): string {
  const totalSizeMB = (analysis.totalSize / 1024 / 1024).toFixed(2);
  const largestChunks = Object.entries(analysis.chunkSizes)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 10);
  
  const largestDeps = Object.entries(analysis.dependencies)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 10);

  return `# Bundle Analysis Report

**Date**: ${new Date(analysis.timestamp).toLocaleString()}
**Total Size**: ${totalSizeMB} MB

## üì¶ Largest Chunks
${largestChunks.map(([name, size]) => `- **${name}**: ${formatBytes(size)}`).join('\n')}

## üîó Heaviest Dependencies  
${largestDeps.map(([name, size]) => `- **${name}**: ${formatBytes(size)}`).join('\n')}

## üí° Recommendations
${analysis.recommendations.map(rec => `- ${rec}`).join('\n')}

## üéØ Next Steps for Performance Sprint
1. Implement tree shaking for unused code elimination
2. Set up code splitting for large chunks (>500KB)
3. Consider lazy loading for heavy dependencies
4. Optimize images and fonts
5. Set up bundle size monitoring in CI/CD
`;
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –¥–ª—è Performance Sprint
 */
function analyzeBundles() {
  console.log(chalk.blue.bold('\nÔøΩ PERFORMANCE OPTIMIZATION SPRINT - Bundle Analysis\n'));

  // Build the project first
  console.log(chalk.yellow('Building project for analysis...'));
  try {
    execSync('pnpm run build', { stdio: 'inherit' });
    console.log(chalk.green('‚úÖ Build completed successfully'));
  } catch (error) {
    console.log(chalk.red('‚ùå Build failed - analyzing existing artifacts'));
  }

  // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
  console.log(chalk.blue('\nÔøΩ Performing detailed bundle analysis...'));
  const detailedAnalysis = performDetailedAnalysis();

  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å
  console.log(chalk.blue.bold('\nüì¶ CURRENT BUNDLE STATE:\n'));
  console.log(chalk.cyan(`üìä Total Size: ${formatBytes(detailedAnalysis.totalSize)}`));
  console.log(chalk.cyan(`üìÅ Number of chunks: ${Object.keys(detailedAnalysis.chunkSizes).length}`));

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—ã–µ –±–æ–ª—å—à–∏–µ —á–∞–Ω–∫–∏
  const largestChunks = Object.entries(detailedAnalysis.chunkSizes)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 5);

  console.log(chalk.blue.bold('\nüì¶ LARGEST CHUNKS:'));
  largestChunks.forEach(([name, size]) => {
    const barLength = Math.ceil(size / 10000);
    const bar = '‚ñà'.repeat(Math.min(barLength, 30));
    console.log(
      chalk.cyan(`   ${name.padEnd(30)}`),
      chalk.yellow(`${formatBytes(size).padStart(10)}`),
      chalk.gray(bar)
    );
  });

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—ã–µ —Ç—è–∂–µ–ª—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  const heaviestDeps = Object.entries(detailedAnalysis.dependencies)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 5);

  console.log(chalk.blue.bold('\nüîó HEAVIEST DEPENDENCIES:'));
  heaviestDeps.forEach(([name, size]) => {
    const sizeMB = (size / 1024 / 1024).toFixed(2);
    console.log(chalk.cyan(`   ${name.padEnd(30)} ${sizeMB} MB`));
  });

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log(chalk.blue.bold('\nüí° OPTIMIZATION RECOMMENDATIONS:'));
  detailedAnalysis.recommendations.forEach(rec => {
    console.log(chalk.yellow(`   ${rec}`));
  });

  // Performance budget check
  const totalSizeMB = detailedAnalysis.totalSize / 1024 / 1024;
  const BUDGET_LIMIT_MB = 2; // 2MB budget

  console.log(chalk.blue.bold('\nüéØ PERFORMANCE BUDGET CHECK:'));
  if (totalSizeMB > BUDGET_LIMIT_MB) {
    console.log(chalk.red(`‚ùå Over budget: ${totalSizeMB.toFixed(2)}MB > ${BUDGET_LIMIT_MB}MB`));
  } else {
    console.log(chalk.green(`‚úÖ Within budget: ${totalSizeMB.toFixed(2)}MB ‚â§ ${BUDGET_LIMIT_MB}MB`));
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
  saveAnalysisReport(detailedAnalysis);

  // Sprint planning –≤—ã–≤–æ–¥
  console.log(chalk.blue.bold('\nüöÄ NEXT STEPS FOR PERFORMANCE SPRINT:'));
  console.log(chalk.gray('   1. üå≥ Configure tree shaking (remove unused code)'));
  console.log(chalk.gray('   2. ‚úÇÔ∏è  Implement code splitting (break large chunks)'));
  console.log(chalk.gray('   3. üñºÔ∏è  Optimize images and media assets'));
  console.log(chalk.gray('   4. üìù Set up Core Web Vitals monitoring'));
  console.log(chalk.gray('   5. üé® Extract critical CSS for above-the-fold content'));

  console.log(chalk.green('\n‚úÖ Baseline analysis complete! Check bundle-analysis/ for detailed reports.'));
  
  return detailedAnalysis;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
if (require.main === module) {
  analyzeBundles();
}
