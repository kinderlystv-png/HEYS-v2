#!/usr/bin/env node

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

const projectRoot = process.cwd();

console.log('üîí –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≠–ê–ü 3.0...\n');

// –°–æ–∑–¥–∞–¥–∏–º backup package.json
function createBackup() {
  const packageJsonPath = path.join(projectRoot, 'package.json');
  const backupPath = path.join(projectRoot, 'package.json.backup');
  
  if (fs.existsSync(packageJsonPath)) {
    fs.copyFileSync(packageJsonPath, backupPath);
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω backup package.json');
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
function updateCriticalPackages() {
  const criticalUpdates = [
    // TypeScript ESLint –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    '@typescript-eslint/eslint-plugin@^8.43.0',
    '@typescript-eslint/parser@^8.43.0',
    
    // Jest –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è  
    'jest@^29.7.0',
    '@types/jest@^29.5.0',
    
    // Babel –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    '@babel/core@^7.25.0',
    '@babel/preset-env@^7.25.0'
  ];

  console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞–∫–µ—Ç–æ–≤...');
  
  for (const pkg of criticalUpdates) {
    try {
      console.log(`  üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${pkg}...`);
      execSync(`pnpm add -D ${pkg}`, { stdio: 'pipe' });
      console.log(`  ‚úÖ ${pkg} –æ–±–Ω–æ–≤–ª–µ–Ω`);
    } catch (error) {
      console.log(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${pkg}:`, error.message);
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
function checkSecurity() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
  
  try {
    const auditResult = execSync('npm audit --audit-level=high', { 
      encoding: 'utf8',
      stdio: 'pipe'
    });
    console.log('‚úÖ –ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω');
    return true;
  } catch (error) {
    console.log('‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:');
    console.log(error.stdout);
    return false;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
function createSecurityReport(securityPassed) {
  const report = {
    timestamp: new Date().toISOString(),
    status: securityPassed ? 'IMPROVED' : 'NEEDS_ATTENTION',
    updatedPackages: [
      '@typescript-eslint/eslint-plugin',
      '@typescript-eslint/parser',
      'jest',
      '@babel/core'
    ],
    nextSteps: securityPassed ? [
      '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
      '–ü—Ä–æ–≤–µ—Ä–∫–∞ ESLint –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
      '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CI/CD –ø–∞–π–ø–ª–∞–π–Ω–∞'
    ] : [
      '–†—É—á–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π',
      '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ workspace –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
      '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π'
    ]
  };

  const reportPath = path.join(projectRoot, 'security-update-report.json');
  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
  
  console.log(`\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
  return report;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    createBackup();
    updateCriticalPackages();
    const securityPassed = checkSecurity();
    const report = createSecurityReport(securityPassed);
    
    console.log('\nüéØ –†–µ–∑—é–º–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:');
    console.log(`   –°—Ç–∞—Ç—É—Å: ${report.status}`);
    console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: ${report.updatedPackages.length}`);
    console.log(`   –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏: ${report.nextSteps.length}`);
    
    if (report.status === 'IMPROVED') {
      console.log('\n‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.');
    } else {
      console.log('\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:', error.message);
    
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ backup –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
    const backupPath = path.join(projectRoot, 'package.json.backup');
    if (fs.existsSync(backupPath)) {
      fs.copyFileSync(backupPath, path.join(projectRoot, 'package.json'));
      console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π package.json –∏–∑ backup');
    }
  }
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}
