// filepath: scripts/tree-shaking-report.ts
// Tree Shaking Analysis –¥–ª—è Performance Optimization Sprint –î–µ–Ω—å 2

import { execSync } from 'child_process';
import { readFileSync, writeFileSync, existsSync } from 'fs';
import { join } from 'path';
import chalk from 'chalk';

interface BundleAnalysis {
  before: {
    totalSize: number;
    chunks: Record<string, number>;
  };
  after: {
    totalSize: number;
    chunks: Record<string, number>;
  };
  reduction: {
    totalBytes: number;
    percentage: number;
  };
}

class TreeShakingAnalyzer {
  private workspaceRoot: string;
  private buildPath: string;

  constructor() {
    this.workspaceRoot = process.cwd();
    this.buildPath = join(this.workspaceRoot, 'apps', 'web', 'dist');
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å tree shaking
   */
  async analyzeTreeShaking(): Promise<void> {
    console.log(chalk.blue('üå≥ TREE SHAKING ANALYSIS - Performance Sprint Day 2\n'));

    // –°–Ω–∞—á–∞–ª–∞ –±–∏–ª–¥ –±–µ–∑ tree shaking –¥–ª—è baseline
    console.log(chalk.yellow('üì¶ Building baseline (basic optimization)...'));
    const beforeAnalysis = await this.buildAndMeasure(false);

    // –ó–∞—Ç–µ–º –±–∏–ª–¥ —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º tree shaking
    console.log(chalk.yellow('üå≥ Building with aggressive tree shaking...'));
    const afterAnalysis = await this.buildAndMeasure(true);

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    this.compareResults(beforeAnalysis, afterAnalysis);
  }

  /**
   * –ë–∏–ª–¥ –∏ –∏–∑–º–µ—Ä–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ bundle
   */
  private async buildAndMeasure(withTreeShaking: boolean): Promise<{totalSize: number, chunks: Record<string, number>}> {
    try {
      // –û—á–∏—â–∞–µ–º dist
      if (existsSync(this.buildPath)) {
        try {
          execSync(`if (Test-Path "${this.buildPath}") { Remove-Item "${this.buildPath}" -Recurse -Force -ErrorAction SilentlyContinue }`, { stdio: 'pipe' });
        } catch (error) {
          console.log(chalk.yellow('‚ö†Ô∏è Could not clean dist folder, continuing...'));
        }
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º build
      const buildCommand = withTreeShaking 
        ? 'pnpm --filter="@heys/web" run build'
        : 'pnpm --filter="@heys/web" run build';
      
      execSync(buildCommand, { 
        stdio: 'pipe',
        cwd: this.workspaceRoot
      });

      // –ò–∑–º–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
      return this.measureBundleSize();
    } catch (error) {
      console.log(chalk.red(`‚ùå Build failed: ${error}`));
      return { totalSize: 0, chunks: {} };
    }
  }

  /**
   * –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ bundle
   */
  private measureBundleSize(): {totalSize: number, chunks: Record<string, number>} {
    if (!existsSync(this.buildPath)) {
      return { totalSize: 0, chunks: {} };
    }

    const chunks: Record<string, number> = {};
    let totalSize = 0;

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ dist
      const output = execSync(`Get-ChildItem "${this.buildPath}" -Recurse -File | Select-Object Name, Length | ConvertTo-Json`, 
        { encoding: 'utf-8', stdio: 'pipe' }
      );
      
      const files = JSON.parse(output);
      const fileArray = Array.isArray(files) ? files : [files];

      fileArray.forEach((file: any) => {
        if (file.Name && file.Length) {
          chunks[file.Name] = file.Length;
          totalSize += file.Length;
        }
      });

    } catch (error) {
      console.log(chalk.yellow('‚ö†Ô∏è Could not measure bundle size accurately'));
    }

    return { totalSize, chunks };
  }

  /**
   * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   */
  private compareResults(
    before: {totalSize: number, chunks: Record<string, number>}, 
    after: {totalSize: number, chunks: Record<string, number>}
  ): void {
    console.log(chalk.blue('\nüìä TREE SHAKING EFFECTIVENESS REPORT\n'));

    const reduction = {
      totalBytes: before.totalSize - after.totalSize,
      percentage: before.totalSize > 0 ? ((before.totalSize - after.totalSize) / before.totalSize) * 100 : 0
    };

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log(chalk.yellow('üì¶ BUNDLE SIZE COMPARISON:'));
    console.log(`   Before tree shaking: ${chalk.red(this.formatBytes(before.totalSize))}`);
    console.log(`   After tree shaking:  ${chalk.green(this.formatBytes(after.totalSize))}`);
    console.log(`   Reduction:           ${chalk.cyan(this.formatBytes(reduction.totalBytes))} (${reduction.percentage.toFixed(2)}%)`);

    // –ê–Ω–∞–ª–∏–∑ –ø–æ —Ñ–∞–π–ª–∞–º
    console.log(chalk.blue('\nüîç FILE-BY-FILE ANALYSIS:'));
    
    const beforeFiles = Object.keys(before.chunks);
    const afterFiles = Object.keys(after.chunks);
    
    const jsFiles = afterFiles.filter(file => file.endsWith('.js'));
    
    jsFiles.forEach(file => {
      const beforeSize = before.chunks[file] || 0;
      const afterSize = after.chunks[file] || 0;
      const fileReduction = beforeSize - afterSize;
      const filePercentage = beforeSize > 0 ? (fileReduction / beforeSize) * 100 : 0;
      
      if (Math.abs(fileReduction) > 1024) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        const status = fileReduction > 0 ? chalk.green('‚Üì') : chalk.red('‚Üë');
        console.log(`   ${status} ${file}: ${this.formatBytes(afterSize)} (${filePercentage.toFixed(1)}% change)`);
      }
    });

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    this.generateTreeShakingRecommendations(reduction, after);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    this.saveReport({ before, after, reduction });
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  private generateTreeShakingRecommendations(
    reduction: {totalBytes: number, percentage: number},
    current: {totalSize: number, chunks: Record<string, number>}
  ): void {
    console.log(chalk.blue('\nüéØ TREE SHAKING RECOMMENDATIONS:\n'));

    if (reduction.percentage > 10) {
      console.log(chalk.green('‚úÖ EXCELLENT: Tree shaking is very effective!'));
    } else if (reduction.percentage > 5) {
      console.log(chalk.yellow('üü° GOOD: Tree shaking shows decent results'));
    } else {
      console.log(chalk.red('üî¥ POOR: Tree shaking needs improvement'));
    }

    const recommendations = [
      reduction.percentage < 5 ? 'üîß Check for side effects in imports' : null,
      'üì¶ Use ES modules instead of CommonJS',
      'üéØ Import only specific functions, not entire libraries',
      'üßπ Remove unused dependencies from package.json',
      '‚ö° Enable production mode for all builds'
    ].filter(Boolean);

    recommendations.forEach(rec => rec && console.log(`   ${rec}`));

    // Performance Sprint specific goals
    console.log(chalk.blue('\nüöÄ SPRINT GOALS PROGRESS:'));
    console.log(`   Target bundle reduction: 10-15%`);
    console.log(`   Current reduction: ${chalk.cyan(reduction.percentage.toFixed(2) + '%')}`);
    
    if (reduction.percentage >= 10) {
      console.log(chalk.green('   üéØ SPRINT GOAL ACHIEVED!'));
    } else {
      console.log(chalk.yellow(`   üìà Need ${(10 - reduction.percentage).toFixed(2)}% more reduction`));
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
   */
  private saveReport(analysis: BundleAnalysis): void {
    const reportPath = join(this.workspaceRoot, 'tree-shaking-report.json');
    
    const report = {
      timestamp: new Date().toISOString(),
      sprint: 'Performance Optimization Day 2',
      analysis,
      summary: {
        effectivenessScore: Math.min(100, analysis.reduction.percentage * 10),
        sprintGoalProgress: `${analysis.reduction.percentage.toFixed(2)}% / 10% target`,
        recommendation: analysis.reduction.percentage >= 10 ? 'Excellent' : 'Needs improvement'
      }
    };

    writeFileSync(reportPath, JSON.stringify(report, null, 2));
    console.log(chalk.green(`\nüìÅ Report saved to: ${reportPath}`));
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–π—Ç–æ–≤
   */
  private formatBytes(bytes: number): string {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
async function runTreeShakingAnalysis() {
  const analyzer = new TreeShakingAnalyzer();
  await analyzer.analyzeTreeShaking();
}

if (require.main === module) {
  runTreeShakingAnalysis().catch(console.error);
}

export { TreeShakingAnalyzer };
