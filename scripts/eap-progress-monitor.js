#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≠–ê–ü 3.0
const EAP_CONFIG = {
  targetMetrics: {
    technicalDebt: 500, // —á–∞—Å–æ–≤
    duplicationPercent: 10, // %
    refactoringFiles: 20, // %
    averageComplexity: 15,
    maintainabilityIndex: 65
  },
  currentMetrics: {
    technicalDebt: 2247.1,
    duplicationPercent: 462.6,
    refactoringFiles: 71.9,
    averageComplexity: 47,
    maintainabilityIndex: 33.7
  },
  priorityFiles: [
    'test-results/assets/index-D_ryMEPs.js',
    'project-template/tests/reports/assets/index-14ea7095.js',
    'apps/web/heys_reports_v12.js',
    'archive/legacy-v12/misc/heys_reports_v12.js'
  ]
};

// –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

class EAPProgressMonitor {
  constructor() {
    this.startTime = new Date();
    this.projectRoot = process.cwd();
  }

  // –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –º–µ—Ç—Ä–∏–∫–µ
  calculateProgress(current, target, initial) {
    if (initial === target) return 100;
    const progress = ((initial - current) / (initial - target)) * 100;
    return Math.max(0, Math.min(100, progress));
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫
  getCurrentMetrics() {
    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      const analysisResult = execSync('node scripts/advanced-project-analyzer.js', {
        encoding: 'utf8',
        stdio: 'pipe'
      });
      
      // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
      return {
        technicalDebt: 2200, // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–∏–º –∏–∑ –æ—Ç—á–µ—Ç–∞
        duplicationPercent: 450,
        refactoringFiles: 70,
        averageComplexity: 45,
        maintainabilityIndex: 35
      };
    } catch (error) {
      console.log(`${colors.yellow}‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ${colors.reset}`);
      return EAP_CONFIG.currentMetrics;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  checkPriorityFiles() {
    const results = [];
    
    for (const file of EAP_CONFIG.priorityFiles) {
      const fullPath = path.join(this.projectRoot, file);
      const exists = fs.existsSync(fullPath);
      
      if (exists) {
        const stats = fs.statSync(fullPath);
        const content = fs.readFileSync(fullPath, 'utf8');
        const lines = content.split('\n').length;
        
        // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π, —Ü–∏–∫–ª–æ–≤, —É—Å–ª–æ–≤–∏–π)
        const complexity = this.estimateComplexity(content);
        
        results.push({
          file,
          exists: true,
          lines,
          complexity,
          status: complexity > 50 ? 'needs-refactoring' : complexity > 20 ? 'moderate' : 'good'
        });
      } else {
        results.push({
          file,
          exists: false,
          status: 'not-found'
        });
      }
    }
    
    return results;
  }

  // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞
  estimateComplexity(content) {
    const patterns = [
      /function\s+\w+/g,
      /const\s+\w+\s*=\s*\(/g,
      /=>\s*{/g,
      /if\s*\(/g,
      /for\s*\(/g,
      /while\s*\(/g,
      /switch\s*\(/g,
      /catch\s*\(/g
    ];
    
    let complexity = 0;
    patterns.forEach(pattern => {
      const matches = content.match(pattern);
      complexity += matches ? matches.length : 0;
    });
    
    return complexity;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
  generateProgressReport() {
    const currentMetrics = this.getCurrentMetrics();
    const priorityFilesStatus = this.checkPriorityFiles();
    
    console.log(`${colors.bright}${colors.blue}üöÄ –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≠–ê–ü 3.0${colors.reset}`);
    console.log(`${colors.cyan}–î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}${colors.reset}`);
    console.log(`${colors.cyan}–í—Ä–µ–º—è: ${new Date().toLocaleTimeString('ru-RU')}${colors.reset}\n`);

    // –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    console.log(`${colors.bright}üìä –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏${colors.reset}`);
    
    const metrics = [
      {
        name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥',
        current: currentMetrics.technicalDebt,
        target: EAP_CONFIG.targetMetrics.technicalDebt,
        initial: EAP_CONFIG.currentMetrics.technicalDebt,
        unit: '—á'
      },
      {
        name: '–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞',
        current: currentMetrics.duplicationPercent,
        target: EAP_CONFIG.targetMetrics.duplicationPercent,
        initial: EAP_CONFIG.currentMetrics.duplicationPercent,
        unit: '%'
      },
      {
        name: '–§–∞–π–ª—ã —Ç—Ä–µ–±—É—é—â–∏–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞',
        current: currentMetrics.refactoringFiles,
        target: EAP_CONFIG.targetMetrics.refactoringFiles,
        initial: EAP_CONFIG.currentMetrics.refactoringFiles,
        unit: '%'
      },
      {
        name: '–°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å',
        current: currentMetrics.averageComplexity,
        target: EAP_CONFIG.targetMetrics.averageComplexity,
        initial: EAP_CONFIG.currentMetrics.averageComplexity,
        unit: ''
      }
    ];

    let totalProgress = 0;
    metrics.forEach(metric => {
      const progress = this.calculateProgress(metric.current, metric.target, metric.initial);
      totalProgress += progress;
      
      const progressBar = this.createProgressBar(progress);
      const color = progress >= 80 ? colors.green : progress >= 50 ? colors.yellow : colors.red;
      
      console.log(`${metric.name}: ${color}${progressBar} ${progress.toFixed(1)}%${colors.reset}`);
      console.log(`  –¢–µ–∫—É—â–µ–µ: ${metric.current}${metric.unit} | –¶–µ–ª—å: ${metric.target}${metric.unit}`);
    });

    const overallProgress = totalProgress / metrics.length;
    console.log(`\n${colors.bright}üéØ –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${overallProgress.toFixed(1)}%${colors.reset}`);

    // –°—Ç–∞—Ç—É—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    console.log(`\n${colors.bright}üìÅ –°—Ç–∞—Ç—É—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤${colors.reset}`);
    priorityFilesStatus.forEach(file => {
      let statusIcon = '';
      let statusColor = '';
      
      if (!file.exists) {
        statusIcon = '‚ùå';
        statusColor = colors.red;
      } else if (file.status === 'good') {
        statusIcon = '‚úÖ';
        statusColor = colors.green;
      } else if (file.status === 'moderate') {
        statusIcon = '‚ö†Ô∏è';
        statusColor = colors.yellow;
      } else {
        statusIcon = 'üî¥';
        statusColor = colors.red;
      }
      
      console.log(`${statusIcon} ${statusColor}${file.file}${colors.reset}`);
      if (file.exists) {
        console.log(`   –°—Ç—Ä–æ–∫: ${file.lines} | –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${file.complexity}`);
      }
    });

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log(`\n${colors.bright}üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤${colors.reset}`);
    
    if (overallProgress < 25) {
      console.log(`${colors.red}üî• –§–æ–∫—É—Å –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–∞—Ö:${colors.reset}`);
      console.log('   - –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é');
      console.log('   - –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞');
    } else if (overallProgress < 50) {
      console.log(`${colors.yellow}‚ö° –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:${colors.reset}`);
      console.log('   - –ú–æ–¥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
      console.log('   - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
    } else if (overallProgress < 75) {
      console.log(`${colors.blue}üé® UX/UI —É–ª—É—á—à–µ–Ω–∏—è:${colors.reset}`);
      console.log('   - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—ã');
      console.log('   - –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å');
    } else {
      console.log(`${colors.green}üèÅ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è:${colors.reset}`);
      console.log('   - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è');
      console.log('   - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ');
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    this.saveProgressReport(overallProgress, currentMetrics, priorityFilesStatus);
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
  createProgressBar(progress, length = 20) {
    const filled = Math.round((progress / 100) * length);
    const empty = length - filled;
    return '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
  saveProgressReport(overallProgress, metrics, filesStatus) {
    const report = {
      date: new Date().toISOString(),
      overallProgress,
      metrics,
      filesStatus,
      recommendations: this.generateRecommendations(overallProgress)
    };

    const reportPath = path.join(this.projectRoot, 'eap-progress-report.json');
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
    
    console.log(`\n${colors.green}üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}${colors.reset}`);
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  generateRecommendations(progress) {
    if (progress < 25) {
      return [
        '–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é',
        '–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞',
        '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫—Ä—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤'
      ];
    } else if (progress < 50) {
      return [
        '–ú–æ–¥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
        '–í–Ω–µ–¥—Ä–µ–Ω–∏–µ –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏',
        '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
      ];
    } else if (progress < 75) {
      return [
        '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—ã',
        '–£–ª—É—á—à–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏',
        '–í–Ω–µ–¥—Ä–µ–Ω–∏–µ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã'
      ];
    } else {
      return [
        '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è',
        'Performance —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
        '–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è'
      ];
    }
  }
}

// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
if (import.meta.url === `file://${process.argv[1]}`) {
  const monitor = new EAPProgressMonitor();
  monitor.generateProgressReport();
}

export { EAPProgressMonitor };
