#!/usr/bin/env node

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π CLI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ code splitting
 * –ë–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node code-splitting-simple.js [–ø—É—Ç—å]
 */

const fs = require('fs');
const path = require('path');

// –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const CONFIG = {
  minChunkSize: 50 * 1024, // 50KB
  maxChunks: 20,
  excludePatterns: ['node_modules', '.git', 'dist', 'build', '.test.', '.spec.'],
  heavyLibraries: ['lodash', 'moment', 'three', 'chart', '@mui', 'antd', 'fabric'],
  fileExtensions: ['.ts', '.tsx', '.js', '.jsx', '.vue']
};

/**
 * –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä code splitting
 */
class SimpleCodeSplittingAnalyzer {
  constructor() {
    this.results = {
      totalFiles: 0,
      totalSize: 0,
      splitOpportunities: [],
      summary: {}
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
   */
  analyze(projectPath) {
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ code splitting...');
    console.log(`üìÅ –ü—É—Ç—å: ${projectPath}\n`);

    const files = this.findFiles(projectPath);
    this.results.totalFiles = files.length;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    files.forEach(file => {
      this.results.totalSize += file.size;
      this.analyzeFile(file);
    });

    this.generateSummary();
    return this.results;
  }

  /**
   * –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤
   */
  findFiles(rootPath) {
    const files = [];
    
    const traverse = (currentPath) => {
      try {
        const items = fs.readdirSync(currentPath);
        
        for (const item of items) {
          const fullPath = path.join(currentPath, item);
          const relativePath = path.relative(rootPath, fullPath);
          
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
          if (CONFIG.excludePatterns.some(pattern => relativePath.includes(pattern))) {
            continue;
          }
          
          const stat = fs.statSync(fullPath);
          
          if (stat.isDirectory()) {
            traverse(fullPath);
          } else if (this.isRelevantFile(fullPath)) {
            files.push({
              path: fullPath,
              relativePath,
              size: stat.size,
              name: path.basename(fullPath)
            });
          }
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      }
    };

    traverse(rootPath);
    return files;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
   */
  analyzeFile(file) {
    try {
      const content = fs.readFileSync(file.path, 'utf-8');
      
      // Route —Ñ–∞–π–ª—ã
      if (this.isRouteFile(file, content)) {
        this.addOpportunity(file, 'route', 'Route-based splitting', 'high');
      }
      
      // –ë–æ–ª—å—à–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
      if (this.isLargeComponent(file, content)) {
        this.addOpportunity(file, 'component', `Large component (${Math.round(file.size / 1024)}KB)`, 'medium');
      }
      
      // Vendor –∏–º–ø–æ—Ä—Ç—ã
      const vendorImports = this.findVendorImports(content);
      if (vendorImports.length > 0) {
        this.addOpportunity(file, 'vendor', `Heavy imports: ${vendorImports.join(', ')}`, 'medium');
      }
      
      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
      const dynamicOps = this.findDynamicOpportunities(content);
      if (dynamicOps.length > 0) {
        this.addOpportunity(file, 'dynamic', `Dynamic opportunities: ${dynamicOps.join(', ')}`, 'low');
      }
      
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
   */
  addOpportunity(file, type, reason, priority) {
    this.results.splitOpportunities.push({
      file: file.relativePath,
      type,
      reason,
      priority,
      size: file.size,
      sizeKB: Math.round(file.size / 1024)
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ route —Ñ–∞–π–ª
   */
  isRouteFile(file, content) {
    const routePatterns = [
      /pages?\/|routes?\//,
      /useRouter|Router|Route/,
      /navigate|redirect/i
    ];
    
    return routePatterns.some(pattern => 
      pattern.test(file.relativePath) || pattern.test(content)
    );
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ–ª—å—à–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
   */
  isLargeComponent(file, content) {
    const isComponent = /\.(tsx?|jsx?)$/.test(file.path) && 
                       /export\s+(?:default\s+)?(?:function|const)\s+[A-Z]/.test(content);
    
    return isComponent && file.size > CONFIG.minChunkSize;
  }

  /**
   * –ü–æ–∏—Å–∫ vendor –∏–º–ø–æ—Ä—Ç–æ–≤
   */
  findVendorImports(content) {
    return CONFIG.heavyLibraries.filter(lib => 
      content.includes(`'${lib}'`) || 
      content.includes(`"${lib}"`) ||
      content.includes(`from '${lib}/`) ||
      content.includes(`from "${lib}/`)
    );
  }

  /**
   * –ü–æ–∏—Å–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
   */
  findDynamicOpportunities(content) {
    const opportunities = [];
    
    if (/Modal|Dialog|Popup/i.test(content)) {
      opportunities.push('–º–æ–¥–∞–ª—å–Ω—ã–µ');
    }
    
    if (/Admin|Management|Settings/i.test(content)) {
      opportunities.push('–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
    }
    
    if (/Tab|Accordion|Collapse/i.test(content)) {
      opportunities.push('–≤–∫–ª–∞–¥–∫–∏');
    }
    
    if (/Chart|Graph|Plot/i.test(content)) {
      opportunities.push('–≥—Ä–∞—Ñ–∏–∫–∏');
    }
    
    return opportunities;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞
   */
  isRelevantFile(filePath) {
    return CONFIG.fileExtensions.some(ext => filePath.endsWith(ext));
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏
   */
  generateSummary() {
    const opportunities = this.results.splitOpportunities;
    
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    const byType = opportunities.reduce((acc, op) => {
      acc[op.type] = (acc[op.type] || 0) + 1;
      return acc;
    }, {});
    
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    const byPriority = opportunities.reduce((acc, op) => {
      acc[op.priority] = (acc[op.priority] || 0) + 1;
      return acc;
    }, {});
    
    // –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è
    const splitSize = opportunities.reduce((sum, op) => sum + op.size, 0);
    const savingsPercent = this.results.totalSize > 0 
      ? Math.round((splitSize / this.results.totalSize) * 100) 
      : 0;
    
    this.results.summary = {
      byType,
      byPriority,
      totalOpportunities: opportunities.length,
      potentialSavings: {
        bytes: splitSize,
        kb: Math.round(splitSize / 1024),
        percent: savingsPercent
      }
    };
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
 */
function formatReport(results) {
  const { totalFiles, totalSize, splitOpportunities, summary } = results;
  
  let report = `
üöÄ Code Splitting Analysis
==========================

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –§–∞–π–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${totalFiles}
‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${Math.round(totalSize / 1024)} KB
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: ${summary.totalOpportunities}

`;

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
  if (Object.keys(summary.byType).length > 0) {
    report += `üéØ –ü–û –¢–ò–ü–ê–ú:\n`;
    Object.entries(summary.byType).forEach(([type, count]) => {
      const emoji = {
        route: 'üõ£Ô∏è',
        component: 'üß©', 
        vendor: 'üì¶',
        dynamic: '‚ö°'
      }[type] || 'üìÅ';
      
      report += `${emoji} ${type}: ${count}\n`;
    });
    report += '\n';
  }

  // –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è
  if (summary.potentialSavings.percent > 0) {
    report += `üíæ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –≠–ö–û–ù–û–ú–ò–Ø:
‚Ä¢ –†–∞–∑–º–µ—Ä –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: ${summary.potentialSavings.kb} KB
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞: ${summary.potentialSavings.percent}%

`;
  }

  // –¢–æ–ø —Ñ–∞–π–ª–æ–≤
  const topFiles = splitOpportunities
    .filter(op => op.priority === 'high')
    .slice(0, 5);
    
  if (topFiles.length > 0) {
    report += `üîù –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –§–ê–ô–õ–´:\n`;
    topFiles.forEach(op => {
      report += `‚Ä¢ ${op.file} (${op.sizeKB}KB) - ${op.reason}\n`;
    });
    report += '\n';
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  report += `üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n`;
  
  if (summary.byType.route > 0) {
    report += `1. üõ£Ô∏è Route-based splitting –¥–ª—è ${summary.byType.route} –º–∞—Ä—à—Ä—É—Ç–æ–≤\n`;
    report += `   const LazyPage = React.lazy(() => import('./Page'));\n\n`;
  }
  
  if (summary.byType.component > 0) {
    report += `2. üß© Component splitting –¥–ª—è ${summary.byType.component} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤\n`;
    report += `   const LazyComponent = React.lazy(() => import('./Component'));\n\n`;
  }
  
  if (summary.byType.vendor > 0) {
    report += `3. üì¶ Vendor splitting –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫\n`;
    report += `   –ù–∞—Å—Ç—Ä–æ–π—Ç–µ manualChunks –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–Ω–¥–ª–µ—Ä–∞\n\n`;
  }

  // –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Vite
  report += `‚öôÔ∏è –ü–†–ò–ú–ï–† –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò VITE:
// vite.config.ts
export default {
  build: {
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
          router: ['react-router-dom'],
        }
      }
    }
  }
}

`;

  return report;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function main() {
  const projectPath = process.argv[2] || process.cwd();
  
  try {
    console.log('üöÄ HEYS Simple Code Splitting Analyzer');
    console.log('======================================');
    
    const analyzer = new SimpleCodeSplittingAnalyzer();
    const results = analyzer.analyze(projectPath);
    const report = formatReport(results);
    
    console.log(report);
    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main();
}

module.exports = { SimpleCodeSplittingAnalyzer };
