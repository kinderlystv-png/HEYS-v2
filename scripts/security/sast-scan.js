#!/usr/bin/env node
/**
 * SAST (Static Application Security Testing) —Å–∫–∞–Ω–µ—Ä
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–¥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 * 
 * @created –ö–¢4 - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 * @author HEYS Security Team
 */

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
const SCAN_CONFIG = {
  projectRoot: path.resolve(__dirname, '../../'),
  outputDir: path.resolve(__dirname, '../../security-reports'),
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  scanPatterns: [
    'apps/**/*.{ts,tsx,js,jsx}',
    'packages/**/*.{ts,tsx,js,jsx}',
    'src/**/*.{ts,tsx,js,jsx}'
  ],
  
  // –ò—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  excludePatterns: [
    '**/node_modules/**',
    '**/dist/**',
    '**/build/**',
    '**/*.test.{ts,tsx,js,jsx}',
    '**/*.spec.{ts,tsx,js,jsx}',
    '**/coverage/**'
  ],
  
  // –ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  securityRules: {
    // SQL Injection
    sqlInjection: {
      patterns: [
        /\$\{[^}]*\}.*query/gi,
        /query.*\+.*\$\{/gi,
        /sql.*\+.*\$\{/gi,
        /SELECT.*\+.*\$\{/gi,
        /INSERT.*\+.*\$\{/gi,
        /UPDATE.*\+.*\$\{/gi,
        /DELETE.*\+.*\$\{/gi
      ],
      severity: 'high',
      description: 'Potential SQL Injection vulnerability'
    },
    
    // XSS (Cross-Site Scripting)
    xss: {
      patterns: [
        /dangerouslySetInnerHTML/gi,
        /innerHTML\s*=\s*[^'"]*\$\{/gi,
        /document\.write\(/gi,
        /eval\s*\(/gi,
        /new\s+Function\s*\(/gi
      ],
      severity: 'high',
      description: 'Potential XSS vulnerability'
    },
    
    // –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    insecureOperations: {
      patterns: [
        /Math\.random\(\)/gi,
        /Date\.now\(\)/gi,
        /new\s+Date\(\)\.getTime\(\)/gi,
        /crypto\.pseudoRandomBytes/gi
      ],
      severity: 'medium',
      description: 'Use of cryptographically insecure random number generation'
    },
    
    // –ñ–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã
    hardcodedSecrets: {
      patterns: [
        /password\s*=\s*['"][^'"]+['"]/gi,
        /api[_-]?key\s*=\s*['"][^'"]+['"]/gi,
        /secret\s*=\s*['"][^'"]+['"]/gi,
        /token\s*=\s*['"][^'"]+['"]/gi,
        /AKIA[0-9A-Z]{16}/gi, // AWS Access Key
        /sk_live_[0-9a-zA-Z]{24}/gi, // Stripe Secret Key
        /ghp_[0-9a-zA-Z]{36}/gi // GitHub Personal Access Token
      ],
      severity: 'critical',
      description: 'Potential hardcoded secret or API key'
    },
    
    // –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã
    insecureHttp: {
      patterns: [
        /http:\/\/(?!localhost|127\.0\.0\.1|0\.0\.0\.0)/gi,
        /fetch\s*\(\s*['"]http:/gi,
        /axios\.[get|post|put|delete]\s*\(\s*['"]http:/gi
      ],
      severity: 'medium',
      description: 'Use of insecure HTTP instead of HTTPS'
    },
    
    // –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è CORS
    insecureCors: {
      patterns: [
        /Access-Control-Allow-Origin\s*:\s*\*/gi,
        /cors\s*\(\s*\{\s*origin\s*:\s*true/gi,
        /cors\s*\(\s*\{\s*origin\s*:\s*['"]?\*/gi
      ],
      severity: 'medium',
      description: 'Insecure CORS configuration'
    },
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    debugInformation: {
      patterns: [
        /console\.log\s*\(.*password/gi,
        /console\.log\s*\(.*token/gi,
        /console\.log\s*\(.*secret/gi,
        /console\.log\s*\(.*key/gi,
        /alert\s*\(.*password/gi
      ],
      severity: 'low',
      description: 'Potential information disclosure through debug output'
    }
  }
};

class SASTScanner {
  constructor() {
    this.results = {
      timestamp: new Date().toISOString(),
      scannedFiles: 0,
      vulnerabilities: [],
      summary: {
        critical: 0,
        high: 0,
        medium: 0,
        low: 0,
        total: 0
      }
    };
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ SAST —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async runScan() {
    console.log('üõ°Ô∏è Starting SAST Security Scan...\n');
    
    try {
      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
      this.ensureOutputDirectory();
      
      // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      const filesToScan = await this.getFilesToScan();
      console.log(`üìÅ Found ${filesToScan.length} files to scan`);
      
      // –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
      for (const filePath of filesToScan) {
        await this.scanFile(filePath);
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
      await this.generateReport();
      
      // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      this.printResults();
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
      return this.getExitCode();
      
    } catch (error) {
      console.error('‚ùå SAST scan failed:', error.message);
      return 1;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async getFilesToScan() {
    const files = [];
    
    for (const pattern of SCAN_CONFIG.scanPatterns) {
      try {
        const globFiles = execSync(`find ${SCAN_CONFIG.projectRoot} -name "${pattern}" -type f`, 
          { encoding: 'utf8' }
        ).trim().split('\n').filter(Boolean);
        
        files.push(...globFiles);
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
      }
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    return files.filter(file => {
      return !SCAN_CONFIG.excludePatterns.some(pattern => 
        new RegExp(pattern.replace(/\*\*/g, '.*').replace(/\*/g, '[^/]*')).test(file)
      );
    });
  }

  /**
   * –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
   */
  async scanFile(filePath) {
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      const relativePath = path.relative(SCAN_CONFIG.projectRoot, filePath);
      
      this.results.scannedFiles++;
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      for (const [ruleName, rule] of Object.entries(SCAN_CONFIG.securityRules)) {
        for (const pattern of rule.patterns) {
          const matches = [...content.matchAll(new RegExp(pattern, 'gi'))];
          
          for (const match of matches) {
            const lineNumber = this.getLineNumber(content, match.index);
            
            const vulnerability = {
              id: `${ruleName}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
              file: relativePath,
              line: lineNumber,
              rule: ruleName,
              severity: rule.severity,
              description: rule.description,
              evidence: match[0].trim(),
              recommendation: this.getRecommendation(ruleName),
              timestamp: new Date().toISOString()
            };
            
            this.results.vulnerabilities.push(vulnerability);
            this.results.summary[rule.severity]++;
            this.results.summary.total++;
          }
        }
      }
      
    } catch (error) {
      console.warn(`‚ö†Ô∏è Failed to scan ${filePath}: ${error.message}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É —Å–∏–º–≤–æ–ª–∞
   */
  getLineNumber(content, index) {
    const lines = content.substring(0, index).split('\n');
    return lines.length;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é —É—è–∑–≤–∏–º–æ—Å—Ç–∏
   */
  getRecommendation(ruleName) {
    const recommendations = {
      sqlInjection: 'Use parameterized queries or ORM methods instead of string concatenation',
      xss: 'Sanitize user input and use safe DOM manipulation methods',
      insecureOperations: 'Use cryptographically secure random number generators',
      hardcodedSecrets: 'Move secrets to environment variables or secure key management',
      insecureHttp: 'Use HTTPS for all external communications',
      insecureCors: 'Configure CORS with specific allowed origins',
      debugInformation: 'Remove debug statements that expose sensitive information'
    };
    
    return recommendations[ruleName] || 'Review and fix the identified security issue';
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
   */
  ensureOutputDirectory() {
    if (!fs.existsSync(SCAN_CONFIG.outputDir)) {
      fs.mkdirSync(SCAN_CONFIG.outputDir, { recursive: true });
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
   */
  async generateReport() {
    const reportData = {
      ...this.results,
      scanConfig: {
        patterns: SCAN_CONFIG.scanPatterns,
        excludes: SCAN_CONFIG.excludePatterns,
        rules: Object.keys(SCAN_CONFIG.securityRules)
      }
    };
    
    // JSON –æ—Ç—á–µ—Ç
    const jsonReportPath = path.join(SCAN_CONFIG.outputDir, 'sast-report.json');
    fs.writeFileSync(jsonReportPath, JSON.stringify(reportData, null, 2));
    
    // HTML –æ—Ç—á–µ—Ç
    const htmlReportPath = path.join(SCAN_CONFIG.outputDir, 'sast-report.html');
    const htmlContent = this.generateHtmlReport(reportData);
    fs.writeFileSync(htmlReportPath, htmlContent);
    
    // SARIF –æ—Ç—á–µ—Ç –¥–ª—è GitHub
    const sarifReportPath = path.join(SCAN_CONFIG.outputDir, 'sast-report.sarif');
    const sarifContent = this.generateSarifReport(reportData);
    fs.writeFileSync(sarifReportPath, JSON.stringify(sarifContent, null, 2));
    
    console.log(`üìä Reports generated:`);
    console.log(`   üìÑ JSON: ${jsonReportPath}`);
    console.log(`   üåê HTML: ${htmlReportPath}`);
    console.log(`   üìã SARIF: ${sarifReportPath}`);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞
   */
  generateHtmlReport(data) {
    const severityColors = {
      critical: '#dc2626',
      high: '#ea580c',
      medium: '#d97706',
      low: '#65a30d'
    };

    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SAST Security Report - HEYS</title>
    <style>
        body { font-family: system-ui, -apple-system, sans-serif; margin: 0; padding: 20px; background: #f8fafc; }
        .container { max-width: 1200px; margin: 0 auto; }
        .header { background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
        .summary { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 20px; }
        .summary-card { background: white; padding: 20px; border-radius: 8px; text-align: center; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
        .vulnerability { background: white; margin-bottom: 15px; border-radius: 8px; overflow: hidden; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
        .vuln-header { padding: 15px; border-left: 4px solid; }
        .vuln-body { padding: 0 15px 15px; }
        .severity-critical { border-left-color: ${severityColors.critical}; }
        .severity-high { border-left-color: ${severityColors.high}; }
        .severity-medium { border-left-color: ${severityColors.medium}; }
        .severity-low { border-left-color: ${severityColors.low}; }
        .code { background: #f1f5f9; padding: 10px; border-radius: 4px; font-family: monospace; margin: 10px 0; }
        .meta { color: #64748b; font-size: 14px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üõ°Ô∏è SAST Security Report</h1>
            <p class="meta">Generated: ${data.timestamp} | Files Scanned: ${data.scannedFiles}</p>
        </div>
        
        <div class="summary">
            <div class="summary-card">
                <h3 style="color: ${severityColors.critical}; margin: 0;">Critical</h3>
                <p style="font-size: 24px; margin: 10px 0;">${data.summary.critical}</p>
            </div>
            <div class="summary-card">
                <h3 style="color: ${severityColors.high}; margin: 0;">High</h3>
                <p style="font-size: 24px; margin: 10px 0;">${data.summary.high}</p>
            </div>
            <div class="summary-card">
                <h3 style="color: ${severityColors.medium}; margin: 0;">Medium</h3>
                <p style="font-size: 24px; margin: 10px 0;">${data.summary.medium}</p>
            </div>
            <div class="summary-card">
                <h3 style="color: ${severityColors.low}; margin: 0;">Low</h3>
                <p style="font-size: 24px; margin: 10px 0;">${data.summary.low}</p>
            </div>
        </div>
        
        <h2>Vulnerabilities</h2>
        ${data.vulnerabilities.map(vuln => `
            <div class="vulnerability">
                <div class="vuln-header severity-${vuln.severity}">
                    <h3 style="margin: 0;">${vuln.description}</h3>
                    <p class="meta">${vuln.file}:${vuln.line} | Rule: ${vuln.rule} | Severity: ${vuln.severity.toUpperCase()}</p>
                </div>
                <div class="vuln-body">
                    <div class="code">${vuln.evidence}</div>
                    <p><strong>Recommendation:</strong> ${vuln.recommendation}</p>
                </div>
            </div>
        `).join('')}
    </div>
</body>
</html>`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SARIF –æ—Ç—á–µ—Ç–∞ –¥–ª—è GitHub
   */
  generateSarifReport(data) {
    return {
      version: "2.1.0",
      $schema: "https://json.schemastore.org/sarif-2.1.0.json",
      runs: [{
        tool: {
          driver: {
            name: "HEYS SAST Scanner",
            version: "1.0.0",
            informationUri: "https://github.com/kinderlystv-png/HEYS-v2"
          }
        },
        results: data.vulnerabilities.map(vuln => ({
          ruleId: vuln.rule,
          level: vuln.severity === 'critical' ? 'error' : 
                 vuln.severity === 'high' ? 'error' :
                 vuln.severity === 'medium' ? 'warning' : 'note',
          message: {
            text: vuln.description
          },
          locations: [{
            physicalLocation: {
              artifactLocation: {
                uri: vuln.file
              },
              region: {
                startLine: vuln.line,
                snippet: {
                  text: vuln.evidence
                }
              }
            }
          }]
        }))
      }]
    };
  }

  /**
   * –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  printResults() {
    console.log('\nüõ°Ô∏è SAST Security Scan Results');
    console.log('================================');
    console.log(`üìÅ Files scanned: ${this.results.scannedFiles}`);
    console.log(`üîç Total vulnerabilities: ${this.results.summary.total}`);
    console.log(`üö® Critical: ${this.results.summary.critical}`);
    console.log(`‚ö†Ô∏è  High: ${this.results.summary.high}`);
    console.log(`üìã Medium: ${this.results.summary.medium}`);
    console.log(`‚ÑπÔ∏è  Low: ${this.results.summary.low}`);
    
    if (this.results.summary.total === 0) {
      console.log('\nüéâ No security vulnerabilities found!');
    } else {
      console.log('\nüìä Top vulnerabilities by type:');
      const ruleStats = {};
      this.results.vulnerabilities.forEach(v => {
        ruleStats[v.rule] = (ruleStats[v.rule] || 0) + 1;
      });
      
      Object.entries(ruleStats)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 5)
        .forEach(([rule, count]) => {
          console.log(`   ${rule}: ${count} issues`);
        });
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
   */
  getExitCode() {
    if (this.results.summary.critical > 0) return 2; // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
    if (this.results.summary.high > 0) return 1;     // –í—ã—Å–æ–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
    return 0; // –ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–ª–∏ –≤—ã—Å–æ–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  const scanner = new SASTScanner();
  scanner.runScan().then(exitCode => {
    process.exit(exitCode);
  }).catch(error => {
    console.error('Fatal error:', error);
    process.exit(1);
  });
}

export default SASTScanner;
