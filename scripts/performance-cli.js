// filepath: scripts/performance-cli.js

/**
 * CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ HEYS
 * –ö–æ–º–∞–Ω–¥—ã: measure, baseline, compare, report, analyze
 */

// –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –¥–æ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ TS
// const { bundleAnalyzer } = require('../packages/shared/src/performance/BundleAnalyzer');
const fs = require('fs');
const path = require('path');

/**
 * –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
 */
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
  reset: '\x1b[0m',
};

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–∞–º–∏
 */
function log(message, color = 'white') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–º–æ—â—å
 */
function showHelp() {
  log('üöÄ HEYS Performance CLI', 'cyan');
  log('');
  log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:', 'yellow');
  log('  measure                    - –ò–∑–º–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏', 'white');
  log('  baseline <version> <score> - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å baseline', 'white');
  log('  compare                    - –°—Ä–∞–≤–Ω–∏—Ç—å —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º baseline', 'white');
  log('  report                     - –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç', 'white');
  log('  analyze [stats.json]       - –ê–Ω–∞–ª–∏–∑ webpack stats', 'white');
  log('  history                    - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é baseline', 'white');
  log('');
  log('–ü—Ä–∏–º–µ—Ä—ã:', 'yellow');
  log('  node scripts/performance-cli.js measure', 'cyan');
  log('  node scripts/performance-cli.js baseline v1.2.3 85', 'cyan');
  log('  node scripts/performance-cli.js analyze dist/stats.json', 'cyan');
}

/**
 * –ò–∑–º–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
 */
async function measureCommand() {
  try {
    log('üìä –ò–∑–º–µ—Ä–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...', 'blue');
    
    // –ò–∑–º–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    const metrics = await measureFromFileSystem();
    
    log('‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –∏–∑–º–µ—Ä–µ–Ω—ã:', 'green');
    log(`üì¶ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${formatBytes(metrics.totalSize)}`, 'white');
    log(`üóúÔ∏è  Gzip —Ä–∞–∑–º–µ—Ä: ${formatBytes(metrics.gzippedSize)}`, 'white');
    log(`üìÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤: ${Object.keys(metrics.chunkSizes).length}`, 'white');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö —á–∞–Ω–∫–æ–≤
    const sortedChunks = Object.entries(metrics.chunkSizes)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5);
    
    if (sortedChunks.length > 0) {
      log('üîù –ö—Ä—É–ø–Ω–µ–π—à–∏–µ —á–∞–Ω–∫–∏:', 'yellow');
      sortedChunks.forEach(([name, size]) => {
        log(`   ${name}: ${formatBytes(size)}`, 'white');
      });
    }
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–∏: ${error.message}`, 'red');
    process.exit(1);
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç baseline
 */
async function baselineCommand(version, score) {
  if (!version || !score) {
    log('‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é –∏ Lighthouse score', 'red');
    log('   –ü—Ä–∏–º–µ—Ä: baseline v1.2.3 85', 'yellow');
    process.exit(1);
  }

  const lighthouseScore = parseFloat(score);
  if (isNaN(lighthouseScore) || lighthouseScore < 0 || lighthouseScore > 100) {
    log('‚ùå Lighthouse score –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 100', 'red');
    process.exit(1);
  }

  try {
    // –°–Ω–∞—á–∞–ª–∞ –∏–∑–º–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    await measureFromFileSystem();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º baseline
    bundleAnalyzer.saveBaseline(version, lighthouseScore);
    
    log(`‚úÖ Baseline —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –≤–µ—Ä—Å–∏–∏ ${version}`, 'green');
    log(`üìä Lighthouse Score: ${lighthouseScore}`, 'white');
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ baseline: ${error.message}`, 'red');
    process.exit(1);
  }
}

/**
 * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å baseline
 */
async function compareCommand() {
  try {
    bundleAnalyzer.loadFromStorage();
    await measureFromFileSystem();
    
    const comparison = bundleAnalyzer.compareWithBaseline();
    
    if (!comparison) {
      log('‚ö†Ô∏è  –ù–µ—Ç baseline –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è', 'yellow');
      log('   –°–æ–∑–¥–∞–π—Ç–µ baseline –∫–æ–º–∞–Ω–¥–æ–π: baseline <version> <score>', 'cyan');
      return;
    }

    log('üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å baseline:', 'blue');
    log('');
    
    const improvement = comparison.improvement ? '‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ' : '‚ùå –£—Ö—É–¥—à–µ–Ω–∏–µ';
    log(improvement, comparison.improvement ? 'green' : 'red');
    log('');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    Object.entries(comparison.changes).forEach(([metric, data]) => {
      const symbol = data.change < 0 ? '‚¨áÔ∏è' : '‚¨ÜÔ∏è';
      const color = data.change < 0 ? 'green' : 'red';
      const changeStr = `${data.change > 0 ? '+' : ''}${data.change.toFixed(1)}%`;
      
      log(`${symbol} ${metric}: ${changeStr}`, color);
    });
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏: ${error.message}`, 'red');
    process.exit(1);
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
 */
async function reportCommand() {
  try {
    bundleAnalyzer.loadFromStorage();
    await measureFromFileSystem();
    
    const report = bundleAnalyzer.generateReport();
    
    log('üìã –û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', 'cyan');
    log('==============================', 'cyan');
    log('');
    
    // –¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    if (report.current) {
      log('üìä –¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏:', 'blue');
      log(`   Bundle Size: ${formatBytes(report.current.totalSize)}`, 'white');
      log(`   Gzip Size: ${formatBytes(report.current.gzippedSize)}`, 'white');
      log(`   Chunks: ${Object.keys(report.current.chunkSizes).length}`, 'white');
      log('');
    }
    
    // Baseline
    if (report.baseline) {
      log('üìå –ü–æ—Å–ª–µ–¥–Ω–∏–π baseline:', 'blue');
      log(`   Version: ${report.baseline.version}`, 'white');
      log(`   Date: ${new Date(report.baseline.timestamp).toLocaleDateString()}`, 'white');
      log(`   Lighthouse: ${report.baseline.lighthouseScore}`, 'white');
      log(`   Grade: ${report.baseline.performanceGrade}`, 'white');
      log('');
    }
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
    if (report.comparison) {
      log('üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:', 'blue');
      const status = report.comparison.improvement ? '‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ' : '‚ùå –£—Ö—É–¥—à–µ–Ω–∏–µ';
      log(`   Status: ${status}`, report.comparison.improvement ? 'green' : 'red');
      log('');
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (report.recommendations.length > 0) {
      log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', 'yellow');
      report.recommendations.forEach(rec => {
        log(`   ${rec}`, 'white');
      });
      log('');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    const reportPath = 'performance-report.json';
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
    log(`üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`, 'green');
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: ${error.message}`, 'red');
    process.exit(1);
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç webpack stats
 */
async function analyzeCommand(statsPath = 'dist/stats.json') {
  if (!fs.existsSync(statsPath)) {
    log(`‚ùå Stats —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${statsPath}`, 'red');
    log('   –°–æ–∑–¥–∞–π—Ç–µ stats.json: webpack --json > stats.json', 'cyan');
    process.exit(1);
  }

  try {
    log('üîç –ê–Ω–∞–ª–∏–∑ webpack stats...', 'blue');
    
    const statsData = JSON.parse(fs.readFileSync(statsPath, 'utf8'));
    const analysis = analyzeWebpackStats(statsData);
    
    log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:', 'green');
    log('');
    log('üì¶ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ bundle:', 'yellow');
    log(`   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${formatBytes(analysis.totalSize)}`, 'white');
    log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—É—Ä—Å–æ–≤: ${analysis.assetsCount}`, 'white');
    log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤: ${analysis.chunksCount}`, 'white');
    log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π: ${analysis.modulesCount}`, 'white');
    log('');
    
    // –¢–æ–ø —á–∞–Ω–∫–∏
    if (analysis.topChunks.length > 0) {
      log('üîù –ö—Ä—É–ø–Ω–µ–π—à–∏–µ —á–∞–Ω–∫–∏:', 'yellow');
      analysis.topChunks.forEach(chunk => {
        log(`   ${chunk.name}: ${formatBytes(chunk.size)}`, 'white');
      });
      log('');
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (analysis.recommendations.length > 0) {
      log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', 'yellow');
      analysis.recommendations.forEach(rec => {
        log(`   ${rec}`, 'white');
      });
    }
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: ${error.message}`, 'red');
    process.exit(1);
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é baseline
 */
function historyCommand() {
  try {
    bundleAnalyzer.loadFromStorage();
    const history = bundleAnalyzer.baselineHistory || [];
    
    if (history.length === 0) {
      log('üìù –ò—Å—Ç–æ—Ä–∏—è baseline –ø—É—Å—Ç–∞', 'yellow');
      return;
    }

    log('üìö –ò—Å—Ç–æ—Ä–∏—è baseline:', 'cyan');
    log('');
    
    history.forEach((baseline, index) => {
      const date = new Date(baseline.timestamp).toLocaleDateString();
      log(`${index + 1}. ${baseline.version} (${date})`, 'white');
      log(`   Score: ${baseline.lighthouseScore} | Grade: ${baseline.performanceGrade}`, 'white');
      log(`   Size: ${formatBytes(baseline.metrics.totalSize)}`, 'white');
      log('');
    });
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: ${error.message}`, 'red');
    process.exit(1);
  }
}

/**
 * –ò–∑–º–µ—Ä—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
async function measureFromFileSystem() {
  const distPaths = ['dist', 'apps/web/dist', 'packages/*/dist'];
  const chunkSizes = {};
  let totalSize = 0;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–∞–ø–æ–∫ —Å build —Ñ–∞–π–ª–∞–º–∏
  for (const distPattern of distPaths) {
    if (distPattern.includes('*')) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å *
      const basePath = distPattern.split('*')[0];
      if (fs.existsSync(basePath)) {
        const dirs = fs.readdirSync(basePath, { withFileTypes: true })
          .filter(dirent => dirent.isDirectory())
          .map(dirent => path.join(basePath, dirent.name, 'dist'));
        
        for (const dir of dirs) {
          if (fs.existsSync(dir)) {
            const files = fs.readdirSync(dir);
            files.forEach(file => {
              const filePath = path.join(dir, file);
              if (fs.statSync(filePath).isFile() && 
                  (file.endsWith('.js') || file.endsWith('.css'))) {
                const size = fs.statSync(filePath).size;
                chunkSizes[file] = size;
                totalSize += size;
              }
            });
          }
        }
      }
    } else {
      // –û–±—ã—á–Ω—ã–µ –ø—É—Ç–∏
      if (fs.existsSync(distPattern)) {
        const files = fs.readdirSync(distPattern);
        files.forEach(file => {
          const filePath = path.join(distPattern, file);
          if (fs.statSync(filePath).isFile() && 
              (file.endsWith('.js') || file.endsWith('.css'))) {
            const size = fs.statSync(filePath).size;
            chunkSizes[file] = size;
            totalSize += size;
          }
        });
      }
    }
  }

  const metrics = {
    totalSize,
    gzippedSize: Math.round(totalSize * 0.7),
    loadTime: 0,
    firstContentfulPaint: 0,
    largestContentfulPaint: 0,
    timeToInteractive: 0,
    chunkSizes,
    unusedCode: {},
  };

  return metrics;
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç webpack stats
 */
function analyzeWebpackStats(statsData) {
  const assets = statsData.assets || [];
  const chunks = statsData.chunks || [];
  const modules = statsData.modules || [];

  let totalSize = 0;
  const topChunks = [];

  assets.forEach(asset => {
    if (asset.name.endsWith('.js') || asset.name.endsWith('.css')) {
      totalSize += asset.size;
      topChunks.push({ name: asset.name, size: asset.size });
    }
  });

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
  topChunks.sort((a, b) => b.size - a.size);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  const recommendations = [];
  
  if (totalSize > 500000) {
    recommendations.push('üì¶ Bundle —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–≤—ã—à–∞–µ—Ç 500KB - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ code splitting');
  }
  
  if (topChunks.length > 0 && topChunks[0].size > 100000) {
    recommendations.push(`üîß –ö—Ä—É–ø–Ω—ã–π —á–∞–Ω–∫ –Ω–∞–π–¥–µ–Ω: ${topChunks[0].name} (${formatBytes(topChunks[0].size)})`);
  }

  return {
    totalSize,
    assetsCount: assets.length,
    chunksCount: chunks.length,
    modulesCount: modules.length,
    topChunks: topChunks.slice(0, 5),
    recommendations,
  };
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–∞–π—Ç—ã
 */
function formatBytes(bytes) {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI
 */
function main() {
  const command = process.argv[2];
  const args = process.argv.slice(3);

  switch (command) {
    case 'measure':
      measureCommand();
      break;
    case 'baseline':
      baselineCommand(args[0], args[1]);
      break;
    case 'compare':
      compareCommand();
      break;
    case 'report':
      reportCommand();
      break;
    case 'analyze':
      analyzeCommand(args[0]);
      break;
    case 'history':
      historyCommand();
      break;
    case 'help':
    case '--help':
    case '-h':
    default:
      showHelp();
      break;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º CLI –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = {
  measureFromFileSystem,
  analyzeWebpackStats,
  formatBytes,
};
