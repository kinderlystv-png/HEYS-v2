/*
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ì–ï–ù–ï–†–ê–¢–û–† –Ø–ö–û–†–ï–ô (Auto Anchor Generator)                               ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —è–∫–æ—Ä–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ –∫–æ–¥ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤                       ‚îÇ
‚îÇ –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å VSCode —á–µ—Ä–µ–∑ save hooks –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é                         ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
*/

class AutoAnchorGenerator {
  constructor() {
    this.config = {
      // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —è–∫–æ—Ä–µ–π (—Å—Ç—Ä–æ–∫–∏)
      minFileSize: 100,

      // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫ —è–∫–æ—Ä–µ–π
      anchorPatterns: {
        js: [
          {
            pattern: /^class\s+(\w+)/gm,
            template: '// @ANCHOR:CLASS_{NAME}\n// –ö–õ–ê–°–° {NAME}',
            position: 'before',
          },
          {
            pattern: /^(\s*)(?:async\s+)?(\w+)\s*\([^)]*\)\s*{/gm,
            template: '{indent}// @ANCHOR:METHOD_{NAME}\n{indent}// –ú–ï–¢–û–î {NAME}',
            position: 'before',
            condition: (match, context) => {
              // –¢–æ–ª—å–∫–æ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ –≤ –∫–ª–∞—Å—Å–∞—Ö –∏–ª–∏ –±–æ–ª—å—à–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
              return context.insideClass || match[0].length > 50;
            },
          },
          {
            pattern: /^(\s*)(\/\/\s*[=\-]{5,}.*[=\-]{5,})/gm,
            template: '{indent}// @ANCHOR:SECTION_{NAME}',
            position: 'before',
          },
        ],
        html: [
          {
            pattern: /(<style[^>]*>)/gi,
            template: '<!-- @ANCHOR:CSS_STYLES -->\n<!-- CSS –°–¢–ò–õ–ò -->',
            position: 'before',
          },
          {
            pattern: /(<script[^>]*>)/gi,
            template: '<!-- @ANCHOR:JAVASCRIPT -->\n<!-- JAVASCRIPT –ö–û–î -->',
            position: 'before',
          },
          {
            pattern: /(class\s+(\w+))/gm,
            template: '        // @ANCHOR:CLASS_{NAME}\n        // –ö–õ–ê–°–° {NAME}',
            position: 'before',
          },
        ],
      },

      // –ò—Å–∫–ª—é—á–µ–Ω–∏—è - –≥–¥–µ –ù–ï –¥–æ–±–∞–≤–ª—è—Ç—å —è–∫–æ—Ä—è
      excludePatterns: [
        /^\/\/ @ANCHOR:/, // –£–∂–µ –µ—Å—Ç—å —è–∫–æ—Ä—å
        /^<!--.*@ANCHOR:/, // HTML —è–∫–æ—Ä—å —É–∂–µ –µ—Å—Ç—å
        /^\s*$/, // –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        /^\s*\/\/.*—Ç–µ—Å—Ç/i, // –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã
      ],
    };
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —è–∫–æ—Ä–µ–π –≤ –∫–æ–¥
  async addAnchorsToCode(content, fileName, options = {}) {
    const ext = this.getFileExtension(fileName);
    const lines = content.split('\n');

    console.log(`üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${fileName} (${lines.length} —Å—Ç—Ä–æ–∫)`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å —è–∫–æ—Ä—è
    if (!this.shouldProcessFile(lines, fileName, options)) {
      console.log(`‚è© –§–∞–π–ª –ø—Ä–æ–ø—É—â–µ–Ω: ${fileName}`);
      return { content, changes: [] };
    }

    const patterns = this.config.anchorPatterns[ext] || this.config.anchorPatterns.js;
    const changes = [];
    let modifiedContent = content;
    let offset = 0; // –°–º–µ—â–µ–Ω–∏–µ –∏–∑-–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
    for (const pattern of patterns) {
      const matches = this.findPatternMatches(modifiedContent, pattern);

      for (const match of matches.reverse()) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å –∫–æ–Ω—Ü–∞, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏
        const anchorText = this.generateAnchorText(match, pattern);

        if (this.shouldAddAnchor(match, modifiedContent)) {
          const { newContent, linesAdded } = this.insertAnchor(
            modifiedContent,
            match,
            anchorText,
            pattern.position
          );

          modifiedContent = newContent;
          changes.push({
            type: 'anchor_added',
            line: match.line + offset,
            pattern: pattern.pattern.source,
            anchor: anchorText,
          });
          offset += linesAdded;
        }
      }
    }

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${changes.length} —è–∫–æ—Ä–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–æ`);
    return { content: modifiedContent, changes };
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —è–∫–æ—Ä—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
  generateAnchorText(match, pattern) {
    let template = pattern.template;

    // –ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —à–∞–±–ª–æ–Ω–µ
    template = template.replace(/{NAME}/g, match.name || 'UNKNOWN');
    template = template.replace(/{indent}/g, match.indent || '');

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏ –¥–ª—è —è–∫–æ—Ä—è
    const normalizedName = (match.name || 'SECTION').toUpperCase().replace(/[^A-Z0-9]/g, '_');

    template = template.replace(/{NORMALIZED_NAME}/g, normalizedName);

    return template;
  }

  // –í—Å—Ç–∞–≤–∫–∞ —è–∫–æ—Ä—è –≤ –∫–æ–¥
  insertAnchor(content, match, anchorText, position) {
    const lines = content.split('\n');
    const targetLine = position === 'before' ? match.line - 1 : match.line;

    lines.splice(targetLine, 0, anchorText);

    return {
      newContent: lines.join('\n'),
      linesAdded: anchorText.split('\n').length,
    };
  }

  // –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
  findPatternMatches(content, pattern) {
    const matches = [];
    const lines = content.split('\n');

    let match;
    while ((match = pattern.pattern.exec(content)) !== null) {
      const lineNumber = content.substring(0, match.index).split('\n').length;
      const lineContent = lines[lineNumber - 1];

      matches.push({
        line: lineNumber,
        index: match.index,
        fullMatch: match[0],
        name: match[2] || match[1] || 'UNNAMED',
        indent: lineContent.match(/^\s*/)[0],
        context: this.getMatchContext(lines, lineNumber - 1),
      });
    }

    return matches;
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
  getMatchContext(lines, lineIndex) {
    const context = {
      insideClass: false,
      insideFunction: false,
      indentLevel: 0,
    };

    // –ü–æ–∏—Å–∫ –∫–ª–∞—Å—Å–∞ –≤—ã—à–µ
    for (let i = lineIndex - 1; i >= 0; i--) {
      if (/^class\s+\w+/.test(lines[i])) {
        context.insideClass = true;
        break;
      }
    }

    // –£—Ä–æ–≤–µ–Ω—å –æ—Ç—Å—Ç—É–ø–æ–≤
    const indent = lines[lineIndex].match(/^\s*/)[0];
    context.indentLevel = indent.length;

    return context;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å —è–∫–æ—Ä—å
  shouldAddAnchor(match, content) {
    const lineContent = content.split('\n')[match.line - 1];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    for (const excludePattern of this.config.excludePatterns) {
      if (excludePattern.test(lineContent)) {
        return false;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —è–∫–æ—Ä—è —Ä—è–¥–æ–º
    const lines = content.split('\n');
    const checkRange = 3; // –ü—Ä–æ–≤–µ—Ä—è–µ–º 3 —Å—Ç—Ä–æ–∫–∏ –≤—ã—à–µ –∏ –Ω–∏–∂–µ

    for (
      let i = Math.max(0, match.line - checkRange);
      i < Math.min(lines.length, match.line + checkRange);
      i++
    ) {
      if (/@ANCHOR:/i.test(lines[i])) {
        return false; // –Ø–∫–æ—Ä—å —É–∂–µ –µ—Å—Ç—å —Ä—è–¥–æ–º
      }
    }

    return true;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª
  shouldProcessFile(lines, fileName, options) {
    // –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if (lines.length < this.config.minFileSize && !options.force) {
      return false;
    }

    // –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã-–¥–µ–º–æ –∏ —Ç–µ—Å—Ç—ã
    if (/(?:demo|test|spec)\.(?:js|html)$/i.test(fileName) && !options.force) {
      return false;
    }

    // –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –º–Ω–æ–≥–æ —è–∫–æ—Ä–µ–π)
    const anchorCount = lines.filter(line => /@ANCHOR:/i.test(line)).length;
    if (anchorCount > lines.length * 0.1) {
      // –ë–æ–ª—å—à–µ 10% —Å—Ç—Ä–æ–∫ —Å —è–∫–æ—Ä—è–º–∏
      return false;
    }

    return true;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  getFileExtension(fileName) {
    const ext = fileName.split('.').pop().toLowerCase();
    return ['js', 'html', 'css', 'ts'].includes(ext) ? ext : 'js';
  }

  // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
  async processFile(filePath, options = {}) {
    try {
      const fs = require('fs').promises;
      const content = await fs.readFile(filePath, 'utf8');

      const result = await this.addAnchorsToCode(content, filePath, options);

      if (result.changes.length > 0 && !options.dryRun) {
        await fs.writeFile(filePath, result.content, 'utf8');
        console.log(`üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filePath}`);
      }

      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${filePath}:`, error);
      return { content: null, changes: [], error };
    }
  }

  // –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
  async processDirectory(dirPath, options = {}) {
    const fs = require('fs').promises;
    const path = require('path');

    const files = await fs.readdir(dirPath, { withFileTypes: true });
    const results = [];

    for (const file of files) {
      if (file.isFile() && /\.(js|html|ts)$/.test(file.name)) {
        const filePath = path.join(dirPath, file.name);
        const result = await this.processFile(filePath, options);
        results.push({ file: file.name, ...result });
      }
    }

    return results;
  }
}

// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å VSCode —á–µ—Ä–µ–∑ extension
class VSCodeAnchorIntegration {
  constructor() {
    this.generator = new AutoAnchorGenerator();
  }

  // –•—É–∫ –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
  onWillSaveDocument(document) {
    if (this.shouldAutoProcess(document)) {
      return this.addAnchorsOnSave(document);
    }
  }

  async addAnchorsOnSave(document) {
    const result = await this.generator.addAnchorsToCode(document.getText(), document.fileName, {
      autoSave: true,
    });

    if (result.changes.length > 0) {
      // –°–æ–∑–¥–∞–µ–º edits –¥–ª—è VSCode
      const edits = result.changes.map(change => ({
        range: new vscode.Range(change.line, 0, change.line, 0),
        newText: change.anchor + '\n',
      }));

      return edits;
    }

    return [];
  }

  shouldAutoProcess(document) {
    const config = vscode.workspace.getConfiguration('heys.anchors');
    return config.get('autoGenerate', false) && /\.(js|html|ts)$/.test(document.fileName);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
  module.exports = { AutoAnchorGenerator, VSCodeAnchorIntegration };
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
if (typeof window !== 'undefined') {
  window.AutoAnchorGenerator = AutoAnchorGenerator;
}

/*
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üìñ –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:                                                          ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ                                                                                           ‚îÇ
‚îÇ 1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º (VSCode):                                                        ‚îÇ
‚îÇ    - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å —ç—Ç–∏–º –∫–æ–¥–æ–º                                                  ‚îÇ
‚îÇ    - –í–∫–ª—é—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É "heys.anchors.autoGenerate": true                               ‚îÇ
‚îÇ    - –Ø–∫–æ—Ä—è –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞                                             ‚îÇ
‚îÇ                                                                                           ‚îÇ
‚îÇ 2. –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º:                                                                         ‚îÇ
‚îÇ    const generator = new AutoAnchorGenerator();                                          ‚îÇ
‚îÇ    const result = await generator.processFile('path/to/file.js');                       ‚îÇ
‚îÇ                                                                                           ‚îÇ
‚îÇ 3. –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:                                                                   ‚îÇ
‚îÇ    const results = await generator.processDirectory('./src');                            ‚îÇ
‚îÇ                                                                                           ‚îÇ
‚îÇ 4. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:                                                             ‚îÇ
‚îÇ    const result = await generator.processFile('file.js', { dryRun: true });             ‚îÇ
‚îÇ                                                                                           ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
*/
