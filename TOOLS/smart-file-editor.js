// –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —è–∫–æ—Ä–µ–π –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
class SmartFileEditor {
  constructor() {
    this.anchorGenerator = new SimpleAnchorGenerator();
    this.modifiedFiles = new Set();
  }

  // –£–º–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —è–∫–æ—Ä—è–º–∏
  async smartReplaceInFile(filePath, oldString, newString, options = {}) {
    try {
      // 1. –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ã—á–Ω—É—é –∑–∞–º–µ–Ω—É
      const result = await this.replaceStringInFile(filePath, oldString, newString);

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —è–∫–æ—Ä—è
      if (this.shouldAddAnchors(filePath, options)) {
        console.log(`üîó –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —è–∫–æ—Ä–µ–π –≤ ${filePath}...`);
        await this.addAnchorsToModifiedFile(filePath);
        this.modifiedFiles.add(filePath);
      }

      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å —è–∫–æ—Ä—è
  shouldAddAnchors(filePath, options) {
    // –¢–æ–ª—å–∫–æ –¥–ª—è JS/TS —Ñ–∞–π–ª–æ–≤
    if (!/\.(js|ts)$/.test(filePath)) return false;

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    if (filePath.includes('temp') || filePath.includes('test')) return false;

    // –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
    if (this.modifiedFiles.has(filePath) && !options.force) return false;

    return true;
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —è–∫–æ—Ä–µ–π –≤ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
  async addAnchorsToModifiedFile(filePath) {
    const fs = require('fs');

    try {
      const content = fs.readFileSync(filePath, 'utf8');
      const lines = content.split('\n');

      // –¢–æ–ª—å–∫–æ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ 100 —Å—Ç—Ä–æ–∫
      if (lines.length < 100) return;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —è–∫–æ—Ä—è
      const existingAnchors = lines.filter((line) => /@ANCHOR:/.test(line)).length;
      const anchorDensity = existingAnchors / lines.length;

      // –ï—Å–ª–∏ —è–∫–æ—Ä–µ–π –º–µ–Ω—å—à–µ 5% –æ—Ç —Å—Ç—Ä–æ–∫ - –¥–æ–±–∞–≤–ª—è–µ–º
      if (anchorDensity < 0.05) {
        const processedContent = this.anchorGenerator.addAnchorsToCode(content);
        fs.writeFileSync(filePath, processedContent, 'utf8');

        const newAnchors = processedContent
          .split('\n')
          .filter((line) => /@ANCHOR:/.test(line)).length;
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${newAnchors - existingAnchors} –Ω–æ–≤—ã—Ö —è–∫–æ—Ä–µ–π`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —è–∫–æ—Ä–µ–π:', error);
    }
  }

  // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
  async smartCreateFile(filePath, content, options = {}) {
    try {
      // 1. –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
      const result = await this.createFile(filePath, content);

      // 2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —è–∫–æ—Ä—è, –µ—Å–ª–∏ —Ñ–∞–π–ª –±–æ–ª—å—à–æ–π
      if (content.split('\n').length > 100 && this.shouldAddAnchors(filePath, options)) {
        console.log(`üîó –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —è–∫–æ—Ä–µ–π –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª ${filePath}...`);
        await this.addAnchorsToModifiedFile(filePath);
      }

      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
      throw error;
    }
  }

  // –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∫–æ–Ω—Ü–µ —Å–µ—Å—Å–∏–∏
  async processAllModifiedFiles() {
    console.log('üîÑ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');

    for (const filePath of this.modifiedFiles) {
      await this.addAnchorsToModifiedFile(filePath);
    }

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${this.modifiedFiles.size} —Ñ–∞–π–ª–æ–≤`);
    this.modifiedFiles.clear();
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const smartEditor = new SmartFileEditor();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
module.exports = { SmartFileEditor, smartEditor };
