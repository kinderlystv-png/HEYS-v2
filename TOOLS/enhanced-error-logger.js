/**
 * üîß ENHANCED ERROR LOGGER
 * –°–∏—Å—Ç–µ–º–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤
 *
 * –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 * - –¢–æ—á–Ω–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –¥–æ —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞
 * - Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏–∑
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π HEYS
 *
 * @version 1.0.0
 * @created 26.08.2025
 */

class EnhancedErrorLogger {
  constructor() {
    this.logs = [];
    this.errorClassifier = null;
    this.stackAnalyzer = null;
    this.isActive = true;
    this.sessionId = this.generateSessionId();
    this.startTime = Date.now();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    this.config = {
      maxLogs: 1000,
      logLevels: ['error', 'warning', 'info', 'debug'],
      autoClassify: true,
      realTimeUpdates: true,
      detailedStackTrace: true,
      performanceTracking: true,
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    this.init();
  }

  init() {
    this.setupConsoleInterceptor();
    this.setupErrorHandlers();
    this.setupPerformanceMonitoring();
    this.initializeComponents();
    this.logInfo('Enhanced Error Logger initialized', {
      sessionId: this.sessionId,
      config: this.config,
    });
  }

  /**
   * üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
   */
  initializeComponents() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å—Ç–µ–∫–∞
    if (window.StackTraceAnalyzer) {
      this.stackAnalyzer = new window.StackTraceAnalyzer();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –æ—à–∏–±–æ–∫
    if (window.ErrorClassificationEngine) {
      this.errorClassifier = new window.ErrorClassificationEngine();
    }

    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º HEYS —Ç—Ä–µ–∫–µ—Ä–æ–º
    this.integrateWithHeysTracker();
  }

  /**
   * üè† –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º HEYS error tracker
   */
  integrateWithHeysTracker() {
    if (window.HEYS && window.HEYS.advancedErrorTracker) {
      const heysTracker = window.HEYS.advancedErrorTracker;

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à –ª–æ–≥–≥–µ—Ä –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ HEYS
      if (heysTracker.addErrorHandler) {
        heysTracker.addErrorHandler((error, context) => {
          this.logError('HEYS Error Tracker', {
            error: error,
            context: context,
            source: 'heys_advanced_error_tracker',
            timestamp: Date.now(),
          });
        });
      }
    }
  }

  /**
   * üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  setupConsoleInterceptor() {
    const originalConsole = {
      error: console.error,
      warn: console.warn,
      log: console.log,
      info: console.info,
    };

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç console.error
    console.error = (...args) => {
      originalConsole.error.apply(console, args);
      this.logError('Console Error', {
        message: args.join(' '),
        source: 'console.error',
        stackTrace: this.getStackTrace(),
        timestamp: Date.now(),
      });
    };

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç console.warn
    console.warn = (...args) => {
      originalConsole.warn.apply(console, args);
      this.logWarning('Console Warning', {
        message: args.join(' '),
        source: 'console.warn',
        stackTrace: this.getStackTrace(),
        timestamp: Date.now(),
      });
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    this.originalConsole = originalConsole;
  }

  /**
   * ‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
   */
  setupErrorHandlers() {
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ JavaScript –æ—à–∏–±–æ–∫
    window.addEventListener('error', (event) => {
      this.logError('JavaScript Error', {
        message: event.message,
        filename: event.filename,
        lineno: event.lineno,
        colno: event.colno,
        error: event.error,
        stackTrace: event.error ? event.error.stack : null,
        timestamp: Date.now(),
        type: 'javascript',
      });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ unhandled promise rejections
    window.addEventListener('unhandledrejection', (event) => {
      this.logError('Unhandled Promise Rejection', {
        reason: event.reason,
        promise: event.promise,
        stackTrace: event.reason ? event.reason.stack : null,
        timestamp: Date.now(),
        type: 'promise',
      });
    });
  }

  /**
   * üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  setupPerformanceMonitoring() {
    if (!this.config.performanceTracking) return;

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    this.performanceMarkers = new Map();

    // Observer –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ DOM –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if (typeof MutationObserver !== 'undefined') {
      this.domObserver = new MutationObserver((mutations) => {
        if (mutations.length > 100) {
          this.logWarning('High DOM Mutation Activity', {
            mutationsCount: mutations.length,
            timestamp: Date.now(),
            type: 'performance',
          });
        }
      });
    }
  }

  /**
   * üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ stack trace
   */
  getStackTrace() {
    try {
      throw new Error();
    } catch (e) {
      return e.stack;
    }
  }

  /**
   * üè∑Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Å–µ—Å—Å–∏–∏
   */
  generateSessionId() {
    return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
  }

  /**
   * üîß –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  logError(title, details = {}) {
    return this.log('error', title, details);
  }

  logWarning(title, details = {}) {
    return this.log('warning', title, details);
  }

  logInfo(title, details = {}) {
    return this.log('info', title, details);
  }

  logDebug(title, details = {}) {
    return this.log('debug', title, details);
  }

  /**
   * üìù –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  log(level, title, details = {}) {
    if (!this.isActive || !this.config.logLevels.includes(level)) {
      return;
    }

    const logEntry = {
      id: this.generateLogId(),
      sessionId: this.sessionId,
      timestamp: Date.now(),
      level: level,
      title: title,
      details: details,
      stackTrace: details.stackTrace || this.getStackTrace(),
      classification: null,
      suggestions: [],
    };

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    if (this.config.autoClassify && this.errorClassifier) {
      logEntry.classification = this.errorClassifier.classify(logEntry);
      logEntry.suggestions = this.errorClassifier.getSuggestions(logEntry);
    }

    // –ê–Ω–∞–ª–∏–∑ stack trace
    if (this.config.detailedStackTrace && this.stackAnalyzer) {
      logEntry.stackAnalysis = this.stackAnalyzer.analyze(logEntry.stackTrace);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
    this.logs.push(logEntry);

    // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    this.originalConsole.log(
      `üìù EnhancedErrorLogger: Added log entry [${level}] "${title}" (total: ${this.logs.length})`,
    );

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    if (this.logs.length > this.config.maxLogs) {
      this.logs = this.logs.slice(-this.config.maxLogs);
    }

    // Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (this.config.realTimeUpdates) {
      this.notifyListeners(logEntry);
    }

    // –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è debugging
    this.originalConsole.log(`[${level.toUpperCase()}] ${title}`, logEntry);

    return logEntry;
  }

  /**
   * üÜî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –ª–æ–≥–∞
   */
  generateLogId() {
    return 'log_' + Date.now() + '_' + Math.random().toString(36).substr(2, 6);
  }

  /**
   * üì° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ –Ω–æ–≤—ã—Ö –ª–æ–≥–∞—Ö
   */
  notifyListeners(logEntry) {
    if (this.listeners) {
      this.listeners.forEach((listener) => {
        try {
          listener(logEntry);
        } catch (e) {
          this.originalConsole.error('Error in log listener:', e);
        }
      });
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ custom event
    window.dispatchEvent(
      new CustomEvent('enhancedLogEntry', {
        detail: logEntry,
      }),
    );
  }

  /**
   * üëÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª—è–º–∏
   */
  addListener(callback) {
    if (!this.listeners) {
      this.listeners = [];
    }
    this.listeners.push(callback);
  }

  removeListener(callback) {
    if (this.listeners) {
      this.listeners = this.listeners.filter((l) => l !== callback);
    }
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  getStats() {
    const stats = {
      total: this.logs.length,
      byLevel: {},
      byType: {},
      sessionDuration: Date.now() - this.startTime,
      sessionId: this.sessionId,
    };

    this.config.logLevels.forEach((level) => {
      stats.byLevel[level] = this.logs.filter((log) => log.level === level).length;
    });

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    this.logs.forEach((log) => {
      if (log.classification && log.classification.type) {
        stats.byType[log.classification.type] = (stats.byType[log.classification.type] || 0) + 1;
      }
    });

    return stats;
  }

  /**
   * üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤
   */
  getLogs(filter = {}) {
    let filteredLogs = [...this.logs];

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    const debugInfo = {
      originalCount: this.logs.length,
      filter: filter,
      hasLevelFilter: !!filter.level,
      hasSinceFilter: !!filter.since,
      hasSearchFilter: !!filter.searchText,
      hasClassificationFilter: !!filter.classification,
    };

    if (filter.level) {
      filteredLogs = filteredLogs.filter((log) => log.level === filter.level);
      debugInfo.afterLevelFilter = filteredLogs.length;
    }

    if (filter.since) {
      filteredLogs = filteredLogs.filter((log) => log.timestamp >= filter.since);
      debugInfo.afterSinceFilter = filteredLogs.length;
    }

    if (filter.searchText) {
      const searchText = filter.searchText.toLowerCase();
      filteredLogs = filteredLogs.filter(
        (log) =>
          log.title.toLowerCase().includes(searchText) ||
          JSON.stringify(log.details).toLowerCase().includes(searchText),
      );
      debugInfo.afterSearchFilter = filteredLogs.length;
    }

    if (filter.classification) {
      filteredLogs = filteredLogs.filter(
        (log) => log.classification && log.classification.type === filter.classification,
      );
      debugInfo.afterClassificationFilter = filteredLogs.length;
    }

    debugInfo.finalCount = filteredLogs.length;

    // –õ–æ–≥–∏—Ä—É–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
    if (this.logs.length > 0 && filteredLogs.length === 0 && Object.keys(filter).length > 0) {
      this.originalConsole.warn(
        '‚ö†Ô∏è Enhanced Error Logger: getLogs() returned empty array despite having logs',
        debugInfo,
      );
    }

    return filteredLogs;
  }

  /**
   * üì§ –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤
   */
  exportLogs(format = 'json') {
    const exportData = {
      timestamp: new Date().toISOString(),
      sessionId: this.sessionId,
      exportTime: Date.now(),
      stats: this.getStats(),
      logs: this.logs,
      config: this.config,
      debugInfo: {
        logsArrayLength: this.logs.length,
        isActive: this.isActive,
        startTime: this.startTime,
        sessionDuration: Date.now() - this.startTime,
      },
    };

    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    this.originalConsole.log('üì§ Enhanced Error Logger Export:', {
      totalLogs: this.logs.length,
      sessionId: this.sessionId,
      isActive: this.isActive,
    });

    switch (format) {
      case 'json':
        return JSON.stringify(exportData, null, 2);
      case 'csv':
        return this.convertToCSV(this.logs);
      default:
        return exportData;
    }
  }

  /**
   * üìä –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ CSV
   */
  convertToCSV(logs) {
    const headers = ['timestamp', 'level', 'title', 'message', 'type', 'filename', 'line'];
    const rows = logs.map((log) => [
      new Date(log.timestamp).toISOString(),
      log.level,
      log.title,
      log.details.message || '',
      log.classification?.type || '',
      log.details.filename || '',
      log.details.lineno || '',
    ]);

    return [headers, ...rows].map((row) => row.join(',')).join('\n');
  }

  /**
   * üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
   */
  clearLogs() {
    this.logs = [];
    this.logInfo('Logs cleared', { clearedAt: Date.now() });
  }

  /**
   * ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  setConfig(newConfig) {
    this.config = { ...this.config, ...newConfig };
    this.logInfo('Configuration updated', { newConfig });
  }

  /**
   * üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ª–æ–≥–≥–µ—Ä–∞
   */
  restart() {
    this.sessionId = this.generateSessionId();
    this.startTime = Date.now();
    this.clearLogs();
    this.logInfo('Enhanced Error Logger restarted', { sessionId: this.sessionId });
  }

  /**
   * üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
   */
  stop() {
    this.isActive = false;
    if (this.domObserver) {
      this.domObserver.disconnect();
    }
    this.logInfo('Enhanced Error Logger stopped');
  }

  /**
   * ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –ª–æ–≥–≥–µ—Ä–∞
   */
  start() {
    this.isActive = true;
    this.logInfo('Enhanced Error Logger started');
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
if (typeof window !== 'undefined') {
  window.EnhancedErrorLogger = EnhancedErrorLogger;

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —É–∫–∞–∑–∞–Ω–∏–π
  if (!window.HEYS_ENHANCED_LOGGER_NO_AUTO_INIT) {
    window.enhancedLogger = new EnhancedErrorLogger();
  }

  // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  window.diagnosticEnhancedLogger = function () {
    console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ENHANCED ERROR LOGGER');
    console.log('===================================');

    const logger = window.enhancedLogger;
    if (!logger) {
      console.log('‚ùå –õ–æ–≥–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log(`üìç Session ID: ${logger.sessionId}`);
    console.log(`‚ö° Is Active: ${logger.isActive}`);
    console.log(`üìä Logs Array Length: ${logger.logs?.length || 0}`);
    console.log(`üìà Stats:`, logger.getStats());

    // –¢–µ—Å—Ç getLogs
    const allLogs = logger.getLogs();
    const emptyFilter = logger.getLogs({});

    console.log(`üìã getLogs(): ${allLogs.length} –ª–æ–≥–æ–≤`);
    console.log(`üìã getLogs({}): ${emptyFilter.length} –ª–æ–≥–æ–≤`);

    if (logger.logs.length > 0) {
      console.log('üìù –ü–µ—Ä–≤—ã–µ 3 –ª–æ–≥–∞:');
      logger.logs.slice(0, 3).forEach((log, i) => {
        console.log(`  ${i + 1}. [${log.level}] ${log.title}`);
      });
    }

    return {
      logger: logger,
      logsCount: logger.logs?.length || 0,
      getLogsCount: allLogs.length,
      stats: logger.getStats(),
    };
  };
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
if (typeof module !== 'undefined' && module.exports) {
  module.exports = EnhancedErrorLogger;
}
