/**
 * üó∫Ô∏è ROADMAP MANAGER - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ä–æ–∂–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏
 *
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ—Ä–æ–∂–Ω—ã—Ö –∫–∞—Ä—Ç –∏–∑ markdown —Ñ–∞–π–ª–æ–≤
 * - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
 * - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
 * - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 * - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞–º–∏
 * - –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
 */

class RoadmapManager {
  constructor() {
    this.roadmaps = new Map();
    this.progress = new Map();
    this.storageKey = 'heys_roadmap_progress';
    this.roadmapFiles = [
      'docs/plans/ENHANCED_ERROR_LOGGING_SYSTEM.md',
      'docs/plans/UNIVERSAL_NAVIGATION_MAPS_SYSTEM.md',
      'docs/plans/FUTURE_NAVIGATION_MAPS_IMPLEMENTATION_FIXED.md',
      'docs/plans/EXAMPLE_COMPLETE_ROADMAP.md',
    ];

    this.taskStates = {
      TODO: 'todo',
      IN_PROGRESS: 'in_progress',
      DONE: 'done',
      BLOCKED: 'blocked',
    };

    this.taskIcons = {
      [this.taskStates.TODO]: '‚è≥',
      [this.taskStates.IN_PROGRESS]: 'üîÑ',
      [this.taskStates.DONE]: '‚úÖ',
      [this.taskStates.BLOCKED]: 'üö´',
    };

    this.loadProgress();
    this.init();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
   */
  async init() {
    console.log('üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Roadmap Manager...');
    await this.loadRoadmaps();
    this.createUI();
    console.log('‚úÖ Roadmap Manager –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–æ—Ä–æ–∂–Ω—ã—Ö –∫–∞—Ä—Ç
   */
  async loadRoadmaps() {
    for (const filePath of this.roadmapFiles) {
      try {
        const response = await fetch(filePath);
        if (response.ok) {
          const content = await response.text();
          const roadmap = this.parseRoadmap(content, filePath);
          this.roadmaps.set(filePath, roadmap);

          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
          if (!this.progress.has(filePath)) {
            this.initRoadmapProgress(filePath, roadmap);
          }
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Ä–æ–∂–Ω—É—é –∫–∞—Ä—Ç—É: ${filePath}`, error);
      }
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã –∏–∑ markdown
   */
  parseRoadmap(content, filePath) {
    const lines = content.split('\n');
    const roadmap = {
      title: '',
      sections: [],
      tasks: [],
      filePath: filePath,
    };

    let currentSection = null;
    let taskCounter = 0;

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();

      // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã
      if (line.startsWith('# ') && !roadmap.title) {
        roadmap.title = line
          .replace('# ', '')
          .replace(/üó∫Ô∏è|ROADMAP:|–°–ò–°–¢–ï–ú–ê|–î–ï–¢–ê–õ–¨–ù–û–ì–û/, '')
          .trim();
      }

      // –°–µ–∫—Ü–∏–∏
      if (line.startsWith('## ')) {
        currentSection = {
          title: line.replace('## ', ''),
          tasks: [],
        };
        roadmap.sections.push(currentSection);
      }

      // –ó–∞–¥–∞—á–∏ (—Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
      if (this.isTaskLine(line)) {
        const task = this.parseTask(line, taskCounter++, currentSection?.title);
        roadmap.tasks.push(task);
        if (currentSection) {
          currentSection.tasks.push(task);
        }
      }
    }

    return roadmap;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–¥–∞—á–µ–π
   */
  isTaskLine(line) {
    const taskPatterns = [
      /^-\s+\*\*.*\*\*/, // - **–ó–∞–¥–∞—á–∞**
      /^-\s+‚úÖ/, // - ‚úÖ –ó–∞–¥–∞—á–∞
      /^-\s+‚ùå/, // - ‚ùå –ó–∞–¥–∞—á–∞
      /^-\s+‚è≥/, // - ‚è≥ –ó–∞–¥–∞—á–∞
      /^-\s+üîÑ/, // - üîÑ –ó–∞–¥–∞—á–∞
      /^\*\*.*\*\*/, // **–ó–∞–¥–∞—á–∞**
      /^###\s+/, // ### –ü–æ–¥–∑–∞–¥–∞—á–∞
      /^####\s+/, // #### –ú–∏–∫—Ä–æ–∑–∞–¥–∞—á–∞
      /^1\./, // 1. –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
      /^\d+\./, // –õ—é–±–∞—è –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
    ];

    return taskPatterns.some(pattern => pattern.test(line));
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏
   */
  parseTask(line, id, sectionTitle) {
    const task = {
      id: `task_${id}`,
      originalLine: line,
      title: '',
      description: '',
      priority: 'normal',
      section: sectionTitle || '–û–±—â–∏–µ',
      state: this.taskStates.TODO,
    };

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏
    let title = line;

    // –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–∞
    title = title
      .replace(/^-\s+/, '')
      .replace(/^\*\s+/, '')
      .replace(/^\d+\.\s+/, '');

    // –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
    title = title.replace(/^[‚úÖ‚ùå‚è≥üîÑüö´]\s+/, '');

    // –£–±–∏—Ä–∞–µ–º markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    title = title.replace(/\*\*(.*?)\*\*/g, '$1');
    title = title.replace(/#{1,6}\s+/, '');

    task.title = title.trim();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —ç–º–æ–¥–∑–∏ –∏ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    if (line.includes('üî•') || line.includes('–ö–†–ò–¢–ò–ß–ù–û') || line.includes('URGENT')) {
      task.priority = 'high';
    } else if (line.includes('‚≠ê') || line.includes('–í–ê–ñ–ù–û') || line.includes('–í–ê–ñ–ù–´–ô')) {
      task.priority = 'medium';
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —ç–º–æ–¥–∑–∏
    if (line.includes('‚úÖ')) {
      task.state = this.taskStates.DONE;
    } else if (line.includes('üîÑ')) {
      task.state = this.taskStates.IN_PROGRESS;
    } else if (line.includes('üö´') || line.includes('‚ùå')) {
      task.state = this.taskStates.BLOCKED;
    }

    return task;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –Ω–æ–≤–æ–π –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã
   */
  initRoadmapProgress(filePath, roadmap) {
    const progressData = {
      roadmapTitle: roadmap.title,
      totalTasks: roadmap.tasks.length,
      tasks: {},
      lastUpdated: new Date().toISOString(),
      createdAt: new Date().toISOString(),
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
    roadmap.tasks.forEach(task => {
      progressData.tasks[task.id] = {
        state: task.state,
        updatedAt: new Date().toISOString(),
        completedBy: null,
        notes: '',
      };
    });

    this.progress.set(filePath, progressData);
    this.saveProgress();
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
   */
  createUI() {
    const container = document.createElement('div');
    container.id = 'roadmap-manager-ui';
    container.className = 'roadmap-manager';

    container.innerHTML = `
            <div class="roadmap-header">
                <h2>üó∫Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ä–æ–∂–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏ HEYS</h2>
                <div class="roadmap-stats">
                    <span class="total-roadmaps">–ö–∞—Ä—Ç: ${this.roadmaps.size}</span>
                    <span class="total-tasks">–í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${this.getTotalTasks()}</span>
                    <span class="completed-tasks">–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${this.getCompletedTasks()}</span>
                </div>
            </div>
            
            <div class="roadmap-controls">
                <button onclick="window.roadmapManager.exportProgress()" class="export-btn">üìä –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</button>
                <button onclick="window.roadmapManager.resetProgress()" class="reset-btn">üîÑ –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</button>
                <button onclick="window.roadmapManager.refresh()" class="refresh-btn">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
            </div>
            
            <div class="roadmap-list" id="roadmap-list">
                ${this.renderRoadmaps()}
            </div>
        `;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
    this.addStyles();

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
    document.body.appendChild(container);

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
    window.roadmapManager = this;
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –¥–æ—Ä–æ–∂–Ω—ã—Ö –∫–∞—Ä—Ç
   */
  renderRoadmaps() {
    let html = '';

    for (const [filePath, roadmap] of this.roadmaps) {
      const progress = this.progress.get(filePath);
      const completedCount = this.getCompletedTasksForRoadmap(filePath);
      const totalCount = roadmap.tasks.length;
      const percentage = totalCount > 0 ? Math.round((completedCount / totalCount) * 100) : 0;

      html += `
                <div class="roadmap-item" data-filepath="${filePath}">
                    <div class="roadmap-item-header">
                        <h3>${roadmap.title}</h3>
                        <div class="roadmap-progress">
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: ${percentage}%"></div>
                            </div>
                            <span class="progress-text">${completedCount}/${totalCount} (${percentage}%)</span>
                        </div>
                    </div>
                    
                    <div class="roadmap-sections">
                        ${this.renderSections(roadmap, filePath)}
                    </div>
                    
                    <div class="roadmap-actions">
                        <button onclick="window.roadmapManager.toggleRoadmap('${filePath}')" class="toggle-btn">
                            üìã –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á–∏
                        </button>
                        <button onclick="window.roadmapManager.markAllCompleted('${filePath}')" class="complete-all-btn">
                            ‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
                        </button>
                    </div>
                </div>
            `;
    }

    return html;
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–µ–∫—Ü–∏–π –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã
   */
  renderSections(roadmap, filePath) {
    let html = '';

    for (const section of roadmap.sections) {
      if (section.tasks.length === 0) continue;

      html += `
                <div class="roadmap-section">
                    <h4>${section.title}</h4>
                    <div class="task-list">
                        ${this.renderTasks(section.tasks, filePath)}
                    </div>
                </div>
            `;
    }

    return html;
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
   */
  renderTasks(tasks, filePath) {
    let html = '';

    for (const task of tasks) {
      const progress = this.progress.get(filePath);
      const taskProgress = progress?.tasks[task.id] || { state: task.state };
      const icon = this.taskIcons[taskProgress.state];
      const stateClass = taskProgress.state;

      html += `
                <div class="task-item ${stateClass}" data-task-id="${task.id}">
                    <div class="task-content">
                        <span class="task-icon">${icon}</span>
                        <span class="task-title">${task.title}</span>
                        <span class="task-priority priority-${task.priority}">
                            ${task.priority === 'high' ? 'üî•' : task.priority === 'medium' ? '‚≠ê' : ''}
                        </span>
                    </div>
                    
                    <div class="task-actions">
                        <button onclick="window.roadmapManager.setTaskState('${filePath}', '${task.id}', '${this.taskStates.TODO}')" 
                                class="state-btn todo-btn" title="–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é">‚è≥</button>
                        <button onclick="window.roadmapManager.setTaskState('${filePath}', '${task.id}', '${this.taskStates.IN_PROGRESS}')" 
                                class="state-btn progress-btn" title="–í –ø—Ä–æ—Ü–µ—Å—Å–µ">üîÑ</button>
                        <button onclick="window.roadmapManager.setTaskState('${filePath}', '${task.id}', '${this.taskStates.DONE}')" 
                                class="state-btn done-btn" title="–í—ã–ø–æ–ª–Ω–µ–Ω–æ">‚úÖ</button>
                        <button onclick="window.roadmapManager.setTaskState('${filePath}', '${task.id}', '${this.taskStates.BLOCKED}')" 
                                class="state-btn blocked-btn" title="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ">üö´</button>
                    </div>
                </div>
            `;
    }

    return html;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á–∏
   */
  setTaskState(filePath, taskId, newState) {
    const progress = this.progress.get(filePath);
    if (!progress) return;

    progress.tasks[taskId] = {
      ...progress.tasks[taskId],
      state: newState,
      updatedAt: new Date().toISOString(),
      completedBy: newState === this.taskStates.DONE ? 'User' : null,
    };

    progress.lastUpdated = new Date().toISOString();

    this.saveProgress();
    this.updateUI();

    console.log(`‚úÖ –ó–∞–¥–∞—á–∞ "${taskId}" –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${newState}`);
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã
   */
  toggleRoadmap(filePath) {
    const roadmapElement = document.querySelector(
      `[data-filepath="${filePath}"] .roadmap-sections`
    );
    if (roadmapElement) {
      roadmapElement.style.display = roadmapElement.style.display === 'none' ? 'block' : 'none';
    }
  }

  /**
   * –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
   */
  markAllCompleted(filePath) {
    const roadmap = this.roadmaps.get(filePath);
    if (!roadmap) return;

    const progress = this.progress.get(filePath);
    if (!progress) return;

    roadmap.tasks.forEach(task => {
      progress.tasks[task.id] = {
        ...progress.tasks[task.id],
        state: this.taskStates.DONE,
        updatedAt: new Date().toISOString(),
        completedBy: 'User (bulk completion)',
      };
    });

    progress.lastUpdated = new Date().toISOString();
    this.saveProgress();
    this.updateUI();

    console.log(`‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤ "${roadmap.title}" –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ`);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á
   */
  getTotalTasks() {
    let total = 0;
    for (const roadmap of this.roadmaps.values()) {
      total += roadmap.tasks.length;
    }
    return total;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
   */
  getCompletedTasks() {
    let completed = 0;
    for (const [filePath, progress] of this.progress) {
      for (const taskProgress of Object.values(progress.tasks)) {
        if (taskProgress.state === this.taskStates.DONE) {
          completed++;
        }
      }
    }
    return completed;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã
   */
  getCompletedTasksForRoadmap(filePath) {
    const progress = this.progress.get(filePath);
    if (!progress) return 0;

    let completed = 0;
    for (const taskProgress of Object.values(progress.tasks)) {
      if (taskProgress.state === this.taskStates.DONE) {
        completed++;
      }
    }
    return completed;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
   */
  updateUI() {
    const roadmapList = document.getElementById('roadmap-list');
    if (roadmapList) {
      roadmapList.innerHTML = this.renderRoadmaps();
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalRoadmaps = document.querySelector('.total-roadmaps');
    const totalTasks = document.querySelector('.total-tasks');
    const completedTasks = document.querySelector('.completed-tasks');

    if (totalRoadmaps) totalRoadmaps.textContent = `–ö–∞—Ä—Ç: ${this.roadmaps.size}`;
    if (totalTasks) totalTasks.textContent = `–í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${this.getTotalTasks()}`;
    if (completedTasks) completedTasks.textContent = `–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${this.getCompletedTasks()}`;
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  exportProgress() {
    const exportData = {
      exportedAt: new Date().toISOString(),
      roadmaps: [],
      summary: {
        totalRoadmaps: this.roadmaps.size,
        totalTasks: this.getTotalTasks(),
        completedTasks: this.getCompletedTasks(),
        progressPercentage: Math.round((this.getCompletedTasks() / this.getTotalTasks()) * 100),
      },
    };

    for (const [filePath, roadmap] of this.roadmaps) {
      const progress = this.progress.get(filePath);
      const completedCount = this.getCompletedTasksForRoadmap(filePath);

      exportData.roadmaps.push({
        filePath,
        title: roadmap.title,
        totalTasks: roadmap.tasks.length,
        completedTasks: completedCount,
        progress: Math.round((completedCount / roadmap.tasks.length) * 100),
        tasks: roadmap.tasks.map(task => ({
          id: task.id,
          title: task.title,
          section: task.section,
          priority: task.priority,
          state: progress?.tasks[task.id]?.state || task.state,
          updatedAt: progress?.tasks[task.id]?.updatedAt,
          completedBy: progress?.tasks[task.id]?.completedBy,
        })),
      });
    }

    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `heys-roadmap-progress-${Date.now()}.json`;
    a.click();
    URL.revokeObjectURL(url);

    console.log('üìä –ü—Ä–æ–≥—Ä–µ—Å—Å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:', exportData);
  }

  /**
   * –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  resetProgress() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      this.progress.clear();
      localStorage.removeItem(this.storageKey);

      // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      for (const [filePath, roadmap] of this.roadmaps) {
        this.initRoadmapProgress(filePath, roadmap);
      }

      this.updateUI();
      console.log('üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω');
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async refresh() {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Ä–æ–∂–Ω—ã—Ö –∫–∞—Ä—Ç...');
    this.roadmaps.clear();
    await this.loadRoadmaps();
    this.updateUI();
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ localStorage
   */
  saveProgress() {
    const progressData = {};
    for (const [filePath, progress] of this.progress) {
      progressData[filePath] = progress;
    }
    localStorage.setItem(this.storageKey, JSON.stringify(progressData));
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑ localStorage
   */
  loadProgress() {
    try {
      const saved = localStorage.getItem(this.storageKey);
      if (saved) {
        const progressData = JSON.parse(saved);
        for (const [filePath, progress] of Object.entries(progressData)) {
          this.progress.set(filePath, progress);
        }
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
   */
  addStyles() {
    if (document.getElementById('roadmap-manager-styles')) return;

    const styles = document.createElement('style');
    styles.id = 'roadmap-manager-styles';
    styles.textContent = `
            .roadmap-manager {
                max-width: 1200px;
                margin: 20px auto;
                padding: 20px;
                background: #f8f9fa;
                border-radius: 10px;
                font-family: 'Segoe UI', sans-serif;
            }

            .roadmap-header {
                text-align: center;
                margin-bottom: 20px;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                border-radius: 10px;
            }

            .roadmap-stats {
                display: flex;
                justify-content: space-around;
                margin-top: 15px;
                flex-wrap: wrap;
            }

            .roadmap-stats span {
                background: rgba(255,255,255,0.2);
                padding: 8px 15px;
                border-radius: 20px;
                margin: 5px;
            }

            .roadmap-controls {
                display: flex;
                justify-content: center;
                gap: 10px;
                margin-bottom: 20px;
                flex-wrap: wrap;
            }

            .roadmap-controls button {
                padding: 10px 20px;
                border: none;
                border-radius: 8px;
                cursor: pointer;
                font-weight: bold;
                transition: all 0.3s ease;
            }

            .export-btn { background: #28a745; color: white; }
            .reset-btn { background: #dc3545; color: white; }
            .refresh-btn { background: #17a2b8; color: white; }

            .roadmap-controls button:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            }

            .roadmap-item {
                background: white;
                margin-bottom: 20px;
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                overflow: hidden;
            }

            .roadmap-item-header {
                padding: 20px;
                background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
                color: white;
            }

            .roadmap-item-header h3 {
                margin: 0 0 15px 0;
                font-size: 1.4em;
            }

            .roadmap-progress {
                display: flex;
                align-items: center;
                gap: 15px;
            }

            .progress-bar {
                flex: 1;
                height: 8px;
                background: rgba(255,255,255,0.3);
                border-radius: 4px;
                overflow: hidden;
            }

            .progress-fill {
                height: 100%;
                background: #4CAF50;
                transition: width 0.3s ease;
            }

            .progress-text {
                font-weight: bold;
                min-width: 80px;
            }

            .roadmap-sections {
                padding: 20px;
            }

            .roadmap-section {
                margin-bottom: 25px;
            }

            .roadmap-section h4 {
                color: #333;
                border-bottom: 2px solid #e9ecef;
                padding-bottom: 8px;
                margin-bottom: 15px;
            }

            .task-item {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 12px 15px;
                margin-bottom: 8px;
                border-radius: 8px;
                border-left: 4px solid #e9ecef;
                background: #f8f9fa;
                transition: all 0.3s ease;
            }

            .task-item:hover {
                transform: translateX(5px);
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            }

            .task-item.done {
                background: #d4edda;
                border-left-color: #28a745;
            }

            .task-item.in_progress {
                background: #fff3cd;
                border-left-color: #ffc107;
            }

            .task-item.blocked {
                background: #f8d7da;
                border-left-color: #dc3545;
            }

            .task-content {
                display: flex;
                align-items: center;
                gap: 10px;
                flex: 1;
            }

            .task-icon {
                font-size: 1.2em;
            }

            .task-title {
                flex: 1;
                font-weight: 500;
            }

            .task-priority {
                margin-left: 10px;
            }

            .task-actions {
                display: flex;
                gap: 5px;
            }

            .state-btn {
                width: 35px;
                height: 35px;
                border: none;
                border-radius: 50%;
                cursor: pointer;
                font-size: 1.1em;
                transition: all 0.2s ease;
                background: #e9ecef;
            }

            .state-btn:hover {
                transform: scale(1.1);
                box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            }

            .todo-btn:hover { background: #ffc107; }
            .progress-btn:hover { background: #17a2b8; }
            .done-btn:hover { background: #28a745; }
            .blocked-btn:hover { background: #dc3545; }

            .roadmap-actions {
                padding: 15px 20px;
                background: #f8f9fa;
                display: flex;
                gap: 10px;
                justify-content: center;
                flex-wrap: wrap;
            }

            .toggle-btn, .complete-all-btn {
                padding: 8px 16px;
                border: none;
                border-radius: 6px;
                cursor: pointer;
                font-weight: bold;
                transition: all 0.2s ease;
            }

            .toggle-btn {
                background: #6c757d;
                color: white;
            }

            .complete-all-btn {
                background: #28a745;
                color: white;
            }

            .toggle-btn:hover, .complete-all-btn:hover {
                transform: translateY(-1px);
                opacity: 0.9;
            }

            @media (max-width: 768px) {
                .roadmap-manager {
                    margin: 10px;
                    padding: 15px;
                }

                .roadmap-stats {
                    flex-direction: column;
                    align-items: center;
                }

                .task-item {
                    flex-direction: column;
                    align-items: flex-start;
                    gap: 10px;
                }

                .task-actions {
                    align-self: flex-end;
                }
            }
        `;

    document.head.appendChild(styles);
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if (typeof window !== 'undefined') {
  window.addEventListener('DOMContentLoaded', () => {
    if (!window.roadmapManager) {
      window.roadmapManager = new RoadmapManager();
    }
  });
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = RoadmapManager;
}
