/**
 * üìä REAL-TIME ERROR DASHBOARD
 * Live-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
 *
 * –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫
 * - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 * - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫ –ø–æ –æ—à–∏–±–∫–∞–º
 * - –≠–∫—Å–ø–æ—Ä—Ç –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å HEYS –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–æ–π
 *
 * @version 1.0.0
 * @created 26.08.2025
 */

class RealTimeErrorDashboard {
  constructor(containerId = 'error-dashboard') {
    this.containerId = containerId;
    this.container = null;
    this.logger = null;
    this.isActive = false;
    this.updateInterval = null;
    this.filters = {
      level: 'all',
      category: 'all',
      timeRange: '1h',
      searchText: '',
    };
    this.chartData = {
      timeline: [],
      byLevel: {},
      byCategory: {},
    };

    this.init();
  }

  init() {
    this.createContainer();
    this.setupEventListeners();
    this.connectToLogger();
    this.startRealTimeUpdates();
  }

  /**
   * üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ dashboard
   */
  createContainer() {
    this.container = document.getElementById(this.containerId);

    if (!this.container) {
      this.container = document.createElement('div');
      this.container.id = this.containerId;
      this.container.className = 'error-dashboard';
      document.body.appendChild(this.container);
    }

    this.container.innerHTML = this.generateDashboardHTML();
    this.applyStyles();
  }

  /**
   * üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã dashboard
   */
  generateDashboardHTML() {
    return `
            <div class="dashboard-header">
                <h2>üîç Real-Time Error Dashboard</h2>
                <div class="dashboard-controls">
                    <button class="control-btn" onclick="errorDashboard.togglePause()">
                        <span id="pause-icon">‚è∏Ô∏è</span> <span id="pause-text">–ü–∞—É–∑–∞</span>
                    </button>
                    <button class="control-btn" onclick="errorDashboard.clearDashboard()">
                        üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
                    </button>
                    <button class="control-btn" onclick="errorDashboard.exportReport()">
                        üìä –≠–∫—Å–ø–æ—Ä—Ç
                    </button>
                    <button class="control-btn" onclick="errorDashboard.openSettings()">
                        ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                    </button>
                </div>
            </div>
            
            <div class="dashboard-stats">
                <div class="stat-card">
                    <div class="stat-title">–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫</div>
                    <div class="stat-value" id="total-errors">0</div>
                    <div class="stat-change" id="total-change">+0</div>
                </div>
                <div class="stat-card critical">
                    <div class="stat-title">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ</div>
                    <div class="stat-value" id="critical-errors">0</div>
                    <div class="stat-change" id="critical-change">+0</div>
                </div>
                <div class="stat-card high">
                    <div class="stat-title">–í—ã—Å–æ–∫–∏–µ</div>
                    <div class="stat-value" id="high-errors">0</div>
                    <div class="stat-change" id="high-change">+0</div>
                </div>
                <div class="stat-card medium">
                    <div class="stat-title">–°—Ä–µ–¥–Ω–∏–µ</div>
                    <div class="stat-value" id="medium-errors">0</div>
                    <div class="stat-change" id="medium-change">+0</div>
                </div>
                <div class="stat-card low">
                    <div class="stat-title">–ù–∏–∑–∫–∏–µ</div>
                    <div class="stat-value" id="low-errors">0</div>
                    <div class="stat-change" id="low-change">+0</div>
                </div>
            </div>
            
            <div class="dashboard-filters">
                <div class="filter-group">
                    <label>–£—Ä–æ–≤–µ–Ω—å:</label>
                    <select id="level-filter" onchange="errorDashboard.updateFilter('level', this.value)">
                        <option value="all">–í—Å–µ</option>
                        <option value="error">–û—à–∏–±–∫–∏</option>
                        <option value="warning">–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è</option>
                        <option value="info">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</option>
                        <option value="debug">–û—Ç–ª–∞–¥–∫–∞</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
                    <select id="category-filter" onchange="errorDashboard.updateFilter('category', this.value)">
                        <option value="all">–í—Å–µ</option>
                        <option value="heys-core">HEYS Core</option>
                        <option value="heys-storage">HEYS Storage</option>
                        <option value="module">–ú–æ–¥—É–ª–∏</option>
                        <option value="network">–°–µ—Ç—å</option>
                        <option value="performance">–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label>–ü–µ—Ä–∏–æ–¥:</label>
                    <select id="time-filter" onchange="errorDashboard.updateFilter('timeRange', this.value)">
                        <option value="15m">15 –º–∏–Ω—É—Ç</option>
                        <option value="1h" selected>1 —á–∞—Å</option>
                        <option value="24h">24 —á–∞—Å–∞</option>
                        <option value="all">–í—Å—ë –≤—Ä–µ–º—è</option>
                    </select>
                </div>
                <div class="filter-group search-group">
                    <label>–ü–æ–∏—Å–∫:</label>
                    <input type="text" id="search-filter" placeholder="–ü–æ–∏—Å–∫ –ø–æ –æ—à–∏–±–∫–∞–º..." 
                           oninput="errorDashboard.updateFilter('searchText', this.value)">
                </div>
            </div>
            
            <div class="dashboard-content">
                <div class="content-section">
                    <h3>üìà –ì—Ä–∞—Ñ–∏–∫ –æ—à–∏–±–æ–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏</h3>
                    <div class="chart-container" id="timeline-chart">
                        <canvas id="timeline-canvas" width="800" height="200"></canvas>
                    </div>
                </div>
                
                <div class="content-section">
                    <h3>üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏</h3>
                    <div class="errors-list" id="errors-list">
                        <!-- –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –±—É–¥–µ—Ç –∑–¥–µ—Å—å -->
                    </div>
                </div>
            </div>
            
            <div class="dashboard-footer">
                <div class="footer-info">
                    <span>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <span id="last-update">-</span></span>
                    <span>–°—Ç–∞—Ç—É—Å: <span id="connection-status">üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω</span></span>
                </div>
            </div>
        `;
  }

  /**
   * üé® –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
   */
  applyStyles() {
    if (document.getElementById('error-dashboard-styles')) return;

    const styles = document.createElement('style');
    styles.id = 'error-dashboard-styles';
    styles.textContent = `
            .error-dashboard {
                position: fixed;
                top: 10px;
                right: 10px;
                width: 400px;
                max-height: 90vh;
                background: white;
                border-radius: 12px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.2);
                font-family: 'Segoe UI', sans-serif;
                font-size: 12px;
                z-index: 10000;
                overflow: hidden;
                display: flex;
                flex-direction: column;
            }
            
            .dashboard-header {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 15px;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
            
            .dashboard-header h2 {
                margin: 0;
                font-size: 16px;
            }
            
            .dashboard-controls {
                display: flex;
                gap: 5px;
            }
            
            .control-btn {
                background: rgba(255,255,255,0.2);
                border: none;
                color: white;
                padding: 5px 8px;
                border-radius: 4px;
                cursor: pointer;
                font-size: 10px;
                transition: background 0.2s;
            }
            
            .control-btn:hover {
                background: rgba(255,255,255,0.3);
            }
            
            .dashboard-stats {
                display: grid;
                grid-template-columns: repeat(5, 1fr);
                gap: 1px;
                background: #f1f5f9;
                padding: 1px;
            }
            
            .stat-card {
                background: white;
                padding: 10px;
                text-align: center;
            }
            
            .stat-card.critical { border-top: 3px solid #dc2626; }
            .stat-card.high { border-top: 3px solid #ea580c; }
            .stat-card.medium { border-top: 3px solid #ca8a04; }
            .stat-card.low { border-top: 3px solid #16a34a; }
            
            .stat-title {
                font-size: 10px;
                color: #666;
                margin-bottom: 5px;
            }
            
            .stat-value {
                font-size: 18px;
                font-weight: bold;
                color: #2d3748;
            }
            
            .stat-change {
                font-size: 10px;
                color: #16a34a;
                margin-top: 2px;
            }
            
            .dashboard-filters {
                background: #f8fafc;
                padding: 10px;
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 10px;
                border-bottom: 1px solid #e2e8f0;
            }
            
            .search-group {
                grid-column: span 2;
            }
            
            .filter-group label {
                display: block;
                font-size: 10px;
                color: #4a5568;
                margin-bottom: 3px;
                font-weight: 500;
            }
            
            .filter-group select,
            .filter-group input {
                width: 100%;
                padding: 4px 6px;
                border: 1px solid #d1d5db;
                border-radius: 4px;
                font-size: 11px;
            }
            
            .dashboard-content {
                flex: 1;
                overflow-y: auto;
                padding: 10px;
            }
            
            .content-section {
                margin-bottom: 15px;
            }
            
            .content-section h3 {
                margin: 0 0 10px 0;
                font-size: 14px;
                color: #2d3748;
            }
            
            .chart-container {
                height: 120px;
                background: #f8fafc;
                border-radius: 6px;
                padding: 10px;
                margin-bottom: 15px;
            }
            
            .errors-list {
                max-height: 300px;
                overflow-y: auto;
            }
            
            .error-item {
                background: white;
                border: 1px solid #e2e8f0;
                border-radius: 6px;
                padding: 8px;
                margin-bottom: 6px;
                cursor: pointer;
                transition: all 0.2s;
            }
            
            .error-item:hover {
                border-color: #667eea;
                box-shadow: 0 2px 8px rgba(102,126,234,0.1);
            }
            
            .error-item.level-error { border-left: 4px solid #dc2626; }
            .error-item.level-warning { border-left: 4px solid #ca8a04; }
            .error-item.level-info { border-left: 4px solid #2563eb; }
            .error-item.level-debug { border-left: 4px solid #6b7280; }
            
            .error-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 4px;
            }
            
            .error-title {
                font-weight: 600;
                color: #2d3748;
                font-size: 11px;
            }
            
            .error-time {
                font-size: 10px;
                color: #6b7280;
            }
            
            .error-message {
                font-size: 10px;
                color: #4a5568;
                margin-bottom: 4px;
                line-height: 1.3;
            }
            
            .error-tags {
                display: flex;
                gap: 4px;
                flex-wrap: wrap;
            }
            
            .error-tag {
                background: #e2e8f0;
                color: #4a5568;
                padding: 2px 6px;
                border-radius: 12px;
                font-size: 9px;
            }
            
            .error-tag.heys { background: #dbeafe; color: #1e40af; }
            .error-tag.critical { background: #fee2e2; color: #dc2626; }
            
            .dashboard-footer {
                background: #f8fafc;
                padding: 8px 15px;
                border-top: 1px solid #e2e8f0;
                font-size: 10px;
                color: #6b7280;
            }
            
            .footer-info {
                display: flex;
                justify-content: space-between;
            }
            
            .minimized {
                height: auto !important;
                max-height: 60px !important;
            }
            
            .minimized .dashboard-content,
            .minimized .dashboard-stats,
            .minimized .dashboard-filters {
                display: none;
            }
            
            @media (max-width: 768px) {
                .error-dashboard {
                    width: 95%;
                    right: 2.5%;
                    left: 2.5%;
                }
                
                .dashboard-stats {
                    grid-template-columns: repeat(3, 1fr);
                }
                
                .dashboard-filters {
                    grid-template-columns: 1fr;
                }
                
                .search-group {
                    grid-column: span 1;
                }
            }
        `;

    document.head.appendChild(styles);
  }

  /**
   * üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–≥–≥–µ—Ä—É
   */
  connectToLogger() {
    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –ª–æ–≥–≥–µ—Ä—É
    if (window.enhancedLogger) {
      this.logger = window.enhancedLogger;
      this.logger.addListener(this.onNewLogEntry.bind(this));
      this.updateConnectionStatus('üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Enhanced Logger');
    } else {
      // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–∞
      window.addEventListener('enhancedLogEntry', (event) => {
        this.onNewLogEntry(event.detail);
      });
      this.updateConnectionStatus('üü° –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    setInterval(() => {
      if (!this.logger && window.enhancedLogger) {
        this.connectToLogger();
      }
    }, 5000);
  }

  /**
   * üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞
   */
  onNewLogEntry(logEntry) {
    if (!this.isActive) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    this.updateChartData(logEntry);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.updateStats();

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
    this.addErrorToList(logEntry);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    this.updateLastUpdateTime();
  }

  /**
   * üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
   */
  updateChartData(logEntry) {
    const now = Date.now();
    const timeSlot = Math.floor(now / (60 * 1000)) * 60 * 1000; // –ú–∏–Ω—É—Ç–Ω—ã–µ —Å–ª–æ—Ç—ã

    // –û–±–Ω–æ–≤–ª—è–µ–º timeline –¥–∞–Ω–Ω—ã–µ
    let timelineEntry = this.chartData.timeline.find((entry) => entry.time === timeSlot);
    if (!timelineEntry) {
      timelineEntry = { time: timeSlot, errors: 0, warnings: 0, info: 0, debug: 0 };
      this.chartData.timeline.push(timelineEntry);
    }

    timelineEntry[logEntry.level]++;

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 –º–∏–Ω—É—Ç)
    const cutoff = now - 60 * 60 * 1000;
    this.chartData.timeline = this.chartData.timeline.filter((entry) => entry.time > cutoff);

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É—Ä–æ–≤–Ω—è–º
    this.chartData.byLevel[logEntry.level] = (this.chartData.byLevel[logEntry.level] || 0) + 1;

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if (logEntry.classification && logEntry.classification.category) {
      const category = logEntry.classification.category;
      this.chartData.byCategory[category] = (this.chartData.byCategory[category] || 0) + 1;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    this.updateTimelineChart();
  }

  /**
   * üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ timeline –≥—Ä–∞—Ñ–∏–∫–∞
   */
  updateTimelineChart() {
    const canvas = document.getElementById('timeline-canvas');
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    const width = canvas.width;
    const height = canvas.height;

    // –û—á–∏—â–∞–µ–º canvas
    ctx.clearRect(0, 0, width, height);

    if (this.chartData.timeline.length === 0) return;

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
    const padding = 20;
    const chartWidth = width - 2 * padding;
    const chartHeight = height - 2 * padding;

    // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const maxValue = Math.max(
      ...this.chartData.timeline.map(
        (entry) => entry.errors + entry.warnings + entry.info + entry.debug,
      ),
    );

    if (maxValue === 0) return;

    // –†–∏—Å—É–µ–º –æ—Å–∏
    ctx.strokeStyle = '#e2e8f0';
    ctx.lineWidth = 1;
    ctx.beginPath();
    ctx.moveTo(padding, padding);
    ctx.lineTo(padding, height - padding);
    ctx.lineTo(width - padding, height - padding);
    ctx.stroke();

    // –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫
    const pointWidth = chartWidth / this.chartData.timeline.length;

    this.chartData.timeline.forEach((entry, index) => {
      const x = padding + index * pointWidth;
      const totalHeight =
        ((entry.errors + entry.warnings + entry.info + entry.debug) / maxValue) * chartHeight;

      let currentY = height - padding;

      // –†–∏—Å—É–µ–º —Å—Ç–æ–ª–±—Ü—ã —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
      const levels = [
        { key: 'errors', color: '#dc2626' },
        { key: 'warnings', color: '#ca8a04' },
        { key: 'info', color: '#2563eb' },
        { key: 'debug', color: '#6b7280' },
      ];

      levels.forEach((level) => {
        const levelHeight = (entry[level.key] / maxValue) * chartHeight;
        if (levelHeight > 0) {
          ctx.fillStyle = level.color;
          ctx.fillRect(x, currentY - levelHeight, pointWidth - 1, levelHeight);
          currentY -= levelHeight;
        }
      });
    });
  }

  /**
   * üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  updateStats() {
    if (!this.logger) return;

    const stats = this.logger.getStats();

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    document.getElementById('total-errors').textContent = stats.total;
    document.getElementById('critical-errors').textContent = stats.byLevel.error || 0;
    document.getElementById('high-errors').textContent = stats.byLevel.warning || 0;
    document.getElementById('medium-errors').textContent = stats.byLevel.info || 0;
    document.getElementById('low-errors').textContent = stats.byLevel.debug || 0;

    // TODO: –í—ã—á–∏—Å–ª–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥
    // –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º +0 –¥–ª—è –≤—Å–µ—Ö
  }

  /**
   * üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ —Å–ø–∏—Å–æ–∫
   */
  addErrorToList(logEntry) {
    const errorsList = document.getElementById('errors-list');
    if (!errorsList) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if (!this.passesFilters(logEntry)) return;

    const errorItem = this.createErrorItemHTML(logEntry);
    errorsList.insertAdjacentHTML('afterbegin', errorItem);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –æ—à–∏–±–æ–∫
    while (errorsList.children.length > 50) {
      errorsList.removeChild(errorsList.lastChild);
    }
  }

  /**
   * üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º
   */
  passesFilters(logEntry) {
    // –§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é
    if (this.filters.level !== 'all' && logEntry.level !== this.filters.level) {
      return false;
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (this.filters.category !== 'all') {
      const category = logEntry.classification?.category || 'general';
      if (category !== this.filters.category) {
        return false;
      }
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    if (this.filters.timeRange !== 'all') {
      const now = Date.now();
      const timeRanges = {
        '15m': 15 * 60 * 1000,
        '1h': 60 * 60 * 1000,
        '24h': 24 * 60 * 60 * 1000,
      };
      const timeLimit = timeRanges[this.filters.timeRange];
      if (timeLimit && now - logEntry.timestamp > timeLimit) {
        return false;
      }
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–∫—Å—Ç—É –ø–æ–∏—Å–∫–∞
    if (this.filters.searchText) {
      const searchText = this.filters.searchText.toLowerCase();
      const searchIn = [
        logEntry.title,
        logEntry.details?.message || '',
        JSON.stringify(logEntry.details || {}),
      ]
        .join(' ')
        .toLowerCase();

      if (!searchIn.includes(searchText)) {
        return false;
      }
    }

    return true;
  }

  /**
   * üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—à–∏–±–∫–∏
   */
  createErrorItemHTML(logEntry) {
    const time = new Date(logEntry.timestamp).toLocaleTimeString();
    const classification = logEntry.classification || {};
    const isHeys = classification.heysSpecific;
    const severity = classification.severity || 'medium';

    const tags = [
      logEntry.level,
      ...(classification.tags || []),
      isHeys ? 'heys' : null,
      severity === 'critical' ? 'critical' : null,
    ].filter(Boolean);

    const tagsHTML = tags.map((tag) => `<span class="error-tag ${tag}">${tag}</span>`).join('');

    return `
            <div class="error-item level-${logEntry.level}" onclick="errorDashboard.showErrorDetails('${logEntry.id}')">
                <div class="error-header">
                    <div class="error-title">${this.escapeHtml(logEntry.title)}</div>
                    <div class="error-time">${time}</div>
                </div>
                <div class="error-message">
                    ${this.escapeHtml(logEntry.details?.message || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}
                </div>
                <div class="error-tags">${tagsHTML}</div>
            </div>
        `;
  }

  /**
   * üîí –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
   */
  escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  /**
   * ‚è±Ô∏è –ó–∞–ø—É—Å–∫ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
   */
  startRealTimeUpdates() {
    this.isActive = true;
    this.updateInterval = setInterval(() => {
      this.updateStats();
      this.updateTimelineChart();
    }, 5000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  }

  /**
   * ‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
   */
  stopRealTimeUpdates() {
    this.isActive = false;
    if (this.updateInterval) {
      clearInterval(this.updateInterval);
      this.updateInterval = null;
    }
  }

  /**
   * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
   */
  updateFilter(filterType, value) {
    this.filters[filterType] = value;
    this.refreshErrorsList();
  }

  /**
   * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
   */
  refreshErrorsList() {
    const errorsList = document.getElementById('errors-list');
    if (!errorsList || !this.logger) return;

    errorsList.innerHTML = '';

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç Enhanced Error Logger
    const convertedFilters = this.convertFiltersForLogger(this.filters);

    // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    const logs = this.logger.getLogs(convertedFilters);

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log('üîÑ refreshErrorsList:', {
      originalFilters: this.filters,
      convertedFilters: convertedFilters,
      logsFound: logs.length,
      totalLogsInLogger: this.logger.logs?.length || 0,
    });

    logs
      .reverse()
      .slice(0, 50)
      .forEach((logEntry) => {
        const errorItem = this.createErrorItemHTML(logEntry);
        errorsList.insertAdjacentHTML('beforeend', errorItem);
      });
  }

  /**
   * üìÑ –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–∫–∏
   */
  showErrorDetails(logId) {
    if (!this.logger) return;

    const logEntry = this.logger.logs.find((log) => log.id === logId);
    if (!logEntry) return;

    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏
    this.showErrorModal(logEntry);
  }

  /**
   * üì± –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏
   */
  showErrorModal(logEntry) {
    const modal = document.createElement('div');
    modal.className = 'error-details-modal';
    modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h3>üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏</h3>
                    <button onclick="this.parentElement.parentElement.parentElement.remove()">‚úï</button>
                </div>
                <div class="modal-body">
                    <pre>${JSON.stringify(logEntry, null, 2)}</pre>
                </div>
                <div class="modal-footer">
                    <button onclick="navigator.clipboard.writeText(JSON.stringify(${JSON.stringify(logEntry)}, null, 2))">
                        üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button onclick="this.parentElement.parentElement.parentElement.remove()">
                        ‚ùå –ó–∞–∫—Ä—ã—Ç—å
                    </button>
                </div>
            </div>
        `;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 20000;
        `;

    modal.querySelector('.modal-content').style.cssText = `
            background: white;
            width: 90%;
            max-width: 800px;
            max-height: 90%;
            border-radius: 12px;
            display: flex;
            flex-direction: column;
        `;

    document.body.appendChild(modal);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.remove();
      }
    });
  }

  /**
   * ‚è∏Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—É–∑—ã
   */
  togglePause() {
    if (this.isActive) {
      this.stopRealTimeUpdates();
      document.getElementById('pause-icon').textContent = '‚ñ∂Ô∏è';
      document.getElementById('pause-text').textContent = '–ó–∞–ø—É—Å–∫';
      this.updateConnectionStatus('‚è∏Ô∏è –ù–∞ –ø–∞—É–∑–µ');
    } else {
      this.startRealTimeUpdates();
      document.getElementById('pause-icon').textContent = '‚è∏Ô∏è';
      document.getElementById('pause-text').textContent = '–ü–∞—É–∑–∞';
      this.updateConnectionStatus('üü¢ –ê–∫—Ç–∏–≤–µ–Ω');
    }
  }

  /**
   * üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ dashboard
   */
  clearDashboard() {
    this.chartData = { timeline: [], byLevel: {}, byCategory: {} };
    document.getElementById('errors-list').innerHTML = '';
    this.updateStats();
    this.updateTimelineChart();
  }

  /**
   * ÔøΩ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ Dashboard –≤ —Ñ–æ—Ä–º–∞—Ç Enhanced Error Logger
   */
  convertFiltersForLogger(dashboardFilters) {
    const loggerFilters = {};

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º level (–æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ 'all')
    if (dashboardFilters.level && dashboardFilters.level !== 'all') {
      loggerFilters.level = dashboardFilters.level;
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timeRange –≤ since
    if (dashboardFilters.timeRange && dashboardFilters.timeRange !== 'all') {
      const now = Date.now();
      const timeRanges = {
        '15m': 15 * 60 * 1000,
        '1h': 60 * 60 * 1000,
        '24h': 24 * 60 * 60 * 1000,
      };
      const timeLimit = timeRanges[dashboardFilters.timeRange];
      if (timeLimit) {
        loggerFilters.since = now - timeLimit;
      }
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º searchText (–æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å)
    if (dashboardFilters.searchText) {
      loggerFilters.searchText = dashboardFilters.searchText;
    }

    // category –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ classification
    if (dashboardFilters.category && dashboardFilters.category !== 'all') {
      loggerFilters.classification = dashboardFilters.category;
    }

    return loggerFilters;
  }

  /**
   * ÔøΩüìä –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞
   */
  exportReport() {
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    let activeLogger = this.logger || window.enhancedLogger;

    if (!activeLogger) {
      console.error('‚ùå No active logger found for export');
      alert('‚ùå –õ–æ–≥–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Enhanced Error Logger –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
      return;
    }

    console.log('üì§ Exporting from logger:', {
      loggerExists: !!activeLogger,
      logsCount: activeLogger.logs?.length || 0,
      isActive: activeLogger.isActive,
      sessionId: activeLogger.sessionId,
    });

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ–≥–∏ –ë–ï–ó —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    const allLogs = activeLogger.getLogs ? activeLogger.getLogs() : activeLogger.logs || [];

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã Dashboard –≤ —Ñ–æ—Ä–º–∞—Ç Enhanced Error Logger
    const convertedFilters = this.convertFiltersForLogger(this.filters);

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    const filteredLogs = activeLogger.getLogs ? activeLogger.getLogs(convertedFilters) : [];
    const stats = activeLogger.getStats ? activeLogger.getStats() : {};

    // –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –º–∞—Å—Å–∏–≤—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const directLogs = activeLogger.logs || [];

    console.log('üìä Export data debug:', {
      allLogsFromMethod: allLogs.length,
      filteredLogsFromMethod: filteredLogs.length,
      directLogsAccess: directLogs.length,
      statsTotal: stats.total,
      originalFilters: this.filters,
      convertedFilters: convertedFilters,
    });

    const report = {
      timestamp: new Date().toISOString(),
      stats: stats,
      chartData: this.chartData,
      filters: this.filters,
      logs: allLogs, // –õ–æ–≥–∏ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ getLogs()
      filteredLogs: filteredLogs, // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏
      directLogs: directLogs, // –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –º–∞—Å—Å–∏–≤—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      totalLogsCount: allLogs.length,
      filteredLogsCount: filteredLogs.length,
      directLogsCount: directLogs.length,
      debugInfo: {
        loggerType: activeLogger.constructor.name || 'Unknown',
        hasGetStats: typeof activeLogger.getStats === 'function',
        hasGetLogs: typeof activeLogger.getLogs === 'function',
        sessionId: activeLogger.sessionId,
        isActive: activeLogger.isActive,
        methodsAvailable: {
          getLogs: typeof activeLogger.getLogs === 'function',
          getStats: typeof activeLogger.getStats === 'function',
          logs: Array.isArray(activeLogger.logs),
        },
      },
    };

    console.log('üìä Export report prepared:', {
      totalLogs: report.totalLogsCount,
      filteredLogs: report.filteredLogsCount,
      directLogs: report.directLogsCount,
      statsTotal: report.stats.total,
      logsArrayEmpty: report.logs.length === 0,
      directLogsArrayEmpty: report.directLogs.length === 0,
    });

    const blob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `error-report-${Date.now()}.json`;
    a.click();
    URL.revokeObjectURL(url);

    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ
    console.log(
      `üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –æ—Ç—á–µ—Ç: ${allLogs.length} –≤—Å–µ–≥–æ –ª–æ–≥–æ–≤ (–º–µ—Ç–æ–¥), ${directLogs.length} –ø—Ä—è–º—ã—Ö –ª–æ–≥–æ–≤, ${filteredLogs.length} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö`,
    );

    // –ï—Å–ª–∏ –≤—Å–µ –º–∞—Å—Å–∏–≤—ã –ø—É—Å—Ç—ã–µ, —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞
    if (allLogs.length === 0 && directLogs.length === 0 && stats.total > 0) {
      console.warn(
        '‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏, –Ω–æ –º–∞—Å—Å–∏–≤—ã –ø—É—Å—Ç—ã–µ! –í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –º–µ—Ç–æ–¥–æ–º getLogs()',
      );
    }
  }

  /**
   * ‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  openSettings() {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏');
  }

  /**
   * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  updateConnectionStatus(status) {
    const statusElement = document.getElementById('connection-status');
    if (statusElement) {
      statusElement.textContent = status;
    }
  }

  /**
   * ‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  updateLastUpdateTime() {
    const updateElement = document.getElementById('last-update');
    if (updateElement) {
      updateElement.textContent = new Date().toLocaleTimeString();
    }
  }

  /**
   * üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  setupEventListeners() {
    // –ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –ø–æ –¥–≤–æ–π–Ω–æ–º—É –∫–ª–∏–∫—É –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    setTimeout(() => {
      const header = this.container?.querySelector('.dashboard-header h2');
      if (header) {
        header.addEventListener('dblclick', () => {
          this.container.classList.toggle('minimized');
        });
      }
    }, 100);

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
    document.addEventListener('keydown', (e) => {
      if (e.ctrlKey && e.shiftKey && e.key === 'E') {
        this.togglePause();
      }
    });
  }

  /**
   * üíÄ –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ dashboard
   */
  destroy() {
    this.stopRealTimeUpdates();
    if (this.container) {
      this.container.remove();
    }
    const styles = document.getElementById('error-dashboard-styles');
    if (styles) {
      styles.remove();
    }
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
if (typeof window !== 'undefined') {
  window.RealTimeErrorDashboard = RealTimeErrorDashboard;

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  if (!window.HEYS_ERROR_DASHBOARD_NO_AUTO_INIT) {
    setTimeout(() => {
      window.errorDashboard = new RealTimeErrorDashboard();
    }, 1000);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
if (typeof module !== 'undefined' && module.exports) {
  module.exports = RealTimeErrorDashboard;
}
