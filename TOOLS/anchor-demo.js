// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —è–∫–æ—Ä–µ–π
const testCode = `
class TestClass {
    constructor() {
        this.data = [];
    }
    
    async processData() {
        return this.data.map(item => item.value);
    }
    
    saveResults() {
        console.log('Saving...');
    }
}

function globalFunction() {
    return 'test';
}
`;

// –°–∏–º—É–ª—è—Ü–∏—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function addAnchorsDemo(code) {
  const lines = code.split('\n');
  const result = [];

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];

    // –î–æ–±–∞–≤–ª—è–µ–º —è–∫–æ—Ä—å –ø–µ—Ä–µ–¥ –∫–ª–∞—Å—Å–æ–º
    if (/^class\s+(\w+)/.test(line)) {
      const className = line.match(/^class\s+(\w+)/)[1];
      result.push(`// @ANCHOR:CLASS_${className.toUpperCase()}`);
      result.push(`// –ö–õ–ê–°–° ${className}`);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —è–∫–æ—Ä—å –ø–µ—Ä–µ–¥ –º–µ—Ç–æ–¥–∞–º–∏
    if (/^\s+(async\s+)?(\w+)\s*\(/.test(line)) {
      const methodName = line.match(/^\s+(?:async\s+)?(\w+)\s*\(/)[1];
      if (methodName !== 'constructor') {
        const indent = line.match(/^\s*/)[0];
        result.push(`${indent}// @ANCHOR:METHOD_${methodName.toUpperCase()}`);
        result.push(`${indent}// –ú–ï–¢–û–î ${methodName}`);
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —è–∫–æ—Ä—å –ø–µ—Ä–µ–¥ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    if (/^function\s+(\w+)/.test(line)) {
      const funcName = line.match(/^function\s+(\w+)/)[1];
      result.push(`// @ANCHOR:FUNCTION_${funcName.toUpperCase()}`);
      result.push(`// –§–£–ù–ö–¶–ò–Ø ${funcName}`);
    }

    result.push(line);
  }

  return result.join('\n');
}

console.log('üîß –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–í–¢–û–ì–ï–ù–ï–†–ê–¶–ò–ò –Ø–ö–û–†–ï–ô');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log('');
console.log('üìù –ò–°–•–û–î–ù–´–ô –ö–û–î:');
console.log(testCode);
console.log('');
console.log('üîó –ö–û–î –° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –î–û–ë–ê–í–õ–ï–ù–ù–´–ú–ò –Ø–ö–û–†–Ø–ú–ò:');
console.log(addAnchorsDemo(testCode));
console.log('');
console.log('‚úÖ –Ø–∫–æ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!');
