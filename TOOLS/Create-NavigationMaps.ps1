# üó∫Ô∏è –ì–ï–ù–ï–†–ê–¢–û–† –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–´–• –ö–ê–†–¢ HEYS
# –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞

param(
    [string]$ProjectPath = ".",
    [int]$MinLines = 300
)

Write-Host "üó∫Ô∏è –ì–ï–ù–ï–†–ê–¢–û–† –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–´–• –ö–ê–†–¢ HEYS" -ForegroundColor Cyan
Write-Host "====================================" -ForegroundColor Cyan

function Get-LargeFiles {
    param([string]$Path, [int]$MinLines)
    
    $extensions = @('.js', '.html', '.css', '.ts', '.jsx', '.tsx')
    $largeFiles = @()
    
    Get-ChildItem -Path $Path -Recurse -File | Where-Object {
        $_.Extension -in $extensions -and
        $_.Name -notlike "*.min.*" -and
        $_.Directory.Name -ne "node_modules"
    } | ForEach-Object {
        $lineCount = (Get-Content $_.FullName | Measure-Object -Line).Lines
        if ($lineCount -ge $MinLines) {
            $largeFiles += [PSCustomObject]@{
                Name = $_.Name
                Path = $_.FullName
                Lines = $lineCount
                Size = [math]::Round($_.Length / 1KB, 1)
                Extension = $_.Extension
            }
        }
    }
    
    return $largeFiles | Sort-Object Lines -Descending
}

function New-NavigationMap {
    param([string]$FilePath, [int]$TotalLines)
    
    $fileName = Split-Path $FilePath -Leaf
    $content = Get-Content $FilePath -Raw
    $lines = Get-Content $FilePath
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    $functions = @()
    $classes = @()
    $sections = @()
    
    # –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π
    $functionMatches = [regex]::Matches($content, 'function\s+(\w+)')
    foreach ($match in $functionMatches) {
        $lineIndex = ($content.Substring(0, $match.Index) -split "`n").Count
        $functions += [PSCustomObject]@{
            Name = $match.Groups[1].Value
            Line = $lineIndex
            Type = "function"
        }
    }
    
    # –ü–æ–∏—Å–∫ –∫–ª–∞—Å—Å–æ–≤
    $classMatches = [regex]::Matches($content, 'class\s+(\w+)')
    foreach ($match in $classMatches) {
        $lineIndex = ($content.Substring(0, $match.Index) -split "`n").Count
        $classes += [PSCustomObject]@{
            Name = $match.Groups[1].Value
            Line = $lineIndex
            Type = "class"
        }
    }
    
    # –ü–æ–∏—Å–∫ —Å–µ–∫—Ü–∏–π (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏)
    $sectionMatches = [regex]::Matches($content, '//\s*[=\-]{3,}\s*(.+?)\s*[=\-]{3,}')
    foreach ($match in $sectionMatches) {
        $lineIndex = ($content.Substring(0, $match.Index) -split "`n").Count
        $sections += [PSCustomObject]@{
            Name = $match.Groups[1].Value.Trim()
            Line = $lineIndex
            Type = "section"
        }
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
    $border = "‚îÄ" * 85
    $map = @"
/*
‚îå$border‚îê
‚îÇ üó∫Ô∏è –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–ê–Ø –ö–ê–†–¢–ê –§–ê–ô–õ–ê $fileName ($TotalLines —Å—Ç—Ä–æ–∫)$(" " * [math]::Max(0, 85 - $fileName.Length - $TotalLines.ToString().Length - 45))‚îÇ
‚îú$border‚î§
‚îÇ üìã –°–¢–†–£–ö–¢–£–†–ê –§–ê–ô–õ–ê:$(" " * (85 - 20))‚îÇ
‚îÇ$(" " * 85)‚îÇ
"@

    if ($sections.Count -gt 0) {
        $map += "`n‚îÇ üìã –°–ï–ö–¶–ò–ò:$(" " * (85 - 11))‚îÇ`n"
        foreach ($section in $sections) {
            $line = "‚îÇ    ‚îú‚îÄ‚îÄ $($section.Name) (—Å—Ç—Ä–æ–∫–∞ $($section.Line))"
            $padding = " " * [math]::Max(0, 85 - $line.Length + 4)
            $map += "$line$padding‚îÇ`n"
        }
        $map += "‚îÇ$(" " * 85)‚îÇ`n"
    }
    
    if ($functions.Count -gt 0) {
        $map += "`n‚îÇ ‚öôÔ∏è –§–£–ù–ö–¶–ò–ò:$(" " * (85 - 12))‚îÇ`n"
        foreach ($func in $functions) {
            $line = "‚îÇ    ‚îú‚îÄ‚îÄ $($func.Name)() (—Å—Ç—Ä–æ–∫–∞ $($func.Line))"
            $padding = " " * [math]::Max(0, 85 - $line.Length + 4)
            $map += "$line$padding‚îÇ`n"
        }
        $map += "‚îÇ$(" " * 85)‚îÇ`n"
    }
    
    if ($classes.Count -gt 0) {
        $map += "`n‚îÇ üì¶ –ö–õ–ê–°–°–´:$(" " * (85 - 11))‚îÇ`n"
        foreach ($class in $classes) {
            $line = "‚îÇ    ‚îú‚îÄ‚îÄ $($class.Name) (—Å—Ç—Ä–æ–∫–∞ $($class.Line))"
            $padding = " " * [math]::Max(0, 85 - $line.Length + 4)
            $map += "$line$padding‚îÇ`n"
        }
        $map += "‚îÇ$(" " * 85)‚îÇ`n"
    }

    $map += @"
‚îú$border‚î§
‚îÇ üéØ –ë–´–°–¢–†–´–ô –ü–û–ò–°–ö:$(" " * (85 - 18))‚îÇ
‚îÇ    ‚Ä¢ –ù–∞–π—Ç–∏ —Ñ—É–Ω–∫—Ü–∏—é: Ctrl+F "function " + –Ω–∞–∑–≤–∞–Ω–∏–µ$(" " * (85 - 52))‚îÇ
‚îÇ    ‚Ä¢ –ù–∞–π—Ç–∏ –∫–ª–∞—Å—Å: Ctrl+F "class " + –Ω–∞–∑–≤–∞–Ω–∏–µ$(" " * (85 - 48))‚îÇ
‚îÇ    ‚Ä¢ –û–±—â–∏–π –ø–æ–∏—Å–∫: Ctrl+F + –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ$(" " * (85 - 45))‚îÇ
‚îî$border‚îò
*/

"@

    return $map
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
Write-Host "üîç –°–∫–∞–Ω–∏—Ä—É—é –ø—Ä–æ–µ–∫—Ç: $ProjectPath" -ForegroundColor Yellow

$largeFiles = Get-LargeFiles -Path $ProjectPath -MinLines $MinLines

Write-Host "`nüìä –ù–ê–ô–î–ï–ù–ù–´–ï –ë–û–õ–¨–®–ò–ï –§–ê–ô–õ–´:" -ForegroundColor Green
$largeFiles | Format-Table Name, Lines, Size, Extension -AutoSize

Write-Host "`nüó∫Ô∏è –°–û–ó–î–ê–ù–ò–ï –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–´–• –ö–ê–†–¢:" -ForegroundColor Cyan

foreach ($file in $largeFiles) {
    Write-Host "üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: $($file.Name)" -ForegroundColor Yellow
    
    try {
        $map = New-NavigationMap -FilePath $file.Path -TotalLines $file.Lines
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        $backupPath = "$($file.Path).backup"
        if (-not (Test-Path $backupPath)) {
            Copy-Item $file.Path $backupPath
            Write-Host "   üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è" -ForegroundColor Gray
        }
        
        # –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        $originalContent = Get-Content $file.Path -Raw
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞—Ä—Ç–∞
        if ($originalContent -match '/\*\s*‚îå.*?–ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–ê–Ø –ö–ê–†–¢–ê.*?‚îò\s*\*/') {
            Write-Host "   ‚ö†Ô∏è –ö–∞—Ä—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—é" -ForegroundColor Yellow
        } else {
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
            $newContent = $map + $originalContent
            Set-Content -Path $file.Path -Value $newContent -Encoding UTF8
            Write-Host "   ‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞" -ForegroundColor Green
        }
    }
    catch {
        Write-Host "   ‚ùå –û—à–∏–±–∫–∞: $($_.Exception.Message)" -ForegroundColor Red
    }
}

Write-Host "`nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!" -ForegroundColor Green
Write-Host "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: $($largeFiles.Count)" -ForegroundColor Cyan
Write-Host "–ö–∞—Ä—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ $MinLines —Å—Ç—Ä–æ–∫" -ForegroundColor Cyan
