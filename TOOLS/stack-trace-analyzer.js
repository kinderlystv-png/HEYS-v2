/**
 * üîç STACK TRACE ANALYZER
 * –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—Ç–µ–∫–æ–≤ –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫
 *
 * –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –ü–∞—Ä—Å–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏–∑ JavaScript stack traces
 * - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏
 * - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å HEYS –º–æ–¥—É–ª—è–º–∏ –¥–ª—è —É–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
 *
 * @version 1.0.0
 * @created 26.08.2025
 */

class StackTraceAnalyzer {
  constructor() {
    this.heysModules = new Set();
    this.knownPatterns = this.initializeKnownPatterns();
    this.init();
  }

  init() {
    this.detectHeysModules();
  }

  /**
   * üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ HEYS –º–æ–¥—É–ª–µ–π –≤ –ø—Ä–æ–µ–∫—Ç–µ
   */
  detectHeysModules() {
    // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ HEYS –º–æ–¥—É–ª–µ–π –∏–∑ window –æ–±—ä–µ–∫—Ç–∞
    if (typeof window !== 'undefined' && window.HEYS) {
      Object.keys(window.HEYS).forEach(moduleName => {
        this.heysModules.add(moduleName);
      });
    }

    // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∞–º —Ñ–∞–π–ª–æ–≤ –≤ stack traces
    const heysFilePatterns = [
      /heys_[\w_]+\.js/,
      /heys-[\w-]+\.js/,
      /super-diagnostic-center\.html/,
      /ROADMAPS_SUPERSYSTEM\.html/,
    ];

    this.heysFilePatterns = heysFilePatterns;
  }

  /**
   * üìö –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ—à–∏–±–æ–∫
   */
  initializeKnownPatterns() {
    return {
      moduleNotFound: [
        /Cannot read propert(y|ies) of undefined/,
        /is not defined/,
        /Cannot access before initialization/,
      ],
      typeError: [
        /Cannot read propert(y|ies) of null/,
        /Cannot set propert(y|ies) of null/,
        /is not a function/,
      ],
      syntaxError: [/Unexpected token/, /Invalid or unexpected token/, /Unexpected end of input/],
      networkError: [/Failed to fetch/, /NetworkError/, /ERR_NETWORK/],
      heysSpecific: [/HEYS\./, /namespace.*undefined/, /supabase.*not.*defined/],
    };
  }

  /**
   * üî¨ –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ stack trace
   */
  analyze(stackTrace) {
    if (!stackTrace) {
      return {
        success: false,
        error: 'No stack trace provided',
      };
    }

    try {
      const parsed = this.parseStackTrace(stackTrace);
      const analysis = this.performDetailedAnalysis(parsed);
      const suggestions = this.generateSuggestions(analysis);

      return {
        success: true,
        parsed: parsed,
        analysis: analysis,
        suggestions: suggestions,
        heysContext: this.extractHeysContext(parsed),
      };
    } catch (error) {
      return {
        success: false,
        error: error.message,
        rawStackTrace: stackTrace,
      };
    }
  }

  /**
   * üìã –ü–∞—Ä—Å–∏–Ω–≥ stack trace –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
   */
  parseStackTrace(stackTrace) {
    const lines = stackTrace.split('\n').filter(line => line.trim());
    const frames = [];

    for (const line of lines) {
      const frame = this.parseStackFrame(line.trim());
      if (frame) {
        frames.push(frame);
      }
    }

    return {
      rawTrace: stackTrace,
      frames: frames,
      topFrame: frames[0] || null,
      heysFrames: frames.filter(frame => this.isHeysFrame(frame)),
    };
  }

  /**
   * üîç –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–∞ stack trace
   */
  parseStackFrame(line) {
    // –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã stack trace –≤ —Ä–∞–∑–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö
    const patterns = [
      // Chrome/V8: "at functionName (file:line:column)"
      /at\s+(.+?)\s+\((.+?):(\d+):(\d+)\)/,
      // Chrome/V8: "at file:line:column"
      /at\s+(.+?):(\d+):(\d+)/,
      // Firefox: "functionName@file:line:column"
      /(.+?)@(.+?):(\d+):(\d+)/,
      // Safari: "functionName (file:line:column)"
      /(.+?)\s+\((.+?):(\d+):(\d+)\)/,
      // Edge: various formats
      /(.+?)\s+(.+?):(\d+):(\d+)/,
    ];

    for (const pattern of patterns) {
      const match = line.match(pattern);
      if (match) {
        return this.createFrameObject(match, line);
      }
    }

    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    return {
      raw: line,
      functionName: 'unknown',
      fileName: 'unknown',
      lineNumber: 0,
      columnNumber: 0,
      isHeys: false,
    };
  }

  /**
   * üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Ñ—Ä–µ–π–º–∞
   */
  createFrameObject(match, rawLine) {
    let functionName, fileName, lineNumber, columnNumber;

    if (match.length === 5) {
      // –ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∏–º–µ–Ω–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
      [, functionName, fileName, lineNumber, columnNumber] = match;
    } else if (match.length === 4) {
      // –§–æ—Ä–º–∞—Ç –±–µ–∑ –∏–º–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ —Å –¥—Ä—É–≥–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
      if (match[1].includes(':')) {
        // –§–æ—Ä–º–∞—Ç "at file:line:column"
        [, fileName, lineNumber, columnNumber] = match;
        functionName = 'anonymous';
      } else {
        [, functionName, fileName, lineNumber, columnNumber] = match;
      }
    } else {
      functionName = 'unknown';
      fileName = match[1] || 'unknown';
      lineNumber = match[2] || 0;
      columnNumber = match[3] || 0;
    }

    return {
      raw: rawLine,
      functionName: functionName?.trim() || 'anonymous',
      fileName: fileName?.trim() || 'unknown',
      lineNumber: parseInt(lineNumber) || 0,
      columnNumber: parseInt(columnNumber) || 0,
      isHeys: this.isHeysFrame({ fileName }),
      fileType: this.getFileType(fileName),
    };
  }

  /**
   * üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ—Ä–µ–π–º —á–∞—Å—Ç—å—é HEYS
   */
  isHeysFrame(frame) {
    if (!frame.fileName) return false;

    return this.heysFilePatterns.some(pattern => pattern.test(frame.fileName));
  }

  /**
   * üìÑ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
   */
  getFileType(fileName) {
    if (!fileName || fileName === 'unknown') return 'unknown';

    const extension = fileName.split('.').pop()?.toLowerCase();
    const typeMap = {
      js: 'javascript',
      ts: 'typescript',
      html: 'html',
      htm: 'html',
      css: 'css',
      json: 'json',
    };

    return typeMap[extension] || 'unknown';
  }

  /**
   * üî¨ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–≥–æ stack trace
   */
  performDetailedAnalysis(parsed) {
    const analysis = {
      errorLocation: null,
      errorType: 'unknown',
      heysInvolved: false,
      criticalFrame: null,
      callChain: [],
      patterns: [],
    };

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ—Ä–µ–π–º–∞ (–≥–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞)
    analysis.criticalFrame = parsed.topFrame;
    analysis.errorLocation = this.extractErrorLocation(parsed.topFrame);

    // –ê–Ω–∞–ª–∏–∑ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ HEYS –º–æ–¥—É–ª–µ–π
    analysis.heysInvolved = parsed.heysFrames.length > 0;

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
    analysis.callChain = this.buildCallChain(parsed.frames);

    // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ—à–∏–±–æ–∫
    analysis.patterns = this.detectErrorPatterns(parsed);

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
    analysis.errorType = this.determineErrorType(analysis);

    return analysis;
  }

  /**
   * üìç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏
   */
  extractErrorLocation(frame) {
    if (!frame) return null;

    return {
      file: frame.fileName,
      function: frame.functionName,
      line: frame.lineNumber,
      column: frame.columnNumber,
      context: this.getFileContext(frame.fileName),
      isHeysModule: frame.isHeys,
    };
  }

  /**
   * üìÅ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ñ–∞–π–ª–∞
   */
  getFileContext(fileName) {
    if (!fileName || fileName === 'unknown') return null;

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    const contexts = {
      heys_core: '–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ HEYS',
      heys_storage: '–°–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö',
      heys_user: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
      heys_day: '–î–Ω–µ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞',
      heys_reports: '–°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤',
      'super-diagnostic': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞',
      ROADMAPS_SUPERSYSTEM: '–°–∏—Å—Ç–µ–º–∞ –¥–æ—Ä–æ–∂–Ω—ã—Ö –∫–∞—Ä—Ç',
    };

    for (const [key, description] of Object.entries(contexts)) {
      if (fileName.includes(key)) {
        return {
          module: key,
          description: description,
          category: 'heys',
        };
      }
    }

    return {
      module: 'external',
      description: '–í–Ω–µ—à–Ω–∏–π –º–æ–¥—É–ª—å –∏–ª–∏ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–æ–¥',
      category: 'external',
    };
  }

  /**
   * üîó –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
   */
  buildCallChain(frames) {
    return frames.slice(0, 10).map((frame, index) => ({
      depth: index,
      function: frame.functionName,
      file: frame.fileName,
      line: frame.lineNumber,
      isHeys: frame.isHeys,
    }));
  }

  /**
   * üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ—à–∏–±–æ–∫
   */
  detectErrorPatterns(parsed) {
    const patterns = [];
    const stackText = parsed.rawTrace.toLowerCase();

    for (const [patternType, regexList] of Object.entries(this.knownPatterns)) {
      for (const regex of regexList) {
        if (regex.test(stackText)) {
          patterns.push({
            type: patternType,
            confidence: this.calculatePatternConfidence(patternType, parsed),
            description: this.getPatternDescription(patternType),
          });
          break; // –û–¥–∏–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞ —Ç–∏–ø
        }
      }
    }

    return patterns;
  }

  /**
   * üìä –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–µ
   */
  calculatePatternConfidence(patternType, parsed) {
    let confidence = 0.5; // –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –≤–æ–≤–ª–µ—á–µ–Ω—ã HEYS –º–æ–¥—É–ª–∏
    if (parsed.heysFrames.length > 0) {
      confidence += 0.2;
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ HEYS
    if (patternType === 'heysSpecific') {
      confidence += 0.3;
    }

    return Math.min(confidence, 1.0);
  }

  /**
   * üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
   */
  getPatternDescription(patternType) {
    const descriptions = {
      moduleNotFound: '–ú–æ–¥—É–ª—å –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
      typeError: '–û—à–∏–±–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö',
      syntaxError: '–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞',
      networkError: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏',
      heysSpecific: '–°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ HEYS —Å–∏—Å—Ç–µ–º—ã',
    };

    return descriptions[patternType] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏';
  }

  /**
   * üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
   */
  determineErrorType(analysis) {
    if (analysis.patterns.length === 0) {
      return 'unknown';
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Å –Ω–∞–∏–≤—ã—Å—à–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
    const bestPattern = analysis.patterns.reduce((best, current) =>
      current.confidence > best.confidence ? current : best
    );

    return bestPattern.type;
  }

  /**
   * üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
   */
  generateSuggestions(analysis) {
    const suggestions = [];

    for (const pattern of analysis.patterns) {
      const patternSuggestions = this.getSuggestionsForPattern(pattern.type, analysis);
      suggestions.push(...patternSuggestions);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    suggestions.push(...this.getGeneralSuggestions(analysis));

    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    return this.deduplicateAndSortSuggestions(suggestions);
  }

  /**
   * üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
   */
  getSuggestionsForPattern(patternType, analysis) {
    const suggestions = [];

    switch (patternType) {
      case 'moduleNotFound':
        suggestions.push({
          type: 'check',
          priority: 'high',
          message: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω',
          action: '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ HEYS namespace –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
        });
        break;

      case 'typeError':
        suggestions.push({
          type: 'validate',
          priority: 'high',
          message: '–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ null/undefined',
          action: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ optional chaining (?.) –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ if',
        });
        break;

      case 'heysSpecific':
        suggestions.push({
          type: 'heys',
          priority: 'critical',
          message: '–û—à–∏–±–∫–∞ –≤ HEYS —Å–∏—Å—Ç–µ–º–µ',
          action: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é HEYS –º–æ–¥—É–ª–µ–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ',
        });
        break;

      case 'networkError':
        suggestions.push({
          type: 'network',
          priority: 'medium',
          message: '–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç–µ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º',
          action: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Supabase –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º',
        });
        break;
    }

    return suggestions;
  }

  /**
   * üîß –û–±—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
   */
  getGeneralSuggestions(analysis) {
    const suggestions = [];

    if (analysis.heysInvolved) {
      suggestions.push({
        type: 'debug',
        priority: 'medium',
        message: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HEYS –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É',
        action: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã',
      });
    }

    if (analysis.errorLocation && analysis.errorLocation.line > 0) {
      suggestions.push({
        type: 'location',
        priority: 'low',
        message: `–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ ${analysis.errorLocation.line}`,
        action: `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –≤ —Ñ–∞–π–ª–µ ${analysis.errorLocation.file}:${analysis.errorLocation.line}`,
      });
    }

    return suggestions;
  }

  /**
   * üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
   */
  deduplicateAndSortSuggestions(suggestions) {
    // –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é
    const unique = suggestions.filter(
      (suggestion, index, array) => array.findIndex(s => s.message === suggestion.message) === index
    );

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    const priorityOrder = { critical: 0, high: 1, medium: 2, low: 3 };

    return unique.sort((a, b) => priorityOrder[a.priority] - priorityOrder[b.priority]);
  }

  /**
   * üè† –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ HEYS –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  extractHeysContext(parsed) {
    const heysContext = {
      modulesInvolved: [],
      callDepth: 0,
      entryPoint: null,
      systemState: this.getHeysSystemState(),
    };

    // –ù–∞–π–¥–µ–º –≤—Å–µ HEYS –º–æ–¥—É–ª–∏ –≤ stack trace
    parsed.heysFrames.forEach(frame => {
      const moduleName = this.extractModuleName(frame.fileName);
      if (moduleName && !heysContext.modulesInvolved.includes(moduleName)) {
        heysContext.modulesInvolved.push(moduleName);
      }
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –≤ HEYS
    const firstHeysFrame = parsed.frames.find(frame => frame.isHeys);
    if (firstHeysFrame) {
      heysContext.entryPoint = {
        function: firstHeysFrame.functionName,
        file: firstHeysFrame.fileName,
        line: firstHeysFrame.lineNumber,
      };
    }

    // –ì–ª—É–±–∏–Ω–∞ –≤—ã–∑–æ–≤–æ–≤ HEYS
    heysContext.callDepth = parsed.heysFrames.length;

    return heysContext;
  }

  /**
   * üì¶ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –º–æ–¥—É–ª—è –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
   */
  extractModuleName(fileName) {
    if (!fileName) return null;

    const modulePatterns = [
      /heys_(\w+)_v?\d*\.js/,
      /heys-(\w+)-v?\d*\.js/,
      /(super-diagnostic-center|ROADMAPS_SUPERSYSTEM)\.html/,
    ];

    for (const pattern of modulePatterns) {
      const match = fileName.match(pattern);
      if (match) {
        return match[1];
      }
    }

    return null;
  }

  /**
   * üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è HEYS —Å–∏—Å—Ç–µ–º—ã
   */
  getHeysSystemState() {
    if (typeof window === 'undefined' || !window.HEYS) {
      return { status: 'not_initialized', modules: [] };
    }

    const state = {
      status: 'initialized',
      modules: Object.keys(window.HEYS),
      namespace: !!window.HEYS,
      core: !!window.HEYS.core,
      storage: !!window.HEYS.storage,
    };

    return state;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
if (typeof window !== 'undefined') {
  window.StackTraceAnalyzer = StackTraceAnalyzer;
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
if (typeof module !== 'undefined' && module.exports) {
  module.exports = StackTraceAnalyzer;
}
