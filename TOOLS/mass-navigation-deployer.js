/**
 * üó∫Ô∏è –ú–ê–°–°–û–í–û–ï –í–ù–ï–î–†–ï–ù–ò–ï –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–´–• –ö–ê–†–¢
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –≤–æ –≤—Å–µ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ HEYS
 */

class NavigationMapsDeployer {
  constructor() {
    this.minLines = 500;
    this.targetFiles = [];
    this.processedFiles = 0;
    this.errors = [];
  }

  /**
   * üîç –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
   */
  async findTargetFiles() {
    const fs = require('fs').promises;
    const path = require('path');

    const scanDirectory = async dir => {
      const items = await fs.readdir(dir, { withFileTypes: true });

      for (const item of items) {
        const fullPath = path.join(dir, item.name);

        if (item.isDirectory() && !item.name.startsWith('.') && item.name !== 'node_modules') {
          await scanDirectory(fullPath);
        } else if (item.isFile()) {
          const ext = path.extname(item.name).toLowerCase();

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ JS, TS –∏ HTML —Ñ–∞–π–ª—ã
          if (['.js', '.ts', '.html'].includes(ext)) {
            const content = await fs.readFile(fullPath, 'utf8');
            const lineCount = content.split('\n').length;

            if (lineCount >= this.minLines) {
              this.targetFiles.push({
                path: fullPath,
                lines: lineCount,
                type: ext.substring(1),
                hasNavigation: this.checkExistingNavigation(content),
              });
            }
          }
        }
      }
    };

    await scanDirectory('.');
    return this.targetFiles;
  }

  /**
   * ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –≤ —Ñ–∞–π–ª–µ
   */
  checkExistingNavigation(content) {
    return (
      content.includes('dynamic-navigation-mapper.js') ||
      content.includes('initNavigationMapper') ||
      content.includes('id="dynamic-navigation-map"')
    );
  }

  /**
   * üöÄ –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –∫–∞—Ä—Ç—É –≤ HTML —Ñ–∞–π–ª
   */
  async addNavigationToHTML(filePath) {
    const fs = require('fs').promises;
    let content = await fs.readFile(filePath, 'utf8');

    // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
    const navigationHTML = `
    <!-- üó∫Ô∏è –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–ê–Ø –ö–ê–†–¢–ê -->
    <div id="dynamic-navigation-map" class="navigation-sidebar">
        <div class="navigation-header">
            <h3>üó∫Ô∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è</h3>
            <button id="toggle-navigation">üìç</button>
        </div>
        <div class="navigation-content">
            <div class="navigation-stats"></div>
            <div class="navigation-anchors"></div>
        </div>
    </div>

    <!-- –°—Ç–∏–ª–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ -->
    <style>
        .navigation-sidebar {
            position: fixed;
            left: 0;
            top: 0;
            width: 300px;
            height: 100vh;
            background: linear-gradient(135deg, #1e293b, #334155);
            color: white;
            z-index: 1000;
            overflow-y: auto;
            box-shadow: 4px 0 20px rgba(0,0,0,0.3);
            transform: translateX(-280px);
            transition: all 0.3s ease;
        }

        .navigation-sidebar.expanded {
            transform: translateX(0);
        }

        .navigation-header {
            padding: 15px;
            background: rgba(0,0,0,0.2);
            border-bottom: 1px solid rgba(255,255,255,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .navigation-content {
            padding: 15px;
        }

        .anchor-item {
            padding: 8px 12px;
            margin: 4px 0;
            background: rgba(255,255,255,0.1);
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.3s ease;
            border-left: 3px solid #60a5fa;
        }

        .anchor-item:hover {
            background: rgba(255,255,255,0.2);
            transform: translateX(5px);
        }

        #toggle-navigation {
            position: fixed;
            left: 10px;
            top: 10px;
            background: rgba(30, 41, 59, 0.9);
            color: white;
            border: none;
            padding: 10px;
            border-radius: 50%;
            cursor: pointer;
            z-index: 1001;
            font-size: 18px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.3);
        }
    </style>`;

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ—Å–ª–µ <body>
    content = content.replace(/<body[^>]*>/i, match => {
      return match + navigationHTML;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–¥ </body>
    const scriptHTML = `
    <!-- üó∫Ô∏è –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê -->
    <script src="../TOOLS/dynamic-navigation-mapper.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            initNavigationMapper();
            
            // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            const toggleBtn = document.getElementById('toggle-navigation');
            const sidebar = document.getElementById('dynamic-navigation-map');
            
            toggleBtn.addEventListener('click', () => {
                sidebar.classList.toggle('expanded');
            });
        });
    </script>`;

    content = content.replace(/<\/body>/i, scriptHTML + '\n</body>');

    await fs.writeFile(filePath, content, 'utf8');
    return true;
  }

  /**
   * üîß –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ JS/TS —Ñ–∞–π–ª—ã
   */
  async addNavigationToJS(filePath) {
    const fs = require('fs').promises;
    let content = await fs.readFile(filePath, 'utf8');

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —è–∫–æ—Ä—è
    const navigationComment = `
/**
 * üó∫Ô∏è –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–ê–Ø –ö–ê–†–¢–ê –§–ê–ô–õ–ê
 * –§–∞–π–ª: ${path.basename(filePath)}
 * –†–∞–∑–º–µ—Ä: ${content.split('\n').length} —Å—Ç—Ä–æ–∫
 * 
 * üìç –û–°–ù–û–í–ù–´–ï –°–ï–ö–¶–ò–ò:
 * - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
 * - –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏  
 * - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
 * - –£—Ç–∏–ª–∏—Ç—ã –∏ –ø–æ–º–æ—â–Ω–∏–∫–∏
 * - –≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
 */

// üèóÔ∏è === –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–ê–Ø –°–ï–ö–¶–ò–Ø ===
`;

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
    content = navigationComment + content;

    // –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —è–∫–æ—Ä—è
    content = this.addNavigationAnchors(content);

    await fs.writeFile(filePath, content, 'utf8');
    return true;
  }

  /**
   * üìç –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —è–∫–æ—Ä—è –≤ –∫–æ–¥
   */
  addNavigationAnchors(content) {
    const lines = content.split('\n');
    const processedLines = [];

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];

      // –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏, –∫–ª–∞—Å—Å—ã, –º–µ—Ç–æ–¥—ã
      if (this.isImportantCodeLine(line)) {
        processedLines.push(`// üìç ${this.generateAnchorName(line)}`);
      }

      processedLines.push(line);
    }

    return processedLines.join('\n');
  }

  /**
   * üéØ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∞–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞ –¥–ª—è —è–∫–æ—Ä–µ–π
   */
  isImportantCodeLine(line) {
    const trimmed = line.trim();
    return (
      trimmed.startsWith('function ') ||
      trimmed.startsWith('class ') ||
      (trimmed.startsWith('const ') && trimmed.includes(' = ')) ||
      trimmed.startsWith('async ') ||
      trimmed.includes('export ')
    );
  }

  /**
   * üè∑Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —è–∫–æ—Ä—è –ø–æ —Å—Ç—Ä–æ–∫–µ –∫–æ–¥–∞
   */
  generateAnchorName(line) {
    const trimmed = line.trim();

    if (trimmed.startsWith('function ')) {
      return (
        'FUNCTION: ' + trimmed.match(/function\s+([a-zA-Z_$][a-zA-Z0-9_$]*)/)?.[1] || 'Unknown'
      );
    }

    if (trimmed.startsWith('class ')) {
      return 'CLASS: ' + trimmed.match(/class\s+([a-zA-Z_$][a-zA-Z0-9_$]*)/)?.[1] || 'Unknown';
    }

    if (trimmed.startsWith('const ')) {
      return 'CONST: ' + trimmed.match(/const\s+([a-zA-Z_$][a-zA-Z0-9_$]*)/)?.[1] || 'Unknown';
    }

    return 'CODE_BLOCK';
  }

  /**
   * üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∞—Å—Å–æ–≤–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ
   */
  async deploy() {
    console.log('üó∫Ô∏è –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–≥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç...\n');

    // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª–µ–≤—ã–µ —Ñ–∞–π–ª—ã
    await this.findTargetFiles();

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${this.targetFiles.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n`);

    this.targetFiles.forEach(file => {
      const status = file.hasNavigation ? '‚úÖ' : 'üîÑ';
      console.log(`${status} ${file.path} (${file.lines} —Å—Ç—Ä–æ–∫, ${file.type.toUpperCase()})`);
    });

    console.log('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...\n');

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for (const file of this.targetFiles) {
      if (file.hasNavigation) {
        console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${file.path} - –Ω–∞–≤–∏–≥–∞—Ü–∏—è —É–∂–µ –µ—Å—Ç—å`);
        continue;
      }

      try {
        if (file.type === 'html') {
          await this.addNavigationToHTML(file.path);
        } else {
          await this.addNavigationToJS(file.path);
        }

        this.processedFiles++;
        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: ${file.path}`);
      } catch (error) {
        this.errors.push({ file: file.path, error: error.message });
        console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ ${file.path}: ${error.message}`);
      }
    }

    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    this.generateReport();
  }

  /**
   * üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ
   */
  generateReport() {
    console.log('\n' + '='.repeat(60));
    console.log('üìä –û–¢–ß–ï–¢ –û –í–ù–ï–î–†–ï–ù–ò–ò –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–´–• –ö–ê–†–¢');
    console.log('='.repeat(60));
    console.log(`üéØ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${this.targetFiles.length}`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${this.processedFiles}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${this.errors.length}`);

    if (this.errors.length > 0) {
      console.log('\n‚ùå –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫:');
      this.errors.forEach(err => {
        console.log(`   ${err.file}: ${err.error}`);
      });
    }

    console.log('\nüé™ –†–µ–∑—É–ª—å—Ç–∞—Ç:');
    console.log('   üìÅ –í—Å–µ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã —Ç–µ–ø–µ—Ä—å –∏–º–µ—é—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã!');
    console.log('   üó∫Ô∏è  –£–ª—É—á—à–µ–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø—Ä–æ–µ–∫—Ç—É');
    console.log('   üöÄ –ü–æ–≤—ã—à–µ–Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');

    console.log('\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('   1. –û—Ç–∫—Ä–æ–π—Ç–µ –ª—é–±–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π HTML —Ñ–∞–π–ª');
    console.log('   2. –ù–∞–∂–º–∏—Ç–µ üìç –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å–ª–µ–≤–∞');
    console.log('   3. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π!');
  }
}

// üöÄ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´
if (typeof module !== 'undefined' && module.exports) {
  module.exports = NavigationMapsDeployer;
} else {
  // –ó–∞–ø—É—Å–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏–ª–∏ Node.js
  const deployer = new NavigationMapsDeployer();
  deployer.deploy().catch(console.error);
}
