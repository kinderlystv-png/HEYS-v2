// parse_worker.js ‚Äî Web Worker –¥–ª—è —Ç—è–∂—ë–ª–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ pasted —Ç–µ–∫—Å—Ç–∞
self.onmessage = function (e) {
  console.log('üë∑ [WORKER] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.data);
  
  const { text } = e.data;
  console.log('üìä [WORKER] –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞:', text?.length || 0);
  
  try {
    const result = parsePastedInWorker(text);
    console.log('‚úÖ [WORKER] –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', result.rows?.length || 0);
    self.postMessage({ result });
  } catch (error) {
    console.error('‚ùå [WORKER] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
    self.postMessage({ error: error.message });
  }
};

function parsePastedInWorker(text) {
  console.log('üîç [WORKER] –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ worker');
  
  // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ heys_core_v12.js
  function isHeaderLine(line) {
    const l = line.toLowerCase();
    return (
      l.includes('–Ω–∞–∑–≤–∞–Ω–∏–µ') &&
      (l.includes('–∫–∫–∞–ª') || l.includes('–∫–∞–ª–æ—Ä–∏') || l.includes('—É–≥–ª–µ–≤–æ–¥'))
    );
  }
  function normalizeLine(raw) {
    let s = raw.replace(
      /[\u00A0\u1680\u180E\u2000-\u200A\u200B-\u200F\u202F\u205F\u3000\uFEFF]/g,
      ' ',
    );
    s = s
      .replace(/[\u060C]/g, ',')
      .replace(/[\u066B]/g, ',')
      .replace(/[\u066C]/g, ',')
      .replace(/[\u201A]/g, ',');
    s = s
      .replace(/[\u00B7]/g, '.')
      .replace(/[‚Äì‚Äî‚àí]/g, '-')
      .replace(/%/g, '');
    s = s.replace(/\t+/g, ' ').replace(/\s+/g, ' ').trim();
    return s;
  }
  const NUM_RE = /[-+]?\d+(?:[.,]\d+)?/g;
  function findTokenPositions(s, tokens) {
    const positions = [];
    let start = 0;
    for (const tok of tokens) {
      const idx = s.indexOf(tok, start);
      positions.push(idx === -1 ? null : idx);
      if (idx !== -1) start = idx + tok.length;
    }
    return positions;
  }
  function toNum(x) {
    if (x === undefined || x === null) return 0;
    if (typeof x === 'number') return x;
    const s = String(x).trim().replace(',', '.');
    const n = Number(s);
    return Number.isFinite(n) ? n : 0;
  }
  function round1(v) {
    return Math.round(v * 10) / 10;
  }
  function extractRow(raw) {
    const clean = normalizeLine(raw);
    const tokens = clean.match(NUM_RE) || [];
    if (!tokens.length) return null;
    let last = tokens.slice(-12);
    if (last.length < 12)
      last = Array(12 - last.length)
        .fill('0')
        .concat(last);
    const positions = findTokenPositions(clean, last);
    const firstPos = positions[0] ?? clean.length;
    const name = clean.slice(0, firstPos).trim() || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
    const nums = last.map(toNum);
    return { name, nums };
  }
  function computeDerived(p) {
    const carbs100 = toNum(p.simple100) + toNum(p.complex100);
    const fat100 = toNum(p.badFat100) + toNum(p.goodFat100) + toNum(p.trans100);
    const kcal100 = 4 * (toNum(p.protein100) + carbs100) + 8 * fat100;
    return { carbs100: round1(carbs100), fat100: round1(fat100), kcal100: round1(kcal100) };
  }
  function parsePastedSync(text) {
    console.log('üîç [WORKER] –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤ worker');
    console.log('üìä [WORKER] –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞:', text?.length || 0);
    
    if (!text || typeof text !== 'string') {
      console.warn('‚ö†Ô∏è [WORKER] –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç');
      return [];
    }
    
    const lines = text
      .split(/\r?\n/)
      .map((l) => l.trim())
      .filter((l) => l.length > 0 && !isHeaderLine(l));
      
    console.log('üìÑ [WORKER] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', lines.length);
    console.log('üìù [WORKER] –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏:', lines.slice(0, 3));
    
    const rows = [];
    for (let i = 0; i < lines.length; i++) {
      const raw = lines[i];
      console.log(`üîç [WORKER] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É ${i + 1}:`, raw.substring(0, 50) + '...');
      
      const st = extractRow(raw);
      if (!st) {
        console.warn(`‚ö†Ô∏è [WORKER] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ ${i + 1}:`, raw);
        continue;
      }
      
      console.log(`‚úÖ [WORKER] –ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ ${i + 1}:`, st.name, st.nums);
      
      const [, , simple, complex, protein, , bad, good, trans, fiber, gi, harm] =
        st.nums;
      const base = {
        id: Math.random().toString(36).slice(2, 10),
        name: st.name,
        simple100: simple,
        complex100: complex,
        protein100: protein,
        badFat100: bad,
        goodFat100: good,
        trans100: trans,
        fiber100: fiber,
        gi: gi,
        harmScore: harm,
      };
      
      try {
        const d = computeDerived(base);
        const product = {
          id: base.id,
          name: base.name,
          ...base,
          carbs100: d.carbs100,
          fat100: d.fat100,
          kcal100: d.kcal100,
        };
        rows.push(product);
        console.log(`‚úÖ [WORKER] –ü—Ä–æ–¥—É–∫—Ç ${i + 1} —Å–æ–∑–¥–∞–Ω:`, product.name, '–∫–∫–∞–ª:', product.kcal100);
      } catch (error) {
        console.error(`‚ùå [WORKER] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ ${i + 1}:`, error);
      }
    }
    
    console.log('‚úÖ [WORKER] –ü–∞—Ä—Å–∏–Ω–≥ –≤ worker –∑–∞–≤–µ—Ä—à–µ–Ω, —Å–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', rows.length);
    return rows;
  }
  
  return { rows: parsePastedSync(text) };
}
