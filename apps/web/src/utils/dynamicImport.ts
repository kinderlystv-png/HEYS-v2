// filepath: apps/web/src/utils/dynamicImport.ts
// Dynamic Import Utilities –¥–ª—è Performance Sprint Day 3

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */

import { lazy, ComponentType, LazyExoticComponent } from 'react';

// –¢–∏–ø—ã –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
export interface ImportOptions {
  /** –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π (–¥–ª—è preloading) */
  delay?: number;
  /** Retry –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ */
  retries?: number;
  /** Timeout –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ */
  timeout?: number;
  /** Fallback –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ */
  fallback?: ComponentType;
}

export interface LazyComponentOptions extends ImportOptions {
  /** –ü–æ–∫–∞–∑–∞—Ç—å loading state */
  showLoading?: boolean;
  /** Preload –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏ hover */
  preloadOnHover?: boolean;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç lazy –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
 */
export function createLazyComponent<T extends ComponentType<any>>(
  importFunc: () => Promise<{ default: T }>,
  options: LazyComponentOptions = {}
): LazyExoticComponent<T> {
  const {
    delay = 0,
    retries = 3,
    timeout = 10000,
    showLoading = true
  } = options;

  // –û–±–µ—Ä—Ç—ã–≤–∞–µ–º import —Ñ—É–Ω–∫—Ü–∏—é —Å retry –ª–æ–≥–∏–∫–æ–π
  const enhancedImport = async (): Promise<{ default: T }> => {
    let lastError: Error = new Error('Unknown import error');
    
    for (let i = 0; i <= retries; i++) {
      try {
        // –î–æ–±–∞–≤–ª—è–µ–º delay –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
        if (delay > 0) {
          await new Promise(resolve => setTimeout(resolve, delay));
        }

        // –°–æ–∑–¥–∞–µ–º timeout promise
        const timeoutPromise = new Promise<never>((_, reject) => {
          setTimeout(() => reject(new Error('Import timeout')), timeout);
        });

        // Race –º–µ–∂–¥—É import –∏ timeout
        const result = await Promise.race([
          importFunc(),
          timeoutPromise
        ]);

        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
        console.log(`‚úÖ Component loaded successfully (attempt ${i + 1})`);
        return result;

      } catch (error) {
        lastError = error as Error;
        console.warn(`‚ö†Ô∏è Import failed (attempt ${i + 1}/${retries + 1}):`, error);
        
        // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        if (i < retries) {
          await new Promise(resolve => setTimeout(resolve, Math.pow(2, i) * 1000));
        }
      }
    }

    // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
    console.error('‚ùå All import attempts failed:', lastError);
    throw lastError;
  };

  return lazy(enhancedImport);
}

/**
 * Preload —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
 */
export function preloadComponent(
  importFunc: () => Promise<{ default: ComponentType<any> }>
): Promise<void> {
  return importFunc()
    .then(() => {
      console.log('üöÄ Component preloaded successfully');
    })
    .catch(error => {
      console.warn('‚ö†Ô∏è Component preload failed:', error);
    });
}

/**
 * –°–æ–∑–¥–∞–µ—Ç preloader –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 */
export function createComponentPreloader(
  importFunc: () => Promise<{ default: ComponentType<any> }>
) {
  let preloadPromise: Promise<void> | null = null;

  return {
    preload: () => {
      if (!preloadPromise) {
        preloadPromise = preloadComponent(importFunc);
      }
      return preloadPromise;
    },
    
    isPreloaded: () => preloadPromise !== null,
    
    reset: () => {
      preloadPromise = null;
    }
  };
}

/**
 * Bundle splitting strategy –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */
export const BUNDLE_CHUNKS = {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  PAGES: 'pages',
  // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã  
  ANALYTICS: 'analytics',
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  SETTINGS: 'settings',
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  UTILS: 'utils'
} as const;

/**
 * –°–æ–∑–¥–∞–µ—Ç webpack chunk name –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 */
export function createChunkName(category: keyof typeof BUNDLE_CHUNKS, componentName: string): string {
  return `${BUNDLE_CHUNKS[category]}-${componentName.toLowerCase()}`;
}

/**
 * Dynamic import —Å —É–∫–∞–∑–∞–Ω–∏–µ–º chunk name
 */
export function createChunkedImport<T extends ComponentType<any>>(
  importFunc: () => Promise<{ default: T }>
): () => Promise<{ default: T }> {
  return () => importFunc();
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è lazy –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å chunk names
 */
export function createChunkedLazyComponent<T extends ComponentType<any>>(
  category: keyof typeof BUNDLE_CHUNKS,
  componentName: string,
  importFunc: () => Promise<{ default: T }>,
  options: LazyComponentOptions = {}
): LazyExoticComponent<T> {
  const chunkName = createChunkName(category, componentName);
  
  // –í production –∏—Å–ø–æ–ª—å–∑—É–µ–º chunk name –¥–ª—è webpack
  const enhancedImportFunc = process.env.NODE_ENV === 'production' 
    ? importFunc 
    : importFunc;
  
  return createLazyComponent(enhancedImportFunc, {
    ...options,
    // –î–æ–±–∞–≤–ª—è–µ–º chunk name –≤ –æ–ø—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    ...(process.env.NODE_ENV === 'development' && {
      // –í dev —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ chunk
    })
  });
}
