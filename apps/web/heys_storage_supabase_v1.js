/*
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üó∫Ô∏è –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–ê–Ø –ö–ê–†–¢–ê –§–ê–ô–õ–ê heys_storage_supabase_v1.js (494 —Å—Ç—Ä–æ–∫–∏)                   ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ üìã –°–¢–†–£–ö–¢–£–†–ê –§–ê–ô–õ–ê:                                                                       ‚îÇ
‚îÇ                                                                                           ‚îÇ
‚îÇ üèóÔ∏è –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –£–¢–ò–õ–ò–¢–´ (—Å—Ç—Ä–æ–∫–∏ 1-50):                                               ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: client, status, user (9-14)                               ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ –£—Ç–∏–ª–∏—Ç—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: log(), err() (16-17)                                        ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ tryParse() - –±–µ–∑–æ–ø–∞—Å–Ω—ã–π JSON.parse (19)                                          ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ isOurKey() - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—à–∏—Ö –∫–ª—é—á–µ–π (21-30)                                    ‚îÇ
‚îÇ    ‚îî‚îÄ‚îÄ clearNamespace() - –æ—á–∏—Å—Ç–∫–∞ namespace (32-50)                                     ‚îÇ
‚îÇ                                                                                           ‚îÇ
‚îÇ üîê –°–ò–°–¢–ï–ú–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò (—Å—Ç—Ä–æ–∫–∏ 51-150):                                               ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ signin() - –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É (51-80)                                                ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ signout() - –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (81-100)                                            ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ getCurrentUser() - —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (101-110)                                ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ getStatus() - —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (111-120)                                       ‚îÇ
‚îÇ    ‚îî‚îÄ‚îÄ onAuthStateChange() - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è (121-150)                        ‚îÇ
‚îÇ                                                                                           ‚îÇ
‚îÇ ‚òÅÔ∏è –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–• (—Å—Ç—Ä–æ–∫–∏ 151-300):                                                ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ syncToCloud() - –∑–∞–≥—Ä—É–∑–∫–∞ –≤ –æ–±–ª–∞–∫–æ (151-200)                                      ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ syncFromCloud() - –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –æ–±–ª–∞–∫–∞ (201-250)                                   ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ fullSync() - –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (251-280)                                      ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ saveClientKey() - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–∞ (281-300)                                     ‚îÇ
‚îÇ    ‚îî‚îÄ‚îÄ deleteClientKey() - —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ (301-320)                                     ‚îÇ
‚îÇ                                                                                           ‚îÇ
‚îÇ üìä –£–ü–†–ê–í–õ–ï–ù–ò–ï KV-–•–†–ê–ù–ò–õ–ò–©–ï–ú (—Å—Ç—Ä–æ–∫–∏ 301-400):                                            ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ upsertKV() - –≤—Å—Ç–∞–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (301-330)                                        ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ getKV() - –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (331-350)                                           ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ deleteKV() - —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (351-370)                                           ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ listKV() - —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π (371-390)                                               ‚îÇ
‚îÇ    ‚îî‚îÄ‚îÄ batchKV() - –º–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (391-400)                                          ‚îÇ
‚îÇ                                                                                           ‚îÇ
‚îÇ üîÑ –ó–ï–†–ö–ê–õ–ò–†–û–í–ê–ù–ò–ï LOCALSTORAGE (—Å—Ç—Ä–æ–∫–∏ 401-450):                                         ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ –ü–µ—Ä–µ—Ö–≤–∞—Ç localStorage.setItem (401-420)                                          ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (421-430)                                          ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ muteMirror –º–µ—Ö–∞–Ω–∏–∑–º (431-440)                                                    ‚îÇ
‚îÇ    ‚îî‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è (441-450)                                        ‚îÇ
‚îÇ                                                                                           ‚îÇ
‚îÇ üîó –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –≠–ö–°–ü–û–†–¢ (—Å—Ç—Ä–æ–∫–∏ 451-494):                                             ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ init() - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase (451-470)                                        ‚îÇ
‚îÇ    ‚îú‚îÄ‚îÄ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ (471-490)                                                   ‚îÇ
‚îÇ    ‚îî‚îÄ‚îÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (491-494)                                           ‚îÇ
‚îÇ                                                                                           ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ üéØ –ë–´–°–¢–†–´–ô –ü–û–ò–°–ö:                                                                        ‚îÇ
‚îÇ    ‚Ä¢ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: signin() (51), signout() (81), getCurrentUser() (101)             ‚îÇ
‚îÇ    ‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: syncToCloud() (151), syncFromCloud() (201), fullSync() (251)       ‚îÇ
‚îÇ    ‚Ä¢ KV-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ: upsertKV() (301), getKV() (331), deleteKV() (351)                   ‚îÇ
‚îÇ    ‚Ä¢ –ó–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: localStorage.setItem –ø–µ—Ä–µ—Ö–≤–∞—Ç (401), muteMirror (431)             ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
*/

// heys_storage_supabase_v1.js ‚Äî Supabase bridge (v8, reports-ready)
// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
//  ‚Ä¢ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º localStorage.setItem –∏ –∑–µ—Ä–∫–∞–ª–∏–º –Ω–µ —Ç–æ–ª—å–∫–æ 'heys_*', –Ω–æ –∏ –∫–ª—é—á–∏ –¥–Ω–µ–π: 'day*' (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞);
//  ‚Ä¢ –ø—Ä–∏ –≤—Ö–æ–¥–µ/–≤—ã—Ö–æ–¥–µ —á–∏—Å—Ç–∏–º –∏ 'heys_*', –∏ 'day*' ‚Äî –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å –Ω–µ —É–≤–∏–¥–∏—Ç —á—É–∂–∏–µ –¥–Ω–∏;
//  ‚Ä¢ –≤–æ –≤—Ä–µ–º—è sync/clear –æ—Ç–∫–ª—é—á–∞–µ–º –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (muteMirror), —á—Ç–æ–±—ã –Ω–µ –≥–æ–Ω—è—Ç—å ¬´—ç—Ö–æ¬ª.
;(function (global) {
  const HEYS = global.HEYS = global.HEYS || {};
  const cloud = HEYS.cloud = HEYS.cloud || {};

  let client = null;
  cloud.client = null;
  let status = 'offline'; // offline | signin | sync | online
  let user = null;
  let muteMirror = false;

  function log(){ try{ console.log.apply(console, ['[HEYS.cloud]'].concat([].slice.call(arguments))); }catch(e){} }
  function err(){ try{ console.error.apply(console, ['[HEYS.cloud:ERR]'].concat([].slice.call(arguments))); }catch(e){} }

  function tryParse(v){ try{return JSON.parse(v);}catch(e){ return v; } }

  // –∫–∞–∫–∏–µ –∫–ª—é—á–∏ –º—ã –∑–µ—Ä–∫–∞–ª–∏–º / —á–∏—Å—Ç–∏–º
  function isOurKey(k){
    if (typeof k !== 'string') return false;
    if (k.indexOf('heys_') === 0) return true;
    // —Ç–∞–∫–∂–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∫–ª—é—á–∏ –¥–Ω–µ–π
    const lower = k.toLowerCase();
    if (lower.indexOf('day') >= 0) return true;
    return false;
  }

  function clearNamespace(clientId){
    try{
      const ls = global.localStorage;
      for (let i = ls.length - 1; i >= 0; i--) {
        const k = ls.key(i);
        if (!k) continue;
        const lower = k.toLowerCase();
        if (clientId) {
          // clear only client-specific keys AND general heys_ keys
          if (lower.indexOf(('heys_' + clientId + '_').toLowerCase()) === 0) { ls.removeItem(k); continue; }
          if (lower.indexOf(('day_' + clientId + '_').toLowerCase()) === 0) { ls.removeItem(k); continue; }
          
          // Also clear general keys that should be client-specific
          if (k === 'heys_products' || k === 'heys_profile' || k === 'heys_hr_zones' || k === 'heys_norms') {
            ls.removeItem(k);
            continue;
          }
        } else {
          // clear all
          if (isOurKey(k)) ls.removeItem(k);
        }
      }
      // –£–±—Ä–∞–Ω–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ local heys_*/day* cleared
    }catch(e){ err('clearNamespace', e); }
  }

  // intercept localStorage.setItem (–∑–µ—Ä–∫–∞–ª–∏–º –Ω–∞—à–∏ –∫–ª—é—á–∏)
  let originalSetItem = null;
  function interceptSetItem(){
    try{
      if (originalSetItem) return;
      originalSetItem = global.localStorage.setItem.bind(global.localStorage);
      global.localStorage.setItem = function(k, v){
        originalSetItem(k, v);
        if (!muteMirror && isOurKey(k)){
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –≤ client_kv_store
          const needsClientStorage = (
            (k && k.includes('dayv2_')) ||  // –¥–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            (k === 'heys_profile') ||       // –ø—Ä–æ—Ñ–∏–ª—å
            (k === 'heys_hr_zones') ||      // –∑–æ–Ω—ã –ø—É–ª—å—Å–∞  
            (k === 'heys_norms') ||         // –Ω–æ—Ä–º—ã
            (k === 'heys_products')         // –ø—Ä–æ–¥—É–∫—Ç—ã
          );
          
          if (needsClientStorage) {
            cloud.saveClientKey(k, tryParse(v));
          } else {
            cloud.saveKey(k, tryParse(v));
          }
        }
      };
      // –£–±—Ä–∞–Ω–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ localStorage.setItem intercepted
    }catch(e){ err('intercept setItem failed', e); }
  }

  cloud.init = function({ url, anonKey }){
    // Idempotent init: avoid double creation & duplicate intercept logs
    if (cloud._inited) { return; }
    if (!global.supabase || !global.supabase.createClient){
      err('supabase-js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
      return;
    }
    try{
      client = global.supabase.createClient(url, anonKey);
      cloud.client = client;
      status = 'offline';
      interceptSetItem();
      cloud._inited = true;
      log('cloud bridge loaded');
    }catch(e){ err('init failed', e); }
  };

  cloud.signIn = async function(email, password){
    if (!client) { err('client not initialized'); return; }
    try{
      status = 'signin';
      const { data, error } = await client.auth.signInWithPassword({ email, password });
      if (error) { status = 'offline'; err('signIn failed', error); return { error }; }
      user = data.user;
      if (!user) { status = 'offline'; err('no user after signin'); return { error: 'no user' }; }
      status = 'sync';
      await cloud.bootstrapSync();
      status = 'online';
      log('signIn ok, user=', user.email);
      return { user };
    }catch(e){
      status = 'offline';
      err('signIn exception', e);
      return { error: e };
    }
  };

  cloud.signOut = function(){
    if (client) client.auth.signOut();
    user = null;
    status = 'offline';
    clearNamespace();
    log('signOut ok');
  };

  cloud.getUser = function(){ return user; };
  cloud.getStatus = function(){ return status; };

  cloud.bootstrapSync = async function(){
    try{
      muteMirror = true;
      if (!client || !user) return;
      const { data, error } = await client.from('kv_store').select('k,v,updated_at');
      if (error) { err('bootstrap select', error); return; }
      const ls = global.localStorage;
      // clear only global keys for full bootstrap (no clientId)
      clearNamespace();
      (data||[]).forEach(row => {
        try {
          const key = row.k;
          ls.setItem(key, JSON.stringify(row.v));
        } catch(e){}
      });
      muteMirror = false;
      // –£–±—Ä–∞–Ω–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ bootstrap synced keys
    }catch(e){ err('bootstrap exception', e); muteMirror=false; }
  };

  cloud.bootstrapClientSync = async function(client_id){
    if (!client || !user || !client_id) return;
    const now = Date.now();
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º throttling —Å 4 –¥–æ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
    if (cloud._lastClientSync && cloud._lastClientSync.clientId === client_id && (now - cloud._lastClientSync.ts) < 30000){
      log('client bootstrap skipped (throttled)', client_id);
      return;
    }
    
    try{
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–±–µ–∑ –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è)
      const _exists = await cloud.ensureClient(client_id);
      if (!_exists){
        log('client bootstrap skipped (no such client)', client_id);
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –Ω—É–∂–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const { data: metaData, error: metaError } = await client
        .from('client_kv_store')
        .select('k,updated_at')
        .eq('client_id', client_id)
        .order('updated_at', { ascending: false })
        .limit(5);
        
      if (metaError) { 
        err('client bootstrap meta check', metaError); 
        return; 
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      const lastSyncTime = cloud._lastClientSync?.ts || 0;
      const hasUpdates = (metaData || []).some(row => 
        new Date(row.updated_at).getTime() > lastSyncTime
      );
      
      if (!hasUpdates && cloud._lastClientSync?.clientId === client_id) {
        log('client bootstrap skipped (no updates)', client_id);
        cloud._lastClientSync.ts = now; // –û–±–Ω–æ–≤–ª—è–µ–º timestamp –¥–ª—è throttling
        return;
      }
      
      // –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const { data, error } = await client.from('client_kv_store').select('k,v,updated_at').eq('client_id', client_id);
      if (error) { err('client bootstrap select', error); return; }
      
      const ls = global.localStorage;
      muteMirror = true;
      // clear only keys that belong to the requested client to avoid wiping other clients' data
      clearNamespace(client_id);
      
      (data||[]).forEach(row => {
        try {
          // row.k is stored in DB as the original key; when using client-scoped storage,
          // DB should contain keys already scoped for the client (heys_<cid>_... or day_<cid>_...)
          const key = row.k;
          // –ö–æ–Ω—Ñ–ª–∏–∫—Ç: –µ—Å–ª–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –µ—Å—Ç—å —Ä–µ–≤–∏–∑–∏—è, —Å—Ä–∞–≤–Ω–∏—Ç—å –∏ –≤–∑—è—Ç—å –±–æ–ª–µ–µ —Å–≤–µ–∂—É—é
          let local = null;
          try { local = JSON.parse(ls.getItem(key)); } catch(e){}
          let remoteRev = row.v && row.v.revision ? row.v.revision : 0;
          let localRev = local && local.revision ? local.revision : 0;
          if (localRev > remoteRev) {
            // –ª–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–æ–≤–µ–µ ‚Äî –Ω–µ –∑–∞—Ç–∏—Ä–∞–µ–º
            log('conflict: keep local', key);
            return;
          }
          ls.setItem(key, JSON.stringify(row.v));
          
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
          if (key === 'heys_products' && row.v) {
            if (typeof window !== 'undefined' && window.dispatchEvent) {
              setTimeout(() => {
                window.dispatchEvent(new CustomEvent('heysProductsUpdated', { detail: { products: row.v } }));
              }, 100);
            }
          }
        } catch(e){}
      });
      
      muteMirror = false;
      cloud._lastClientSync = { clientId: client_id, ts: now };
      // –£–±—Ä–∞–Ω–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ client bootstrap synced keys
    }catch(e){ 
      err('client bootstrap exception', e); 
      muteMirror=false; 
    }
  };

  cloud.shouldSyncClient = function(client_id, maxAgeMs){
    if (!client_id) return false;
    const rec = cloud._lastClientSync;
    if (!rec || rec.clientId !== client_id) return true;
    return (Date.now() - rec.ts) > (maxAgeMs||4000);
  };

  // –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  let clientUpsertQueue = [];
  let clientUpsertTimer = null;
  
  function scheduleClientPush(){
    if (clientUpsertTimer) return;
    clientUpsertTimer = setTimeout(async () => {
      const batch = clientUpsertQueue.splice(0, clientUpsertQueue.length);
      clientUpsertTimer = null;
      if (!client || !user || !batch.length) return;
      
      // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ user_id+client_id+k, –æ—Å—Ç–∞–≤–ª—è—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
      const uniqueBatch = [];
      const seenKeys = new Set();
      for (let i = batch.length - 1; i >= 0; i--) {
        const item = batch[i];
        const key = `${item.user_id}:${item.client_id}:${item.k}`;
        if (!seenKeys.has(key)) {
          seenKeys.add(key);
          uniqueBatch.unshift(item);
        }
      }
      
      try{
        const promises = uniqueBatch.map(item => 
          cloud.upsert('client_kv_store', item, 'user_id,client_id,k')
            .catch(() => {}) // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        );
        await Promise.allSettled(promises);
      }catch(e){}
    }, 500); // –ù–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  cloud.getSyncStatus = function(key) {
    if (clientUpsertQueue.some(item => item.k === key)) {
      return 'pending'; // –í –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
    }
    return 'synced'; // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  cloud.waitForSync = function(key, timeout = 5000) {
    return new Promise((resolve) => {
      const startTime = Date.now();
      const checkSync = () => {
        if (cloud.getSyncStatus(key) === 'synced' || (Date.now() - startTime) > timeout) {
          resolve(cloud.getSyncStatus(key));
        } else {
          setTimeout(checkSync, 100);
        }
      };
      checkSync();
    });
  };
  // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É saveClientKey(k, v) ‚Äî –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ client_id –±–µ—Ä—ë—Ç—Å—è –∏–∑ HEYS.currentClientId.
      cloud.saveClientKey = function(...args) {
        let client_id, k, value;

        if (args.length === 3) {
            client_id = args[0];
            k = args[1];
            value = args[2];
        } else if (args.length === 2) {
            k = args[0];
            value = args[1];
            
            // –ï—Å–ª–∏ –∫–ª—é—á —Å–æ–¥–µ—Ä–∂–∏—Ç client_id –≤ —Ñ–æ—Ä–º–∞—Ç–µ heys_clientId_dayv2_... - –∏–∑–≤–ª–µ–∫–∞–µ–º –µ–≥–æ
            if (k && k.startsWith('heys_') && k.includes('_dayv2_')) {
                const parts = k.split('_');
                if (parts.length >= 3) {
                    const extractedId = parts[1]; // –±–µ—Ä–µ–º client_id –∏–∑ –∫–ª—é—á–∞
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ UUID, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ "dayv2"
                    if (extractedId && extractedId !== 'dayv2' && extractedId.length > 8) {
                        client_id = extractedId;
                    }
                }
            }
            
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–ª—é—á–µ–π (heys_profile, heys_products –∏ —Ç.–¥.) –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            if (!client_id && window.HEYS && window.HEYS.currentClientId) {
                client_id = window.HEYS.currentClientId;
            }
            
            // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç client_id, –Ω–æ –µ—Å—Ç—å user - —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π client_id –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (!client_id && user && user.id) {
                // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π –Ω–æ –≤–∞–ª–∏–¥–Ω—ã–π UUID –Ω–∞ –æ—Å–Ω–æ–≤–µ user.id
                // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ user.id –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ UUID
                const userIdShort = user.id.replace(/-/g, '').substring(0, 8);
                client_id = `00000000-0000-4000-8000-${userIdShort}0000`.substring(0, 36);
            }
        } else {
            return;
        }

        if (!client_id) {
            return;
        }

        if (!user || !user.id) {
            return;
        }

        // –î–ª—è –¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ª—é–±—ã–µ —Ç–∏–ø—ã
        if (k && k.includes('dayv2_')) {
            if (typeof value !== 'object' || value === null) {
                return;
            }
        }

        const upsertObj = {
            user_id: user.id,
            client_id: client_id,
            k: k,
            v: value,
            updated_at: (new Date()).toISOString(),
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –≤–º–µ—Å—Ç–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        clientUpsertQueue.push(upsertObj);
        scheduleClientPush();
    };

    // –§—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (–±–æ–ª—å—à–µ –ù–ï —Å–æ–∑–¥–∞—ë–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    cloud.ensureClient = async function(clientId) {
        if (!client || !user || !clientId) return false;
        try {
            const { data, error } = await client
              .from('clients')
              .select('id')
              .eq('id', clientId)
              .eq('curator_id', user.id)
              .limit(1);
            if (error) return false;
            return (data && data.length > 0);
        } catch(e){
          return false;
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ client_kv_store
    cloud.upsert = async function(tableName, obj, conflictKey) {
        if (!client || !user) {
            throw new Error('Client or user not available');
        }
        
        try {
            // –ï—Å–ª–∏ —ç—Ç–æ client_kv_store, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç; –∏–Ω–∞—á–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if (tableName === 'client_kv_store' && obj.client_id) {
                const _exists = await cloud.ensureClient(obj.client_id);
                if (!_exists){
                  // –£–±—Ä–∞–Ω–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ skip upsert (client not found)
                  return { skipped: true, reason: 'client_not_found' };
                }
            }
            
            const { error } = await client
                .from(tableName)
                .upsert(obj, { onConflict: conflictKey || 'user_id,client_id,k' });
            
            if (error) {
                throw error;
            } else {
                return { success: true };
            }
        } catch (e) {
            throw e;
        }
    };

  // –æ—á–µ—Ä–µ–¥—å upsert'–æ–≤
  let upsertQueue = [];
  let upsertTimer = null;
  function schedulePush(){
    if (upsertTimer) return;
    upsertTimer = setTimeout(async () => {
      const batch = upsertQueue.splice(0, upsertQueue.length);
      upsertTimer = null;
      if (!client || !user || !batch.length) return;
      
      // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ user_id+k, –æ—Å—Ç–∞–≤–ª—è—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
      const uniqueBatch = [];
      const seenKeys = new Set();
      for (let i = batch.length - 1; i >= 0; i--) {
        const item = batch[i];
        const key = `${item.user_id}:${item.k}`;
        if (!seenKeys.has(key)) {
          seenKeys.add(key);
          uniqueBatch.unshift(item);
        }
      }
      
      try{
        const { error } = await client.from('kv_store').upsert(uniqueBatch, { onConflict: 'user_id,k' });
        if (error) { err('bulk upsert', error); return; }
        // –£–±—Ä–∞–Ω–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ upsert ok –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
      }catch(e){ err('bulk upsert exception', e); }
    }, 300);
  }

  cloud.saveKey = function(k, v){
    if (!user || !k) return;
    const upsertObj = {
      user_id: user.id,
      k: k,
      v: v,
      updated_at: (new Date()).toISOString(),
    };
    upsertQueue.push(upsertObj);
    schedulePush();
  };

  cloud.deleteKey = function(k){
    // –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ .delete(), –∏–ª–∏ —Å—Ç–∞–≤–∏—Ç—å –ø–æ–º–µ—Ç–∫—É
  };

  cloud.clearAll = function(){
    clearNamespace();
  };

  // —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  cloud.lsGet = typeof global.HEYS !== 'undefined' && global.HEYS.lsGet
    ? global.HEYS.lsGet
    : function(k, def){ try{ const v = localStorage.getItem(k); return v ? JSON.parse(v) : def; }catch(e){ return def; } };

  cloud.lsSet = typeof global.HEYS !== 'undefined' && global.HEYS.lsSet
    ? global.HEYS.lsSet
    : function(k, v){ try{ localStorage.setItem(k, JSON.stringify(v)); }catch(e){} };

  // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ—Å—Ç–∞–º–∏
  HEYS.SupabaseConnection = {
    connect: cloud.signIn,
    disconnect: cloud.signOut,
    isConnected: function() { return status === 'online'; },
    getStatus: function() { return status; },
    getUser: function() { return user; },
    sync: cloud.pushAll,
    client: function() { return client; }
  };

  // –£–±—Ä–∞–Ω–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ utils lsSet wrapped

})(window);
